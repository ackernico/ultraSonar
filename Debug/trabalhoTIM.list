
trabalhoTIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008130  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08008300  08008300  00009300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b4  080086b4  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080086b4  080086b4  000096b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086bc  080086bc  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086bc  080086bc  000096bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086c0  080086c0  000096c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080086c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200001d4  08008898  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08008898  0000a468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f284  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024dc  00000000  00000000  00019488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0001b968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aba  00000000  00000000  0001c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002320b  00000000  00000000  0001d1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001077e  00000000  00000000  000403fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2ed9  00000000  00000000  00050b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123a54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa0  00000000  00000000  00123a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00128538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080082e8 	.word	0x080082e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080082e8 	.word	0x080082e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b37      	ldr	r3, [pc, #220]	@ (80010ac <MX_GPIO_Init+0xf8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a36      	ldr	r2, [pc, #216]	@ (80010ac <MX_GPIO_Init+0xf8>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b34      	ldr	r3, [pc, #208]	@ (80010ac <MX_GPIO_Init+0xf8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b30      	ldr	r3, [pc, #192]	@ (80010ac <MX_GPIO_Init+0xf8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a2f      	ldr	r2, [pc, #188]	@ (80010ac <MX_GPIO_Init+0xf8>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80010ac <MX_GPIO_Init+0xf8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b29      	ldr	r3, [pc, #164]	@ (80010ac <MX_GPIO_Init+0xf8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a28      	ldr	r2, [pc, #160]	@ (80010ac <MX_GPIO_Init+0xf8>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <MX_GPIO_Init+0xf8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <MX_GPIO_Init+0xf8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a21      	ldr	r2, [pc, #132]	@ (80010ac <MX_GPIO_Init+0xf8>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <MX_GPIO_Init+0xf8>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pinTrig_GPIO_Port, pinTrig_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2101      	movs	r1, #1
 800103e:	481c      	ldr	r0, [pc, #112]	@ (80010b0 <MX_GPIO_Init+0xfc>)
 8001040:	f001 f932 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2120      	movs	r1, #32
 8001048:	481a      	ldr	r0, [pc, #104]	@ (80010b4 <MX_GPIO_Init+0x100>)
 800104a:	f001 f92d 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800104e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001054:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105a:	2301      	movs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4812      	ldr	r0, [pc, #72]	@ (80010b0 <MX_GPIO_Init+0xfc>)
 8001066:	f000 ff73 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : pinTrig_Pin */
  GPIO_InitStruct.Pin = pinTrig_Pin;
 800106a:	2301      	movs	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pinTrig_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <MX_GPIO_Init+0xfc>)
 8001082:	f000 ff65 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001086:	2320      	movs	r3, #32
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <MX_GPIO_Init+0x100>)
 800109e:	f000 ff57 	bl	8001f50 <HAL_GPIO_Init>

}
 80010a2:	bf00      	nop
 80010a4:	3728      	adds	r7, #40	@ 0x28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020000 	.word	0x40020000

080010b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010bc:	f000 fd32 	bl	8001b24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010c0:	f000 f84c 	bl	800115c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010c4:	f7ff ff76 	bl	8000fb4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80010c8:	f000 fc88 	bl	80019dc <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80010cc:	f000 fb6c 	bl	80017a8 <MX_TIM2_Init>
	MX_TIM1_Init();
 80010d0:	f000 fade 	bl	8001690 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80010d4:	2100      	movs	r1, #0
 80010d6:	481a      	ldr	r0, [pc, #104]	@ (8001140 <main+0x88>)
 80010d8:	f002 f918 	bl	800330c <HAL_TIM_IC_Start_IT>
	HAL_UART_Transmit_IT(&huart2, "Initializing...\r\n", 15);
 80010dc:	220f      	movs	r2, #15
 80010de:	4919      	ldr	r1, [pc, #100]	@ (8001144 <main+0x8c>)
 80010e0:	4819      	ldr	r0, [pc, #100]	@ (8001148 <main+0x90>)
 80010e2:	f003 fb89 	bl	80047f8 <HAL_UART_Transmit_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if((HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET && btnPressed == 0) || isCaptured != 0)
 80010e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ea:	4818      	ldr	r0, [pc, #96]	@ (800114c <main+0x94>)
 80010ec:	f001 f8c4 	bl	8002278 <HAL_GPIO_ReadPin>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <main+0x46>
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <main+0x98>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <main+0x4e>
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <main+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00f      	beq.n	8001126 <main+0x6e>
		{
			btnPressed = 1;
 8001106:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <main+0x98>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800110c:	2100      	movs	r1, #0
 800110e:	4812      	ldr	r0, [pc, #72]	@ (8001158 <main+0xa0>)
 8001110:	f002 f832 	bl	8003178 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001114:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <main+0xa0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800111c:	2100      	movs	r1, #0
 800111e:	480e      	ldr	r0, [pc, #56]	@ (8001158 <main+0xa0>)
 8001120:	f001 ff62 	bl	8002fe8 <HAL_TIM_PWM_Start>
 8001124:	e00a      	b.n	800113c <main+0x84>
		}
		else if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8001126:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800112a:	4808      	ldr	r0, [pc, #32]	@ (800114c <main+0x94>)
 800112c:	f001 f8a4 	bl	8002278 <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b01      	cmp	r3, #1
 8001134:	d1d7      	bne.n	80010e6 <main+0x2e>
		{
			btnPressed = 0;
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <main+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
		if((HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET && btnPressed == 0) || isCaptured != 0)
 800113c:	e7d3      	b.n	80010e6 <main+0x2e>
 800113e:	bf00      	nop
 8001140:	20000288 	.word	0x20000288
 8001144:	08008300 	.word	0x08008300
 8001148:	200002d0 	.word	0x200002d0
 800114c:	40020800 	.word	0x40020800
 8001150:	200001f0 	.word	0x200001f0
 8001154:	200001f4 	.word	0x200001f4
 8001158:	20000240 	.word	0x20000240

0800115c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b094      	sub	sp, #80	@ 0x50
 8001160:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2234      	movs	r2, #52	@ 0x34
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f004 ffed 	bl	800614a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <SystemClock_Config+0xd4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	4a29      	ldr	r2, [pc, #164]	@ (8001230 <SystemClock_Config+0xd4>)
 800118a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800118e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001190:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <SystemClock_Config+0xd4>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	4b24      	ldr	r3, [pc, #144]	@ (8001234 <SystemClock_Config+0xd8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011a8:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <SystemClock_Config+0xd8>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <SystemClock_Config+0xd8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2310      	movs	r3, #16
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80011d0:	2310      	movs	r3, #16
 80011d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80011d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011d8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011da:	2304      	movs	r3, #4
 80011dc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80011de:	2302      	movs	r3, #2
 80011e0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fbc0 	bl	8002970 <HAL_RCC_OscConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80011f6:	f000 f901 	bl	80013fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fa:	230f      	movs	r3, #15
 80011fc:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fe:	2302      	movs	r3, #2
 8001200:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2102      	movs	r1, #2
 8001216:	4618      	mov	r0, r3
 8001218:	f001 f860 	bl	80022dc <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001222:	f000 f8eb 	bl	80013fc <Error_Handler>
	}
}
 8001226:	bf00      	nop
 8001228:	3750      	adds	r7, #80	@ 0x50
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <distanceFilter>:

/* USER CODE BEGIN 4 */
float distanceFilter(float rawDistance, int modifier)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001242:	6038      	str	r0, [r7, #0]
	float filteredDistance;

	for(int i=0 ; i<modifier ; i++)
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	e00a      	b.n	8001260 <distanceFilter+0x28>
	{
		filteredDistance += rawDistance;
 800124a:	ed97 7a03 	vldr	s14, [r7, #12]
 800124e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001256:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i=0 ; i<modifier ; i++)
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	3301      	adds	r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbf0      	blt.n	800124a <distanceFilter+0x12>
	}

	filteredDistance = filteredDistance / modifier;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001272:	edd7 6a03 	vldr	s13, [r7, #12]
 8001276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800127a:	edc7 7a03 	vstr	s15, [r7, #12]
	return filteredDistance;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	ee07 3a90 	vmov	s15, r3
}
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	0000      	movs	r0, r0
 8001294:	0000      	movs	r0, r0
	...

08001298 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a8:	f040 8084 	bne.w	80013b4 <HAL_TIM_IC_CaptureCallback+0x11c>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7f1b      	ldrb	r3, [r3, #28]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d167      	bne.n	8001384 <HAL_TIM_IC_CaptureCallback+0xec>
		{
			if(isCaptured == 0)
 80012b4:	4b44      	ldr	r3, [pc, #272]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10b      	bne.n	80012d4 <HAL_TIM_IC_CaptureCallback+0x3c>
			{
				IC1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80012bc:	2100      	movs	r1, #0
 80012be:	4843      	ldr	r0, [pc, #268]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x134>)
 80012c0:	f002 fcbc 	bl	8003c3c <HAL_TIM_ReadCapturedValue>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80012ca:	801a      	strh	r2, [r3, #0]
				isCaptured = 1;
 80012cc:	4b3e      	ldr	r3, [pc, #248]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e057      	b.n	8001384 <HAL_TIM_IC_CaptureCallback+0xec>
			}
			else if(isCaptured == 1)
 80012d4:	4b3c      	ldr	r3, [pc, #240]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d153      	bne.n	8001384 <HAL_TIM_IC_CaptureCallback+0xec>
			{
				IC2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80012dc:	2100      	movs	r1, #0
 80012de:	483b      	ldr	r0, [pc, #236]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x134>)
 80012e0:	f002 fcac 	bl	8003c3c <HAL_TIM_ReadCapturedValue>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b3a      	ldr	r3, [pc, #232]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80012ea:	801a      	strh	r2, [r3, #0]

				rawValue = IC2 - IC1;
 80012ec:	4b39      	ldr	r3, [pc, #228]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	4b37      	ldr	r3, [pc, #220]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b37      	ldr	r3, [pc, #220]	@ (80013d8 <HAL_TIM_IC_CaptureCallback+0x140>)
 80012fa:	801a      	strh	r2, [r3, #0]

				period = (float)rawValue * (84.0f/84000000.0f) * 1000;
 80012fc:	4b36      	ldr	r3, [pc, #216]	@ (80013d8 <HAL_TIM_IC_CaptureCallback+0x140>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001308:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80013dc <HAL_TIM_IC_CaptureCallback+0x144>
 800130c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001310:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80013e0 <HAL_TIM_IC_CaptureCallback+0x148>
 8001314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001318:	4b32      	ldr	r3, [pc, #200]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800131a:	edc3 7a00 	vstr	s15, [r3]
				distance = distanceFilter(((period/1000 * 1000000)/2) * 0.034, 2500);
 800131e:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001320:	ed93 7a00 	vldr	s14, [r3]
 8001324:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80013e0 <HAL_TIM_IC_CaptureCallback+0x148>
 8001328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80013e8 <HAL_TIM_IC_CaptureCallback+0x150>
 8001330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001334:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001338:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800133c:	ee16 0a90 	vmov	r0, s13
 8001340:	f7ff f922 	bl	8000588 <__aeabi_f2d>
 8001344:	a31e      	add	r3, pc, #120	@ (adr r3, 80013c0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff f975 	bl	8000638 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fc47 	bl	8000be8 <__aeabi_d2f>
 800135a:	4603      	mov	r3, r0
 800135c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001360:	ee00 3a10 	vmov	s0, r3
 8001364:	f7ff ff68 	bl	8001238 <distanceFilter>
 8001368:	eef0 7a40 	vmov.f32	s15, s0
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <HAL_TIM_IC_CaptureCallback+0x154>)
 800136e:	edc3 7a00 	vstr	s15, [r3]

				IC1 = 0;
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001374:	2200      	movs	r2, #0
 8001376:	801a      	strh	r2, [r3, #0]
				IC2 = 0;
 8001378:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800137a:	2200      	movs	r2, #0
 800137c:	801a      	strh	r2, [r3, #0]

				isCaptured = 0;
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
			}
		}
		snprintf(message, 50, "Distance: %.2f\r\n", distance);
 8001384:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <HAL_TIM_IC_CaptureCallback+0x154>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8fd 	bl	8000588 <__aeabi_f2d>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	e9cd 2300 	strd	r2, r3, [sp]
 8001396:	4a16      	ldr	r2, [pc, #88]	@ (80013f0 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001398:	2132      	movs	r1, #50	@ 0x32
 800139a:	4816      	ldr	r0, [pc, #88]	@ (80013f4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800139c:	f004 fe5c 	bl	8006058 <sniprintf>
		HAL_UART_Transmit_IT(&huart2, message, strlen(message));
 80013a0:	4814      	ldr	r0, [pc, #80]	@ (80013f4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80013a2:	f7fe ff85 	bl	80002b0 <strlen>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	4911      	ldr	r1, [pc, #68]	@ (80013f4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80013ae:	4812      	ldr	r0, [pc, #72]	@ (80013f8 <HAL_TIM_IC_CaptureCallback+0x160>)
 80013b0:	f003 fa22 	bl	80047f8 <HAL_UART_Transmit_IT>
	}
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	f3af 8000 	nop.w
 80013c0:	b020c49c 	.word	0xb020c49c
 80013c4:	3fa16872 	.word	0x3fa16872
 80013c8:	200001f4 	.word	0x200001f4
 80013cc:	20000288 	.word	0x20000288
 80013d0:	200001f8 	.word	0x200001f8
 80013d4:	200001fa 	.word	0x200001fa
 80013d8:	200001fc 	.word	0x200001fc
 80013dc:	358637bd 	.word	0x358637bd
 80013e0:	447a0000 	.word	0x447a0000
 80013e4:	20000200 	.word	0x20000200
 80013e8:	49742400 	.word	0x49742400
 80013ec:	20000204 	.word	0x20000204
 80013f0:	08008314 	.word	0x08008314
 80013f4:	20000208 	.word	0x20000208
 80013f8:	200002d0 	.word	0x200002d0

080013fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	4a0f      	ldr	r2, [pc, #60]	@ (8001454 <HAL_MspInit+0x4c>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800141c:	6453      	str	r3, [r2, #68]	@ 0x44
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <HAL_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4a08      	ldr	r2, [pc, #32]	@ (8001454 <HAL_MspInit+0x4c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	@ 0x40
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001446:	2007      	movs	r0, #7
 8001448:	f000 fcae 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <NMI_Handler+0x4>

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <MemManage_Handler+0x4>

08001470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <UsageFault_Handler+0x4>

08001480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ae:	f000 fb8b 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <TIM2_IRQHandler+0x10>)
 80014be:	f002 f8a7 	bl	8003610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000288 	.word	0x20000288

080014cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <USART2_IRQHandler+0x10>)
 80014d2:	f003 f9c7 	bl	8004864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200002d0 	.word	0x200002d0

080014e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return 1;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_kill>:

int _kill(int pid, int sig)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014fa:	f004 fe79 	bl	80061f0 <__errno>
 80014fe:	4603      	mov	r3, r0
 8001500:	2216      	movs	r2, #22
 8001502:	601a      	str	r2, [r3, #0]
  return -1;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_exit>:

void _exit (int status)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001518:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ffe7 	bl	80014f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001522:	bf00      	nop
 8001524:	e7fd      	b.n	8001522 <_exit+0x12>

08001526 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	e00a      	b.n	800154e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001538:	f3af 8000 	nop.w
 800153c:	4601      	mov	r1, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	60ba      	str	r2, [r7, #8]
 8001544:	b2ca      	uxtb	r2, r1
 8001546:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3301      	adds	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	dbf0      	blt.n	8001538 <_read+0x12>
  }

  return len;
 8001556:	687b      	ldr	r3, [r7, #4]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e009      	b.n	8001586 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	60ba      	str	r2, [r7, #8]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	dbf1      	blt.n	8001572 <_write+0x12>
  }
  return len;
 800158e:	687b      	ldr	r3, [r7, #4]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_close>:

int _close(int file)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c0:	605a      	str	r2, [r3, #4]
  return 0;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_isatty>:

int _isatty(int file)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015d8:	2301      	movs	r3, #1
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	@ (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f004 fdde 	bl	80061f0 <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	@ (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20020000 	.word	0x20020000
 8001660:	00000400 	.word	0x00000400
 8001664:	2000023c 	.word	0x2000023c
 8001668:	20000468 	.word	0x20000468

0800166c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <SystemInit+0x20>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <SystemInit+0x20>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b092      	sub	sp, #72	@ 0x48
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001696:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2220      	movs	r2, #32
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 fd45 	bl	800614a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016c0:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <MX_TIM1_Init+0x110>)
 80016c2:	4a38      	ldr	r2, [pc, #224]	@ (80017a4 <MX_TIM1_Init+0x114>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80016c6:	4b36      	ldr	r3, [pc, #216]	@ (80017a0 <MX_TIM1_Init+0x110>)
 80016c8:	2253      	movs	r2, #83	@ 0x53
 80016ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b34      	ldr	r3, [pc, #208]	@ (80017a0 <MX_TIM1_Init+0x110>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80016d2:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <MX_TIM1_Init+0x110>)
 80016d4:	2263      	movs	r2, #99	@ 0x63
 80016d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <MX_TIM1_Init+0x110>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016de:	4b30      	ldr	r3, [pc, #192]	@ (80017a0 <MX_TIM1_Init+0x110>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <MX_TIM1_Init+0x110>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016ea:	482d      	ldr	r0, [pc, #180]	@ (80017a0 <MX_TIM1_Init+0x110>)
 80016ec:	f001 fc2d 	bl	8002f4a <HAL_TIM_PWM_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80016f6:	f7ff fe81 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80016fa:	2108      	movs	r1, #8
 80016fc:	4828      	ldr	r0, [pc, #160]	@ (80017a0 <MX_TIM1_Init+0x110>)
 80016fe:	f001 ff2d 	bl	800355c <HAL_TIM_OnePulse_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001708:	f7ff fe78 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001714:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001718:	4619      	mov	r1, r3
 800171a:	4821      	ldr	r0, [pc, #132]	@ (80017a0 <MX_TIM1_Init+0x110>)
 800171c:	f002 ff3a 	bl	8004594 <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001726:	f7ff fe69 	bl	80013fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800172a:	2370      	movs	r3, #112	@ 0x70
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 800172e:	230a      	movs	r3, #10
 8001730:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174a:	2200      	movs	r2, #0
 800174c:	4619      	mov	r1, r3
 800174e:	4814      	ldr	r0, [pc, #80]	@ (80017a0 <MX_TIM1_Init+0x110>)
 8001750:	f002 f8ea 	bl	8003928 <HAL_TIM_PWM_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800175a:	f7ff fe4f 	bl	80013fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001772:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001776:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <MX_TIM1_Init+0x110>)
 8001782:	f002 ff83 	bl	800468c <HAL_TIMEx_ConfigBreakDeadTime>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800178c:	f7ff fe36 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <MX_TIM1_Init+0x110>)
 8001792:	f000 f8e9 	bl	8001968 <HAL_TIM_MspPostInit>

}
 8001796:	bf00      	nop
 8001798:	3748      	adds	r7, #72	@ 0x48
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000240 	.word	0x20000240
 80017a4:	40010000 	.word	0x40010000

080017a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0318 	add.w	r3, r7, #24
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017c6:	463b      	mov	r3, r7
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001884 <MX_TIM2_Init+0xdc>)
 80017d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80017da:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <MX_TIM2_Init+0xdc>)
 80017dc:	2253      	movs	r2, #83	@ 0x53
 80017de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <MX_TIM2_Init+0xdc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017e6:	4b27      	ldr	r3, [pc, #156]	@ (8001884 <MX_TIM2_Init+0xdc>)
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <MX_TIM2_Init+0xdc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b23      	ldr	r3, [pc, #140]	@ (8001884 <MX_TIM2_Init+0xdc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017fa:	4822      	ldr	r0, [pc, #136]	@ (8001884 <MX_TIM2_Init+0xdc>)
 80017fc:	f001 fb56 	bl	8002eac <HAL_TIM_Base_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001806:	f7ff fdf9 	bl	80013fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800180e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	4619      	mov	r1, r3
 8001816:	481b      	ldr	r0, [pc, #108]	@ (8001884 <MX_TIM2_Init+0xdc>)
 8001818:	f002 f948 	bl	8003aac <HAL_TIM_ConfigClockSource>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001822:	f7ff fdeb 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001826:	4817      	ldr	r0, [pc, #92]	@ (8001884 <MX_TIM2_Init+0xdc>)
 8001828:	f001 fd16 	bl	8003258 <HAL_TIM_IC_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001832:	f7ff fde3 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	4619      	mov	r1, r3
 8001844:	480f      	ldr	r0, [pc, #60]	@ (8001884 <MX_TIM2_Init+0xdc>)
 8001846:	f002 fea5 	bl	8004594 <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001850:	f7ff fdd4 	bl	80013fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001854:	230a      	movs	r3, #10
 8001856:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001858:	2301      	movs	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	2200      	movs	r2, #0
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	@ (8001884 <MX_TIM2_Init+0xdc>)
 800186c:	f001 ffc0 	bl	80037f0 <HAL_TIM_IC_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001876:	f7ff fdc1 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000288 	.word	0x20000288

08001888 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0b      	ldr	r2, [pc, #44]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10d      	bne.n	80018b6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <HAL_TIM_PWM_MspInit+0x40>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	4a09      	ldr	r2, [pc, #36]	@ (80018c8 <HAL_TIM_PWM_MspInit+0x40>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018aa:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <HAL_TIM_PWM_MspInit+0x40>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40010000 	.word	0x40010000
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	@ 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ec:	d133      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_TIM_Base_MspInit+0x94>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001960 <HAL_TIM_Base_MspInit+0x94>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <HAL_TIM_Base_MspInit+0x94>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <HAL_TIM_Base_MspInit+0x94>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a13      	ldr	r2, [pc, #76]	@ (8001960 <HAL_TIM_Base_MspInit+0x94>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_TIM_Base_MspInit+0x94>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001926:	2301      	movs	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001936:	2301      	movs	r3, #1
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4808      	ldr	r0, [pc, #32]	@ (8001964 <HAL_TIM_Base_MspInit+0x98>)
 8001942:	f000 fb05 	bl	8001f50 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	201c      	movs	r0, #28
 800194c:	f000 fa37 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001950:	201c      	movs	r0, #28
 8001952:	f000 fa50 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	@ 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000

08001968 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a12      	ldr	r2, [pc, #72]	@ (80019d0 <HAL_TIM_MspPostInit+0x68>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11e      	bne.n	80019c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a10      	ldr	r2, [pc, #64]	@ (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	4619      	mov	r1, r3
 80019c2:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <HAL_TIM_MspPostInit+0x70>)
 80019c4:	f000 fac4 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40010000 	.word	0x40010000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000

080019dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <MX_USART2_UART_Init+0x4c>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <MX_USART2_UART_Init+0x50>)
 80019e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <MX_USART2_UART_Init+0x4c>)
 80019e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <MX_USART2_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <MX_USART2_UART_Init+0x4c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <MX_USART2_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <MX_USART2_UART_Init+0x4c>)
 8001a02:	220c      	movs	r2, #12
 8001a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <MX_USART2_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <MX_USART2_UART_Init+0x4c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <MX_USART2_UART_Init+0x4c>)
 8001a14:	f002 fea0 	bl	8004758 <HAL_UART_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a1e:	f7ff fced 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200002d0 	.word	0x200002d0
 8001a2c:	40004400 	.word	0x40004400

08001a30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac4 <HAL_UART_MspInit+0x94>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d133      	bne.n	8001aba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a8a:	230c      	movs	r3, #12
 8001a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4809      	ldr	r0, [pc, #36]	@ (8001acc <HAL_UART_MspInit+0x9c>)
 8001aa6:	f000 fa53 	bl	8001f50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	2026      	movs	r0, #38	@ 0x26
 8001ab0:	f000 f985 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ab4:	2026      	movs	r0, #38	@ 0x26
 8001ab6:	f000 f99e 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	@ 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020000 	.word	0x40020000

08001ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ad4:	f7ff fdca 	bl	800166c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ada:	490d      	ldr	r1, [pc, #52]	@ (8001b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001adc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001af0:	4c0a      	ldr	r4, [pc, #40]	@ (8001b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001afe:	f004 fb7d 	bl	80061fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b02:	f7ff fad9 	bl	80010b8 <main>
  bx  lr    
 8001b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b14:	080086c4 	.word	0x080086c4
  ldr r2, =_sbss
 8001b18:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b1c:	20000468 	.word	0x20000468

08001b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC_IRQHandler>
	...

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b28:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <HAL_Init+0x40>)
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <HAL_Init+0x40>)
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <HAL_Init+0x40>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f92b 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 f808 	bl	8001b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b58:	f7ff fc56 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00

08001b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_InitTick+0x54>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_InitTick+0x58>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f943 	bl	8001e12 <HAL_SYSTICK_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00e      	b.n	8001bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d80a      	bhi.n	8001bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ba4:	f000 f90b 	bl	8001dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba8:	4a06      	ldr	r2, [pc, #24]	@ (8001bc4 <HAL_InitTick+0x5c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	20000004 	.word	0x20000004

08001bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x20>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_IncTick+0x24>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <HAL_IncTick+0x24>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000318 	.word	0x20000318

08001bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000318 	.word	0x20000318

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4907      	ldr	r1, [pc, #28]	@ (8001ca4 <__NVIC_EnableIRQ+0x38>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	@ (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	@ (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	@ 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	@ 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d88:	f7ff ff8e 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff29 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff3e 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff8e 	bl	8001cfc <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5d 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff31 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffa2 	bl	8001d64 <SysTick_Config>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff feda 	bl	8001bf0 <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d008      	beq.n	8001e5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2280      	movs	r2, #128	@ 0x80
 8001e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e052      	b.n	8001f02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0216 	bic.w	r2, r2, #22
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <HAL_DMA_Abort+0x62>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0208 	bic.w	r2, r2, #8
 8001e9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eac:	e013      	b.n	8001ed6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eae:	f7ff fe9f 	bl	8001bf0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d90c      	bls.n	8001ed6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e015      	b.n	8001f02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1e4      	bne.n	8001eae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	223f      	movs	r2, #63	@ 0x3f
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d004      	beq.n	8001f28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2280      	movs	r2, #128	@ 0x80
 8001f22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e00c      	b.n	8001f42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2205      	movs	r2, #5
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	@ 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e165      	b.n	8002238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 8154 	bne.w	8002232 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d005      	beq.n	8001fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d130      	bne.n	8002004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 0201 	and.w	r2, r3, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b03      	cmp	r3, #3
 800200e:	d017      	beq.n	8002040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d123      	bne.n	8002094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	08da      	lsrs	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3208      	adds	r2, #8
 8002054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	08da      	lsrs	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3208      	adds	r2, #8
 800208e:	69b9      	ldr	r1, [r7, #24]
 8002090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0203 	and.w	r2, r3, #3
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80ae 	beq.w	8002232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b5d      	ldr	r3, [pc, #372]	@ (8002250 <HAL_GPIO_Init+0x300>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	4a5c      	ldr	r2, [pc, #368]	@ (8002250 <HAL_GPIO_Init+0x300>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002250 <HAL_GPIO_Init+0x300>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f2:	4a58      	ldr	r2, [pc, #352]	@ (8002254 <HAL_GPIO_Init+0x304>)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	220f      	movs	r2, #15
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4f      	ldr	r2, [pc, #316]	@ (8002258 <HAL_GPIO_Init+0x308>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d025      	beq.n	800216a <HAL_GPIO_Init+0x21a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4e      	ldr	r2, [pc, #312]	@ (800225c <HAL_GPIO_Init+0x30c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01f      	beq.n	8002166 <HAL_GPIO_Init+0x216>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4d      	ldr	r2, [pc, #308]	@ (8002260 <HAL_GPIO_Init+0x310>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_GPIO_Init+0x212>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4c      	ldr	r2, [pc, #304]	@ (8002264 <HAL_GPIO_Init+0x314>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_GPIO_Init+0x20e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4b      	ldr	r2, [pc, #300]	@ (8002268 <HAL_GPIO_Init+0x318>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00d      	beq.n	800215a <HAL_GPIO_Init+0x20a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4a      	ldr	r2, [pc, #296]	@ (800226c <HAL_GPIO_Init+0x31c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0x206>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a49      	ldr	r2, [pc, #292]	@ (8002270 <HAL_GPIO_Init+0x320>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_Init+0x202>
 800214e:	2306      	movs	r3, #6
 8002150:	e00c      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002152:	2307      	movs	r3, #7
 8002154:	e00a      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002156:	2305      	movs	r3, #5
 8002158:	e008      	b.n	800216c <HAL_GPIO_Init+0x21c>
 800215a:	2304      	movs	r3, #4
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x21c>
 800215e:	2303      	movs	r3, #3
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x21c>
 800216a:	2300      	movs	r3, #0
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	f002 0203 	and.w	r2, r2, #3
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4093      	lsls	r3, r2
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217c:	4935      	ldr	r1, [pc, #212]	@ (8002254 <HAL_GPIO_Init+0x304>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218a:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <HAL_GPIO_Init+0x324>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ae:	4a31      	ldr	r2, [pc, #196]	@ (8002274 <HAL_GPIO_Init+0x324>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <HAL_GPIO_Init+0x324>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d8:	4a26      	ldr	r2, [pc, #152]	@ (8002274 <HAL_GPIO_Init+0x324>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021de:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <HAL_GPIO_Init+0x324>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002202:	4a1c      	ldr	r2, [pc, #112]	@ (8002274 <HAL_GPIO_Init+0x324>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002208:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <HAL_GPIO_Init+0x324>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800222c:	4a11      	ldr	r2, [pc, #68]	@ (8002274 <HAL_GPIO_Init+0x324>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	f67f ae96 	bls.w	8001f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	40013800 	.word	0x40013800
 8002258:	40020000 	.word	0x40020000
 800225c:	40020400 	.word	0x40020400
 8002260:	40020800 	.word	0x40020800
 8002264:	40020c00 	.word	0x40020c00
 8002268:	40021000 	.word	0x40021000
 800226c:	40021400 	.word	0x40021400
 8002270:	40021800 	.word	0x40021800
 8002274:	40013c00 	.word	0x40013c00

08002278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e001      	b.n	800229a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c4:	e003      	b.n	80022ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	041a      	lsls	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	619a      	str	r2, [r3, #24]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0cc      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f0:	4b68      	ldr	r3, [pc, #416]	@ (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d90c      	bls.n	8002318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b65      	ldr	r3, [pc, #404]	@ (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b63      	ldr	r3, [pc, #396]	@ (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0b8      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002330:	4b59      	ldr	r3, [pc, #356]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4a58      	ldr	r2, [pc, #352]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800233a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002348:	4b53      	ldr	r3, [pc, #332]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4a52      	ldr	r2, [pc, #328]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002354:	4b50      	ldr	r3, [pc, #320]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	494d      	ldr	r1, [pc, #308]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d044      	beq.n	80023fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b47      	ldr	r3, [pc, #284]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d119      	bne.n	80023ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e07f      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d003      	beq.n	800239a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002396:	2b03      	cmp	r3, #3
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239a:	4b3f      	ldr	r3, [pc, #252]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e06f      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e067      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ba:	4b37      	ldr	r3, [pc, #220]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f023 0203 	bic.w	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4934      	ldr	r1, [pc, #208]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023cc:	f7ff fc10 	bl	8001bf0 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d4:	f7ff fc0c 	bl	8001bf0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e04f      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 020c 	and.w	r2, r3, #12
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d1eb      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023fc:	4b25      	ldr	r3, [pc, #148]	@ (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d20c      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b22      	ldr	r3, [pc, #136]	@ (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e032      	b.n	800248a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002430:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4916      	ldr	r1, [pc, #88]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244e:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	490e      	ldr	r1, [pc, #56]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002462:	f000 f855 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 8002466:	4602      	mov	r2, r0
 8002468:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	490a      	ldr	r1, [pc, #40]	@ (800249c <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	5ccb      	ldrb	r3, [r1, r3]
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	4a09      	ldr	r2, [pc, #36]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800247e:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fb70 	bl	8001b68 <HAL_InitTick>

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40023c00 	.word	0x40023c00
 8002498:	40023800 	.word	0x40023800
 800249c:	08008328 	.word	0x08008328
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000004 	.word	0x20000004

080024a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000000 	.word	0x20000000

080024c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024c4:	f7ff fff0 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0a9b      	lsrs	r3, r3, #10
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4903      	ldr	r1, [pc, #12]	@ (80024e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	08008338 	.word	0x08008338

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024ec:	f7ff ffdc 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0b5b      	lsrs	r3, r3, #13
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	@ (800250c <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	08008338 	.word	0x08008338

08002510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002514:	b0ae      	sub	sp, #184	@ 0xb8
 8002516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002536:	4bcb      	ldr	r3, [pc, #812]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x354>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b0c      	cmp	r3, #12
 8002540:	f200 8206 	bhi.w	8002950 <HAL_RCC_GetSysClockFreq+0x440>
 8002544:	a201      	add	r2, pc, #4	@ (adr r2, 800254c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	08002581 	.word	0x08002581
 8002550:	08002951 	.word	0x08002951
 8002554:	08002951 	.word	0x08002951
 8002558:	08002951 	.word	0x08002951
 800255c:	08002589 	.word	0x08002589
 8002560:	08002951 	.word	0x08002951
 8002564:	08002951 	.word	0x08002951
 8002568:	08002951 	.word	0x08002951
 800256c:	08002591 	.word	0x08002591
 8002570:	08002951 	.word	0x08002951
 8002574:	08002951 	.word	0x08002951
 8002578:	08002951 	.word	0x08002951
 800257c:	08002781 	.word	0x08002781
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4bb9      	ldr	r3, [pc, #740]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x358>)
 8002582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002586:	e1e7      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002588:	4bb8      	ldr	r3, [pc, #736]	@ (800286c <HAL_RCC_GetSysClockFreq+0x35c>)
 800258a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800258e:	e1e3      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002590:	4bb4      	ldr	r3, [pc, #720]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x354>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002598:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259c:	4bb1      	ldr	r3, [pc, #708]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x354>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d071      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a8:	4bae      	ldr	r3, [pc, #696]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x354>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	2200      	movs	r2, #0
 80025b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025b4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80025b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80025ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025ce:	4622      	mov	r2, r4
 80025d0:	462b      	mov	r3, r5
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0159      	lsls	r1, r3, #5
 80025dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e0:	0150      	lsls	r0, r2, #5
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4621      	mov	r1, r4
 80025e8:	1a51      	subs	r1, r2, r1
 80025ea:	6439      	str	r1, [r7, #64]	@ 0x40
 80025ec:	4629      	mov	r1, r5
 80025ee:	eb63 0301 	sbc.w	r3, r3, r1
 80025f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002600:	4649      	mov	r1, r9
 8002602:	018b      	lsls	r3, r1, #6
 8002604:	4641      	mov	r1, r8
 8002606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800260a:	4641      	mov	r1, r8
 800260c:	018a      	lsls	r2, r1, #6
 800260e:	4641      	mov	r1, r8
 8002610:	1a51      	subs	r1, r2, r1
 8002612:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002614:	4649      	mov	r1, r9
 8002616:	eb63 0301 	sbc.w	r3, r3, r1
 800261a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002628:	4649      	mov	r1, r9
 800262a:	00cb      	lsls	r3, r1, #3
 800262c:	4641      	mov	r1, r8
 800262e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002632:	4641      	mov	r1, r8
 8002634:	00ca      	lsls	r2, r1, #3
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	4603      	mov	r3, r0
 800263c:	4622      	mov	r2, r4
 800263e:	189b      	adds	r3, r3, r2
 8002640:	633b      	str	r3, [r7, #48]	@ 0x30
 8002642:	462b      	mov	r3, r5
 8002644:	460a      	mov	r2, r1
 8002646:	eb42 0303 	adc.w	r3, r2, r3
 800264a:	637b      	str	r3, [r7, #52]	@ 0x34
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002658:	4629      	mov	r1, r5
 800265a:	024b      	lsls	r3, r1, #9
 800265c:	4621      	mov	r1, r4
 800265e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002662:	4621      	mov	r1, r4
 8002664:	024a      	lsls	r2, r1, #9
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002674:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002678:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800267c:	f7fe fb04 	bl	8000c88 <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4613      	mov	r3, r2
 8002686:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800268a:	e067      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268c:	4b75      	ldr	r3, [pc, #468]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x354>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	2200      	movs	r2, #0
 8002694:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002698:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800269c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026a6:	2300      	movs	r3, #0
 80026a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80026ae:	4622      	mov	r2, r4
 80026b0:	462b      	mov	r3, r5
 80026b2:	f04f 0000 	mov.w	r0, #0
 80026b6:	f04f 0100 	mov.w	r1, #0
 80026ba:	0159      	lsls	r1, r3, #5
 80026bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c0:	0150      	lsls	r0, r2, #5
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4621      	mov	r1, r4
 80026c8:	1a51      	subs	r1, r2, r1
 80026ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80026cc:	4629      	mov	r1, r5
 80026ce:	eb63 0301 	sbc.w	r3, r3, r1
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80026e0:	4649      	mov	r1, r9
 80026e2:	018b      	lsls	r3, r1, #6
 80026e4:	4641      	mov	r1, r8
 80026e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ea:	4641      	mov	r1, r8
 80026ec:	018a      	lsls	r2, r1, #6
 80026ee:	4641      	mov	r1, r8
 80026f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80026f4:	4649      	mov	r1, r9
 80026f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002706:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800270a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800270e:	4692      	mov	sl, r2
 8002710:	469b      	mov	fp, r3
 8002712:	4623      	mov	r3, r4
 8002714:	eb1a 0303 	adds.w	r3, sl, r3
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	462b      	mov	r3, r5
 800271c:	eb4b 0303 	adc.w	r3, fp, r3
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800272e:	4629      	mov	r1, r5
 8002730:	028b      	lsls	r3, r1, #10
 8002732:	4621      	mov	r1, r4
 8002734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002738:	4621      	mov	r1, r4
 800273a:	028a      	lsls	r2, r1, #10
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002744:	2200      	movs	r2, #0
 8002746:	673b      	str	r3, [r7, #112]	@ 0x70
 8002748:	677a      	str	r2, [r7, #116]	@ 0x74
 800274a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800274e:	f7fe fa9b 	bl	8000c88 <__aeabi_uldivmod>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4613      	mov	r3, r2
 8002758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800275c:	4b41      	ldr	r3, [pc, #260]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x354>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	3301      	adds	r3, #1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800276e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800277e:	e0eb      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002780:	4b38      	ldr	r3, [pc, #224]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x354>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002788:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800278c:	4b35      	ldr	r3, [pc, #212]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x354>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d06b      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002798:	4b32      	ldr	r3, [pc, #200]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x354>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	2200      	movs	r2, #0
 80027a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80027ac:	2300      	movs	r3, #0
 80027ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80027b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027b4:	4622      	mov	r2, r4
 80027b6:	462b      	mov	r3, r5
 80027b8:	f04f 0000 	mov.w	r0, #0
 80027bc:	f04f 0100 	mov.w	r1, #0
 80027c0:	0159      	lsls	r1, r3, #5
 80027c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c6:	0150      	lsls	r0, r2, #5
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4621      	mov	r1, r4
 80027ce:	1a51      	subs	r1, r2, r1
 80027d0:	61b9      	str	r1, [r7, #24]
 80027d2:	4629      	mov	r1, r5
 80027d4:	eb63 0301 	sbc.w	r3, r3, r1
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027e6:	4659      	mov	r1, fp
 80027e8:	018b      	lsls	r3, r1, #6
 80027ea:	4651      	mov	r1, sl
 80027ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027f0:	4651      	mov	r1, sl
 80027f2:	018a      	lsls	r2, r1, #6
 80027f4:	4651      	mov	r1, sl
 80027f6:	ebb2 0801 	subs.w	r8, r2, r1
 80027fa:	4659      	mov	r1, fp
 80027fc:	eb63 0901 	sbc.w	r9, r3, r1
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800280c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002810:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002814:	4690      	mov	r8, r2
 8002816:	4699      	mov	r9, r3
 8002818:	4623      	mov	r3, r4
 800281a:	eb18 0303 	adds.w	r3, r8, r3
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	462b      	mov	r3, r5
 8002822:	eb49 0303 	adc.w	r3, r9, r3
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002834:	4629      	mov	r1, r5
 8002836:	024b      	lsls	r3, r1, #9
 8002838:	4621      	mov	r1, r4
 800283a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800283e:	4621      	mov	r1, r4
 8002840:	024a      	lsls	r2, r1, #9
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800284a:	2200      	movs	r2, #0
 800284c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800284e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002850:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002854:	f7fe fa18 	bl	8000c88 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4613      	mov	r3, r2
 800285e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002862:	e065      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x420>
 8002864:	40023800 	.word	0x40023800
 8002868:	00f42400 	.word	0x00f42400
 800286c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002870:	4b3d      	ldr	r3, [pc, #244]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x458>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	2200      	movs	r2, #0
 8002878:	4618      	mov	r0, r3
 800287a:	4611      	mov	r1, r2
 800287c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002880:	653b      	str	r3, [r7, #80]	@ 0x50
 8002882:	2300      	movs	r3, #0
 8002884:	657b      	str	r3, [r7, #84]	@ 0x54
 8002886:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800288a:	4642      	mov	r2, r8
 800288c:	464b      	mov	r3, r9
 800288e:	f04f 0000 	mov.w	r0, #0
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	0159      	lsls	r1, r3, #5
 8002898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800289c:	0150      	lsls	r0, r2, #5
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4641      	mov	r1, r8
 80028a4:	1a51      	subs	r1, r2, r1
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	4649      	mov	r1, r9
 80028aa:	eb63 0301 	sbc.w	r3, r3, r1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028bc:	4659      	mov	r1, fp
 80028be:	018b      	lsls	r3, r1, #6
 80028c0:	4651      	mov	r1, sl
 80028c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028c6:	4651      	mov	r1, sl
 80028c8:	018a      	lsls	r2, r1, #6
 80028ca:	4651      	mov	r1, sl
 80028cc:	1a54      	subs	r4, r2, r1
 80028ce:	4659      	mov	r1, fp
 80028d0:	eb63 0501 	sbc.w	r5, r3, r1
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	00eb      	lsls	r3, r5, #3
 80028de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028e2:	00e2      	lsls	r2, r4, #3
 80028e4:	4614      	mov	r4, r2
 80028e6:	461d      	mov	r5, r3
 80028e8:	4643      	mov	r3, r8
 80028ea:	18e3      	adds	r3, r4, r3
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	464b      	mov	r3, r9
 80028f0:	eb45 0303 	adc.w	r3, r5, r3
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002902:	4629      	mov	r1, r5
 8002904:	028b      	lsls	r3, r1, #10
 8002906:	4621      	mov	r1, r4
 8002908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800290c:	4621      	mov	r1, r4
 800290e:	028a      	lsls	r2, r1, #10
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002918:	2200      	movs	r2, #0
 800291a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800291c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800291e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002922:	f7fe f9b1 	bl	8000c88 <__aeabi_uldivmod>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4613      	mov	r3, r2
 800292c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002930:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x458>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	0f1b      	lsrs	r3, r3, #28
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800293e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002942:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800294e:	e003      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002952:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002956:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002958:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800295c:	4618      	mov	r0, r3
 800295e:	37b8      	adds	r7, #184	@ 0xb8
 8002960:	46bd      	mov	sp, r7
 8002962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	00f42400 	.word	0x00f42400

08002970 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e28d      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8083 	beq.w	8002a96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002990:	4b94      	ldr	r3, [pc, #592]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b04      	cmp	r3, #4
 800299a:	d019      	beq.n	80029d0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800299c:	4b91      	ldr	r3, [pc, #580]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
        || \
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029a8:	4b8e      	ldr	r3, [pc, #568]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029b4:	d00c      	beq.n	80029d0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b6:	4b8b      	ldr	r3, [pc, #556]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d112      	bne.n	80029e8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c2:	4b88      	ldr	r3, [pc, #544]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	4b84      	ldr	r3, [pc, #528]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d05b      	beq.n	8002a94 <HAL_RCC_OscConfig+0x124>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d157      	bne.n	8002a94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e25a      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f0:	d106      	bne.n	8002a00 <HAL_RCC_OscConfig+0x90>
 80029f2:	4b7c      	ldr	r3, [pc, #496]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a7b      	ldr	r2, [pc, #492]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e01d      	b.n	8002a3c <HAL_RCC_OscConfig+0xcc>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0xb4>
 8002a0a:	4b76      	ldr	r3, [pc, #472]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a75      	ldr	r2, [pc, #468]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b73      	ldr	r3, [pc, #460]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a72      	ldr	r2, [pc, #456]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xcc>
 8002a24:	4b6f      	ldr	r3, [pc, #444]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6e      	ldr	r2, [pc, #440]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b6c      	ldr	r3, [pc, #432]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6b      	ldr	r2, [pc, #428]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7ff f8d4 	bl	8001bf0 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7ff f8d0 	bl	8001bf0 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	@ 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e21f      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b61      	ldr	r3, [pc, #388]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0xdc>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f8c0 	bl	8001bf0 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff f8bc 	bl	8001bf0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	@ 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e20b      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	4b57      	ldr	r3, [pc, #348]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x104>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d06f      	beq.n	8002b82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002aa2:	4b50      	ldr	r3, [pc, #320]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d017      	beq.n	8002ade <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002aae:	4b4d      	ldr	r3, [pc, #308]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d105      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002aba:	4b4a      	ldr	r3, [pc, #296]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac6:	4b47      	ldr	r3, [pc, #284]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad2:	4b44      	ldr	r3, [pc, #272]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	4b41      	ldr	r3, [pc, #260]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x186>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1d3      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b3b      	ldr	r3, [pc, #236]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4937      	ldr	r1, [pc, #220]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	e03a      	b.n	8002b82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b14:	4b34      	ldr	r3, [pc, #208]	@ (8002be8 <HAL_RCC_OscConfig+0x278>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7ff f869 	bl	8001bf0 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7ff f865 	bl	8001bf0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1b4      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	4b2b      	ldr	r3, [pc, #172]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4925      	ldr	r1, [pc, #148]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <HAL_RCC_OscConfig+0x278>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7ff f848 	bl	8001bf0 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b64:	f7ff f844 	bl	8001bf0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e193      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d036      	beq.n	8002bfc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7ff f828 	bl	8001bf0 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7ff f824 	bl	8001bf0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e173      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x234>
 8002bc2:	e01b      	b.n	8002bfc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc4:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7ff f811 	bl	8001bf0 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	e00e      	b.n	8002bf0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7ff f80d 	bl	8001bf0 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d907      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e15c      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	42470000 	.word	0x42470000
 8002bec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	4b8a      	ldr	r3, [pc, #552]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ea      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8097 	beq.w	8002d38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0e:	4b83      	ldr	r3, [pc, #524]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	4a7e      	ldr	r2, [pc, #504]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b79      	ldr	r3, [pc, #484]	@ (8002e20 <HAL_RCC_OscConfig+0x4b0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d118      	bne.n	8002c78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c46:	4b76      	ldr	r3, [pc, #472]	@ (8002e20 <HAL_RCC_OscConfig+0x4b0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a75      	ldr	r2, [pc, #468]	@ (8002e20 <HAL_RCC_OscConfig+0x4b0>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c52:	f7fe ffcd 	bl	8001bf0 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5a:	f7fe ffc9 	bl	8001bf0 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e118      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e20 <HAL_RCC_OscConfig+0x4b0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x31e>
 8002c80:	4b66      	ldr	r3, [pc, #408]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c84:	4a65      	ldr	r2, [pc, #404]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8c:	e01c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x358>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x340>
 8002c96:	4b61      	ldr	r3, [pc, #388]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	4a60      	ldr	r2, [pc, #384]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca2:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca6:	4a5d      	ldr	r2, [pc, #372]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x358>
 8002cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a59      	ldr	r2, [pc, #356]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbc:	4b57      	ldr	r3, [pc, #348]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	4a56      	ldr	r2, [pc, #344]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe ff8e 	bl	8001bf0 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe ff8a 	bl	8001bf0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0d7      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	4b4b      	ldr	r3, [pc, #300]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0ee      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x368>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe ff78 	bl	8001bf0 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe ff74 	bl	8001bf0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0c1      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1a:	4b40      	ldr	r3, [pc, #256]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1ee      	bne.n	8002d04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	4a3a      	ldr	r2, [pc, #232]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80ad 	beq.w	8002e9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d42:	4b36      	ldr	r3, [pc, #216]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d060      	beq.n	8002e10 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d145      	bne.n	8002de2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b33      	ldr	r3, [pc, #204]	@ (8002e24 <HAL_RCC_OscConfig+0x4b4>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe ff48 	bl	8001bf0 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe ff44 	bl	8001bf0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e093      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	4b29      	ldr	r3, [pc, #164]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	019b      	lsls	r3, r3, #6
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	071b      	lsls	r3, r3, #28
 8002dae:	491b      	ldr	r1, [pc, #108]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <HAL_RCC_OscConfig+0x4b4>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fe ff19 	bl	8001bf0 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc2:	f7fe ff15 	bl	8001bf0 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e064      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x452>
 8002de0:	e05c      	b.n	8002e9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de2:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <HAL_RCC_OscConfig+0x4b4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe ff02 	bl	8001bf0 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe fefe 	bl	8001bf0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e04d      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_RCC_OscConfig+0x4ac>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x480>
 8002e0e:	e045      	b.n	8002e9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e040      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40007000 	.word	0x40007000
 8002e24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea8 <HAL_RCC_OscConfig+0x538>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d030      	beq.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d129      	bne.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d122      	bne.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e58:	4013      	ands	r3, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d119      	bne.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	3b01      	subs	r3, #1
 8002e72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d10f      	bne.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800

08002eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e041      	b.n	8002f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe fcfa 	bl	80018cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f000 ff12 	bl	8003d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e041      	b.n	8002fe0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7fe fc89 	bl	8001888 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	4619      	mov	r1, r3
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f000 fec3 	bl	8003d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <HAL_TIM_PWM_Start+0x24>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e022      	b.n	8003052 <HAL_TIM_PWM_Start+0x6a>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b04      	cmp	r3, #4
 8003010:	d109      	bne.n	8003026 <HAL_TIM_PWM_Start+0x3e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	bf14      	ite	ne
 800301e:	2301      	movne	r3, #1
 8003020:	2300      	moveq	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	e015      	b.n	8003052 <HAL_TIM_PWM_Start+0x6a>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d109      	bne.n	8003040 <HAL_TIM_PWM_Start+0x58>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	bf14      	ite	ne
 8003038:	2301      	movne	r3, #1
 800303a:	2300      	moveq	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e008      	b.n	8003052 <HAL_TIM_PWM_Start+0x6a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	bf14      	ite	ne
 800304c:	2301      	movne	r3, #1
 800304e:	2300      	moveq	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07c      	b.n	8003154 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d104      	bne.n	800306a <HAL_TIM_PWM_Start+0x82>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003068:	e013      	b.n	8003092 <HAL_TIM_PWM_Start+0xaa>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d104      	bne.n	800307a <HAL_TIM_PWM_Start+0x92>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003078:	e00b      	b.n	8003092 <HAL_TIM_PWM_Start+0xaa>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d104      	bne.n	800308a <HAL_TIM_PWM_Start+0xa2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003088:	e003      	b.n	8003092 <HAL_TIM_PWM_Start+0xaa>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2201      	movs	r2, #1
 8003098:	6839      	ldr	r1, [r7, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f001 fa54 	bl	8004548 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2d      	ldr	r2, [pc, #180]	@ (800315c <HAL_TIM_PWM_Start+0x174>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d004      	beq.n	80030b4 <HAL_TIM_PWM_Start+0xcc>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003160 <HAL_TIM_PWM_Start+0x178>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_TIM_PWM_Start+0xd0>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_TIM_PWM_Start+0xd2>
 80030b8:	2300      	movs	r3, #0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a22      	ldr	r2, [pc, #136]	@ (800315c <HAL_TIM_PWM_Start+0x174>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d022      	beq.n	800311e <HAL_TIM_PWM_Start+0x136>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e0:	d01d      	beq.n	800311e <HAL_TIM_PWM_Start+0x136>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003164 <HAL_TIM_PWM_Start+0x17c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d018      	beq.n	800311e <HAL_TIM_PWM_Start+0x136>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <HAL_TIM_PWM_Start+0x180>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_TIM_PWM_Start+0x136>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1c      	ldr	r2, [pc, #112]	@ (800316c <HAL_TIM_PWM_Start+0x184>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_TIM_PWM_Start+0x136>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <HAL_TIM_PWM_Start+0x178>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_TIM_PWM_Start+0x136>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <HAL_TIM_PWM_Start+0x188>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_TIM_PWM_Start+0x136>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a16      	ldr	r2, [pc, #88]	@ (8003174 <HAL_TIM_PWM_Start+0x18c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d111      	bne.n	8003142 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b06      	cmp	r3, #6
 800312e:	d010      	beq.n	8003152 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003140:	e007      	b.n	8003152 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0201 	orr.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40010000 	.word	0x40010000
 8003160:	40010400 	.word	0x40010400
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40014000 	.word	0x40014000
 8003174:	40001800 	.word	0x40001800

08003178 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	6839      	ldr	r1, [r7, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f001 f9dc 	bl	8004548 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2e      	ldr	r2, [pc, #184]	@ (8003250 <HAL_TIM_PWM_Stop+0xd8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <HAL_TIM_PWM_Stop+0x2c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2d      	ldr	r2, [pc, #180]	@ (8003254 <HAL_TIM_PWM_Stop+0xdc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_TIM_PWM_Stop+0x30>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_TIM_PWM_Stop+0x32>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d017      	beq.n	80031de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6a1a      	ldr	r2, [r3, #32]
 80031b4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10f      	bne.n	80031de <HAL_TIM_PWM_Stop+0x66>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	f240 4344 	movw	r3, #1092	@ 0x444
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_TIM_PWM_Stop+0x66>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a1a      	ldr	r2, [r3, #32]
 80031e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <HAL_TIM_PWM_Stop+0x96>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a1a      	ldr	r2, [r3, #32]
 80031f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d107      	bne.n	800320e <HAL_TIM_PWM_Stop+0x96>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <HAL_TIM_PWM_Stop+0xa6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800321c:	e013      	b.n	8003246 <HAL_TIM_PWM_Stop+0xce>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d104      	bne.n	800322e <HAL_TIM_PWM_Stop+0xb6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800322c:	e00b      	b.n	8003246 <HAL_TIM_PWM_Stop+0xce>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d104      	bne.n	800323e <HAL_TIM_PWM_Stop+0xc6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800323c:	e003      	b.n	8003246 <HAL_TIM_PWM_Stop+0xce>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40010000 	.word	0x40010000
 8003254:	40010400 	.word	0x40010400

08003258 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e041      	b.n	80032ee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f839 	bl	80032f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f000 fd3c 	bl	8003d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d104      	bne.n	800332a <HAL_TIM_IC_Start_IT+0x1e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e013      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x46>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d104      	bne.n	800333a <HAL_TIM_IC_Start_IT+0x2e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003336:	b2db      	uxtb	r3, r3
 8003338:	e00b      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x46>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d104      	bne.n	800334a <HAL_TIM_IC_Start_IT+0x3e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003346:	b2db      	uxtb	r3, r3
 8003348:	e003      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x46>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003350:	b2db      	uxtb	r3, r3
 8003352:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <HAL_TIM_IC_Start_IT+0x58>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e013      	b.n	800338c <HAL_TIM_IC_Start_IT+0x80>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b04      	cmp	r3, #4
 8003368:	d104      	bne.n	8003374 <HAL_TIM_IC_Start_IT+0x68>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e00b      	b.n	800338c <HAL_TIM_IC_Start_IT+0x80>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b08      	cmp	r3, #8
 8003378:	d104      	bne.n	8003384 <HAL_TIM_IC_Start_IT+0x78>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e003      	b.n	800338c <HAL_TIM_IC_Start_IT+0x80>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800338a:	b2db      	uxtb	r3, r3
 800338c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800338e:	7bbb      	ldrb	r3, [r7, #14]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d102      	bne.n	800339a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003394:	7b7b      	ldrb	r3, [r7, #13]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d001      	beq.n	800339e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0cc      	b.n	8003538 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_IC_Start_IT+0xa2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033ac:	e013      	b.n	80033d6 <HAL_TIM_IC_Start_IT+0xca>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d104      	bne.n	80033be <HAL_TIM_IC_Start_IT+0xb2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033bc:	e00b      	b.n	80033d6 <HAL_TIM_IC_Start_IT+0xca>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d104      	bne.n	80033ce <HAL_TIM_IC_Start_IT+0xc2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033cc:	e003      	b.n	80033d6 <HAL_TIM_IC_Start_IT+0xca>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_IC_Start_IT+0xda>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033e4:	e013      	b.n	800340e <HAL_TIM_IC_Start_IT+0x102>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d104      	bne.n	80033f6 <HAL_TIM_IC_Start_IT+0xea>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033f4:	e00b      	b.n	800340e <HAL_TIM_IC_Start_IT+0x102>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d104      	bne.n	8003406 <HAL_TIM_IC_Start_IT+0xfa>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003404:	e003      	b.n	800340e <HAL_TIM_IC_Start_IT+0x102>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	d841      	bhi.n	8003498 <HAL_TIM_IC_Start_IT+0x18c>
 8003414:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <HAL_TIM_IC_Start_IT+0x110>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003451 	.word	0x08003451
 8003420:	08003499 	.word	0x08003499
 8003424:	08003499 	.word	0x08003499
 8003428:	08003499 	.word	0x08003499
 800342c:	08003463 	.word	0x08003463
 8003430:	08003499 	.word	0x08003499
 8003434:	08003499 	.word	0x08003499
 8003438:	08003499 	.word	0x08003499
 800343c:	08003475 	.word	0x08003475
 8003440:	08003499 	.word	0x08003499
 8003444:	08003499 	.word	0x08003499
 8003448:	08003499 	.word	0x08003499
 800344c:	08003487 	.word	0x08003487
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0202 	orr.w	r2, r2, #2
 800345e:	60da      	str	r2, [r3, #12]
      break;
 8003460:	e01d      	b.n	800349e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0204 	orr.w	r2, r2, #4
 8003470:	60da      	str	r2, [r3, #12]
      break;
 8003472:	e014      	b.n	800349e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0208 	orr.w	r2, r2, #8
 8003482:	60da      	str	r2, [r3, #12]
      break;
 8003484:	e00b      	b.n	800349e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0210 	orr.w	r2, r2, #16
 8003494:	60da      	str	r2, [r3, #12]
      break;
 8003496:	e002      	b.n	800349e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	bf00      	nop
  }

  if (status == HAL_OK)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d148      	bne.n	8003536 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 f84b 	bl	8004548 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a22      	ldr	r2, [pc, #136]	@ (8003540 <HAL_TIM_IC_Start_IT+0x234>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c4:	d01d      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003544 <HAL_TIM_IC_Start_IT+0x238>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003548 <HAL_TIM_IC_Start_IT+0x23c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1b      	ldr	r2, [pc, #108]	@ (800354c <HAL_TIM_IC_Start_IT+0x240>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a19      	ldr	r2, [pc, #100]	@ (8003550 <HAL_TIM_IC_Start_IT+0x244>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a18      	ldr	r2, [pc, #96]	@ (8003554 <HAL_TIM_IC_Start_IT+0x248>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a16      	ldr	r2, [pc, #88]	@ (8003558 <HAL_TIM_IC_Start_IT+0x24c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d111      	bne.n	8003526 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b06      	cmp	r3, #6
 8003512:	d010      	beq.n	8003536 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003524:	e007      	b.n	8003536 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40010000 	.word	0x40010000
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40010400 	.word	0x40010400
 8003554:	40014000 	.word	0x40014000
 8003558:	40001800 	.word	0x40001800

0800355c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e041      	b.n	80035f4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f839 	bl	80035fc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f000 fbb9 	bl	8003d14 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0208 	bic.w	r2, r2, #8
 80035b0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d020      	beq.n	8003674 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0202 	mvn.w	r2, #2
 8003644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd fe1c 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fb38 	bl	8003cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fb3f 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d020      	beq.n	80036c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0204 	mvn.w	r2, #4
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd fdf6 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fb12 	bl	8003cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fb19 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d020      	beq.n	800370c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0208 	mvn.w	r2, #8
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2204      	movs	r2, #4
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd fdd0 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 faec 	bl	8003cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 faf3 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b00      	cmp	r3, #0
 8003714:	d020      	beq.n	8003758 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0210 	mvn.w	r2, #16
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2208      	movs	r2, #8
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd fdaa 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fac6 	bl	8003cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 facd 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00c      	beq.n	800377c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0201 	mvn.w	r2, #1
 8003774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 faa4 	bl	8003cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00c      	beq.n	80037a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 ffd2 	bl	8004744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00c      	beq.n	80037c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa9e 	bl	8003d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00c      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0220 	mvn.w	r2, #32
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 ffa4 	bl	8004730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_TIM_IC_ConfigChannel+0x1e>
 800380a:	2302      	movs	r3, #2
 800380c:	e088      	b.n	8003920 <HAL_TIM_IC_ConfigChannel+0x130>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d11b      	bne.n	8003854 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800382c:	f000 fcc8 	bl	80041c0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 020c 	bic.w	r2, r2, #12
 800383e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6999      	ldr	r1, [r3, #24]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	619a      	str	r2, [r3, #24]
 8003852:	e060      	b.n	8003916 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b04      	cmp	r3, #4
 8003858:	d11c      	bne.n	8003894 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800386a:	f000 fd4c 	bl	8004306 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699a      	ldr	r2, [r3, #24]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800387c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6999      	ldr	r1, [r3, #24]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	021a      	lsls	r2, r3, #8
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	619a      	str	r2, [r3, #24]
 8003892:	e040      	b.n	8003916 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b08      	cmp	r3, #8
 8003898:	d11b      	bne.n	80038d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80038aa:	f000 fd99 	bl	80043e0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 020c 	bic.w	r2, r2, #12
 80038bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69d9      	ldr	r1, [r3, #28]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	61da      	str	r2, [r3, #28]
 80038d0:	e021      	b.n	8003916 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	d11c      	bne.n	8003912 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80038e8:	f000 fdb6 	bl	8004458 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80038fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69d9      	ldr	r1, [r3, #28]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	021a      	lsls	r2, r3, #8
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	61da      	str	r2, [r3, #28]
 8003910:	e001      	b.n	8003916 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800391e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003942:	2302      	movs	r3, #2
 8003944:	e0ae      	b.n	8003aa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b0c      	cmp	r3, #12
 8003952:	f200 809f 	bhi.w	8003a94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003956:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	08003991 	.word	0x08003991
 8003960:	08003a95 	.word	0x08003a95
 8003964:	08003a95 	.word	0x08003a95
 8003968:	08003a95 	.word	0x08003a95
 800396c:	080039d1 	.word	0x080039d1
 8003970:	08003a95 	.word	0x08003a95
 8003974:	08003a95 	.word	0x08003a95
 8003978:	08003a95 	.word	0x08003a95
 800397c:	08003a13 	.word	0x08003a13
 8003980:	08003a95 	.word	0x08003a95
 8003984:	08003a95 	.word	0x08003a95
 8003988:	08003a95 	.word	0x08003a95
 800398c:	08003a53 	.word	0x08003a53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fa62 	bl	8003e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0208 	orr.w	r2, r2, #8
 80039aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0204 	bic.w	r2, r2, #4
 80039ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6999      	ldr	r1, [r3, #24]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	619a      	str	r2, [r3, #24]
      break;
 80039ce:	e064      	b.n	8003a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fab2 	bl	8003f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6999      	ldr	r1, [r3, #24]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	021a      	lsls	r2, r3, #8
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	619a      	str	r2, [r3, #24]
      break;
 8003a10:	e043      	b.n	8003a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fb07 	bl	800402c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0208 	orr.w	r2, r2, #8
 8003a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0204 	bic.w	r2, r2, #4
 8003a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69d9      	ldr	r1, [r3, #28]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	61da      	str	r2, [r3, #28]
      break;
 8003a50:	e023      	b.n	8003a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fb5b 	bl	8004114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69d9      	ldr	r1, [r3, #28]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	021a      	lsls	r2, r3, #8
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	61da      	str	r2, [r3, #28]
      break;
 8003a92:	e002      	b.n	8003a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	75fb      	strb	r3, [r7, #23]
      break;
 8003a98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e0b4      	b.n	8003c32 <HAL_TIM_ConfigClockSource+0x186>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ae6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b00:	d03e      	beq.n	8003b80 <HAL_TIM_ConfigClockSource+0xd4>
 8003b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b06:	f200 8087 	bhi.w	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b0e:	f000 8086 	beq.w	8003c1e <HAL_TIM_ConfigClockSource+0x172>
 8003b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b16:	d87f      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b70      	cmp	r3, #112	@ 0x70
 8003b1a:	d01a      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0xa6>
 8003b1c:	2b70      	cmp	r3, #112	@ 0x70
 8003b1e:	d87b      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b20:	2b60      	cmp	r3, #96	@ 0x60
 8003b22:	d050      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x11a>
 8003b24:	2b60      	cmp	r3, #96	@ 0x60
 8003b26:	d877      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	2b50      	cmp	r3, #80	@ 0x50
 8003b2a:	d03c      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b2c:	2b50      	cmp	r3, #80	@ 0x50
 8003b2e:	d873      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b30:	2b40      	cmp	r3, #64	@ 0x40
 8003b32:	d058      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x13a>
 8003b34:	2b40      	cmp	r3, #64	@ 0x40
 8003b36:	d86f      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b38:	2b30      	cmp	r3, #48	@ 0x30
 8003b3a:	d064      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	2b30      	cmp	r3, #48	@ 0x30
 8003b3e:	d86b      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d060      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x15a>
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d867      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d05c      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x15a>
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d05a      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x15a>
 8003b50:	e062      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b62:	f000 fcd1 	bl	8004508 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	609a      	str	r2, [r3, #8]
      break;
 8003b7e:	e04f      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b90:	f000 fcba 	bl	8004508 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ba2:	609a      	str	r2, [r3, #8]
      break;
 8003ba4:	e03c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f000 fb78 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2150      	movs	r1, #80	@ 0x50
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fc87 	bl	80044d2 <TIM_ITRx_SetConfig>
      break;
 8003bc4:	e02c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f000 fbd4 	bl	8004380 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2160      	movs	r1, #96	@ 0x60
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fc77 	bl	80044d2 <TIM_ITRx_SetConfig>
      break;
 8003be4:	e01c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f000 fb58 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2140      	movs	r1, #64	@ 0x40
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fc67 	bl	80044d2 <TIM_ITRx_SetConfig>
      break;
 8003c04:	e00c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4610      	mov	r0, r2
 8003c12:	f000 fc5e 	bl	80044d2 <TIM_ITRx_SetConfig>
      break;
 8003c16:	e003      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1c:	e000      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d831      	bhi.n	8003cb4 <HAL_TIM_ReadCapturedValue+0x78>
 8003c50:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003cb5 	.word	0x08003cb5
 8003c60:	08003cb5 	.word	0x08003cb5
 8003c64:	08003cb5 	.word	0x08003cb5
 8003c68:	08003c97 	.word	0x08003c97
 8003c6c:	08003cb5 	.word	0x08003cb5
 8003c70:	08003cb5 	.word	0x08003cb5
 8003c74:	08003cb5 	.word	0x08003cb5
 8003c78:	08003ca1 	.word	0x08003ca1
 8003c7c:	08003cb5 	.word	0x08003cb5
 8003c80:	08003cb5 	.word	0x08003cb5
 8003c84:	08003cb5 	.word	0x08003cb5
 8003c88:	08003cab 	.word	0x08003cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c92:	60fb      	str	r3, [r7, #12]

      break;
 8003c94:	e00f      	b.n	8003cb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9c:	60fb      	str	r3, [r7, #12]

      break;
 8003c9e:	e00a      	b.n	8003cb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca6:	60fb      	str	r3, [r7, #12]

      break;
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	60fb      	str	r3, [r7, #12]

      break;
 8003cb2:	e000      	b.n	8003cb6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003cb4:	bf00      	nop
  }

  return tmpreg;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a43      	ldr	r2, [pc, #268]	@ (8003e34 <TIM_Base_SetConfig+0x120>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d32:	d00f      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a40      	ldr	r2, [pc, #256]	@ (8003e38 <TIM_Base_SetConfig+0x124>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00b      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e3c <TIM_Base_SetConfig+0x128>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d007      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a3e      	ldr	r2, [pc, #248]	@ (8003e40 <TIM_Base_SetConfig+0x12c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3d      	ldr	r2, [pc, #244]	@ (8003e44 <TIM_Base_SetConfig+0x130>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d108      	bne.n	8003d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a32      	ldr	r2, [pc, #200]	@ (8003e34 <TIM_Base_SetConfig+0x120>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02b      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d74:	d027      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2f      	ldr	r2, [pc, #188]	@ (8003e38 <TIM_Base_SetConfig+0x124>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d023      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2e      	ldr	r2, [pc, #184]	@ (8003e3c <TIM_Base_SetConfig+0x128>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01f      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2d      	ldr	r2, [pc, #180]	@ (8003e40 <TIM_Base_SetConfig+0x12c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01b      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2c      	ldr	r2, [pc, #176]	@ (8003e44 <TIM_Base_SetConfig+0x130>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d017      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2b      	ldr	r2, [pc, #172]	@ (8003e48 <TIM_Base_SetConfig+0x134>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e4c <TIM_Base_SetConfig+0x138>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00f      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a29      	ldr	r2, [pc, #164]	@ (8003e50 <TIM_Base_SetConfig+0x13c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00b      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a28      	ldr	r2, [pc, #160]	@ (8003e54 <TIM_Base_SetConfig+0x140>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d007      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a27      	ldr	r2, [pc, #156]	@ (8003e58 <TIM_Base_SetConfig+0x144>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a26      	ldr	r2, [pc, #152]	@ (8003e5c <TIM_Base_SetConfig+0x148>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a0e      	ldr	r2, [pc, #56]	@ (8003e34 <TIM_Base_SetConfig+0x120>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <TIM_Base_SetConfig+0xf2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a10      	ldr	r2, [pc, #64]	@ (8003e44 <TIM_Base_SetConfig+0x130>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d103      	bne.n	8003e0e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f043 0204 	orr.w	r2, r3, #4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	601a      	str	r2, [r3, #0]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40014400 	.word	0x40014400
 8003e50:	40014800 	.word	0x40014800
 8003e54:	40001800 	.word	0x40001800
 8003e58:	40001c00 	.word	0x40001c00
 8003e5c:	40002000 	.word	0x40002000

08003e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f023 0201 	bic.w	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0302 	bic.w	r3, r3, #2
 8003ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a20      	ldr	r2, [pc, #128]	@ (8003f38 <TIM_OC1_SetConfig+0xd8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_OC1_SetConfig+0x64>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8003f3c <TIM_OC1_SetConfig+0xdc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10c      	bne.n	8003ede <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0308 	bic.w	r3, r3, #8
 8003eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	@ (8003f38 <TIM_OC1_SetConfig+0xd8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_OC1_SetConfig+0x8e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a14      	ldr	r2, [pc, #80]	@ (8003f3c <TIM_OC1_SetConfig+0xdc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d111      	bne.n	8003f12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40010400 	.word	0x40010400

08003f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f023 0210 	bic.w	r2, r3, #16
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f023 0320 	bic.w	r3, r3, #32
 8003f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a22      	ldr	r2, [pc, #136]	@ (8004024 <TIM_OC2_SetConfig+0xe4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_OC2_SetConfig+0x68>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a21      	ldr	r2, [pc, #132]	@ (8004028 <TIM_OC2_SetConfig+0xe8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d10d      	bne.n	8003fc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a17      	ldr	r2, [pc, #92]	@ (8004024 <TIM_OC2_SetConfig+0xe4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_OC2_SetConfig+0x94>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a16      	ldr	r2, [pc, #88]	@ (8004028 <TIM_OC2_SetConfig+0xe8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d113      	bne.n	8003ffc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	621a      	str	r2, [r3, #32]
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000
 8004028:	40010400 	.word	0x40010400

0800402c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a21      	ldr	r2, [pc, #132]	@ (800410c <TIM_OC3_SetConfig+0xe0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d003      	beq.n	8004092 <TIM_OC3_SetConfig+0x66>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a20      	ldr	r2, [pc, #128]	@ (8004110 <TIM_OC3_SetConfig+0xe4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10d      	bne.n	80040ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a16      	ldr	r2, [pc, #88]	@ (800410c <TIM_OC3_SetConfig+0xe0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC3_SetConfig+0x92>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a15      	ldr	r2, [pc, #84]	@ (8004110 <TIM_OC3_SetConfig+0xe4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d113      	bne.n	80040e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	621a      	str	r2, [r3, #32]
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40010000 	.word	0x40010000
 8004110:	40010400 	.word	0x40010400

08004114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800414a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800415e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	031b      	lsls	r3, r3, #12
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a12      	ldr	r2, [pc, #72]	@ (80041b8 <TIM_OC4_SetConfig+0xa4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC4_SetConfig+0x68>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a11      	ldr	r2, [pc, #68]	@ (80041bc <TIM_OC4_SetConfig+0xa8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d109      	bne.n	8004190 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	019b      	lsls	r3, r3, #6
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40010400 	.word	0x40010400

080041c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f023 0201 	bic.w	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4a28      	ldr	r2, [pc, #160]	@ (800428c <TIM_TI1_SetConfig+0xcc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01b      	beq.n	8004226 <TIM_TI1_SetConfig+0x66>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f4:	d017      	beq.n	8004226 <TIM_TI1_SetConfig+0x66>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a25      	ldr	r2, [pc, #148]	@ (8004290 <TIM_TI1_SetConfig+0xd0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <TIM_TI1_SetConfig+0x66>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4a24      	ldr	r2, [pc, #144]	@ (8004294 <TIM_TI1_SetConfig+0xd4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00f      	beq.n	8004226 <TIM_TI1_SetConfig+0x66>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a23      	ldr	r2, [pc, #140]	@ (8004298 <TIM_TI1_SetConfig+0xd8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00b      	beq.n	8004226 <TIM_TI1_SetConfig+0x66>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a22      	ldr	r2, [pc, #136]	@ (800429c <TIM_TI1_SetConfig+0xdc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d007      	beq.n	8004226 <TIM_TI1_SetConfig+0x66>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a21      	ldr	r2, [pc, #132]	@ (80042a0 <TIM_TI1_SetConfig+0xe0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d003      	beq.n	8004226 <TIM_TI1_SetConfig+0x66>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a20      	ldr	r2, [pc, #128]	@ (80042a4 <TIM_TI1_SetConfig+0xe4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d101      	bne.n	800422a <TIM_TI1_SetConfig+0x6a>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <TIM_TI1_SetConfig+0x6c>
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 0303 	bic.w	r3, r3, #3
 8004236:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e003      	b.n	800424a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	b2db      	uxtb	r3, r3
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f023 030a 	bic.w	r3, r3, #10
 8004264:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f003 030a 	and.w	r3, r3, #10
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40010000 	.word	0x40010000
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800
 8004298:	40000c00 	.word	0x40000c00
 800429c:	40010400 	.word	0x40010400
 80042a0:	40014000 	.word	0x40014000
 80042a4:	40001800 	.word	0x40001800

080042a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 030a 	bic.w	r3, r3, #10
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004306:	b480      	push	{r7}
 8004308:	b087      	sub	sp, #28
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f023 0210 	bic.w	r2, r3, #16
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	031b      	lsls	r3, r3, #12
 800434a:	b29b      	uxth	r3, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004358:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	621a      	str	r2, [r3, #32]
}
 8004374:	bf00      	nop
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0210 	bic.w	r2, r3, #16
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	031b      	lsls	r3, r3, #12
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	621a      	str	r2, [r3, #32]
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f023 0303 	bic.w	r3, r3, #3
 800440c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800441c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	b2db      	uxtb	r3, r3
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004430:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	621a      	str	r2, [r3, #32]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004484:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004496:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	031b      	lsls	r3, r3, #12
 800449c:	b29b      	uxth	r3, r3
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80044aa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	031b      	lsls	r3, r3, #12
 80044b0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	621a      	str	r2, [r3, #32]
}
 80044c6:	bf00      	nop
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b085      	sub	sp, #20
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f043 0307 	orr.w	r3, r3, #7
 80044f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	609a      	str	r2, [r3, #8]
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	021a      	lsls	r2, r3, #8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	431a      	orrs	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4313      	orrs	r3, r2
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	609a      	str	r2, [r3, #8]
}
 800453c:	bf00      	nop
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	2201      	movs	r2, #1
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a1a      	ldr	r2, [r3, #32]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	43db      	mvns	r3, r3
 800456a:	401a      	ands	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1a      	ldr	r2, [r3, #32]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	fa01 f303 	lsl.w	r3, r1, r3
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e05a      	b.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a21      	ldr	r2, [pc, #132]	@ (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f8:	d01d      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004674 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1b      	ldr	r2, [pc, #108]	@ (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a18      	ldr	r2, [pc, #96]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a17      	ldr	r2, [pc, #92]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a15      	ldr	r2, [pc, #84]	@ (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10c      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	4313      	orrs	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00
 8004680:	40010400 	.word	0x40010400
 8004684:	40014000 	.word	0x40014000
 8004688:	40001800 	.word	0x40001800

0800468c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e03d      	b.n	8004724 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e042      	b.n	80047f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fd f956 	bl	8001a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2224      	movs	r2, #36	@ 0x24
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800479a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fccf 	bl	8005140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	4613      	mov	r3, r2
 8004804:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b20      	cmp	r3, #32
 8004810:	d121      	bne.n	8004856 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <HAL_UART_Transmit_IT+0x26>
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e01a      	b.n	8004858 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2221      	movs	r2, #33	@ 0x21
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004850:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b0ba      	sub	sp, #232	@ 0xe8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800488a:	2300      	movs	r3, #0
 800488c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004890:	2300      	movs	r3, #0
 8004892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80048a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10f      	bne.n	80048ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <HAL_UART_IRQHandler+0x66>
 80048b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fb7e 	bl	8004fc4 <UART_Receive_IT>
      return;
 80048c8:	e273      	b.n	8004db2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80de 	beq.w	8004a90 <HAL_UART_IRQHandler+0x22c>
 80048d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80d1 	beq.w	8004a90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <HAL_UART_IRQHandler+0xae>
 80048fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490a:	f043 0201 	orr.w	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <HAL_UART_IRQHandler+0xd2>
 800491e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	f043 0202 	orr.w	r2, r3, #2
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <HAL_UART_IRQHandler+0xf6>
 8004942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004952:	f043 0204 	orr.w	r2, r3, #4
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800495a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d011      	beq.n	800498a <HAL_UART_IRQHandler+0x126>
 8004966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d105      	bne.n	800497e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004982:	f043 0208 	orr.w	r2, r3, #8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 820a 	beq.w	8004da8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_UART_IRQHandler+0x14e>
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fb09 	bl	8004fc4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049bc:	2b40      	cmp	r3, #64	@ 0x40
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <HAL_UART_IRQHandler+0x17a>
 80049d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d04f      	beq.n	8004a7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fa14 	bl	8004e0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ee:	2b40      	cmp	r3, #64	@ 0x40
 80049f0:	d141      	bne.n	8004a76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3314      	adds	r3, #20
 80049f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3314      	adds	r3, #20
 8004a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1d9      	bne.n	80049f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d013      	beq.n	8004a6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4a:	4a8a      	ldr	r2, [pc, #552]	@ (8004c74 <HAL_UART_IRQHandler+0x410>)
 8004a4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fd fa59 	bl	8001f0a <HAL_DMA_Abort_IT>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d016      	beq.n	8004a8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	e00e      	b.n	8004a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9b6 	bl	8004de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a74:	e00a      	b.n	8004a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f9b2 	bl	8004de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7c:	e006      	b.n	8004a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f9ae 	bl	8004de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a8a:	e18d      	b.n	8004da8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8c:	bf00      	nop
    return;
 8004a8e:	e18b      	b.n	8004da8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	f040 8167 	bne.w	8004d68 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8160 	beq.w	8004d68 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 8159 	beq.w	8004d68 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad6:	2b40      	cmp	r3, #64	@ 0x40
 8004ad8:	f040 80ce 	bne.w	8004c78 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ae8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80a9 	beq.w	8004c44 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004afa:	429a      	cmp	r2, r3
 8004afc:	f080 80a2 	bcs.w	8004c44 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b12:	f000 8088 	beq.w	8004c26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1d9      	bne.n	8004b16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3314      	adds	r3, #20
 8004b68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3314      	adds	r3, #20
 8004b82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e1      	bne.n	8004b62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3314      	adds	r3, #20
 8004ba4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e3      	bne.n	8004b9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bf6:	f023 0310 	bic.w	r3, r3, #16
 8004bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e3      	bne.n	8004be4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fd f902 	bl	8001e2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f8d9 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004c42:	e0b3      	b.n	8004dac <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	f040 80ad 	bne.w	8004dac <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c5c:	f040 80a6 	bne.w	8004dac <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f8c1 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
      return;
 8004c72:	e09b      	b.n	8004dac <HAL_UART_IRQHandler+0x548>
 8004c74:	08004ed3 	.word	0x08004ed3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 808e 	beq.w	8004db0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8089 	beq.w	8004db0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004cc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004cc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e3      	bne.n	8004c9e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3314      	adds	r3, #20
 8004cf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e3      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0310 	bic.w	r3, r3, #16
 8004d32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d40:	61fa      	str	r2, [r7, #28]
 8004d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	69b9      	ldr	r1, [r7, #24]
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e3      	bne.n	8004d1c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f847 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d66:	e023      	b.n	8004db0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <HAL_UART_IRQHandler+0x524>
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f8b7 	bl	8004ef4 <UART_Transmit_IT>
    return;
 8004d86:	e014      	b.n	8004db2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00e      	beq.n	8004db2 <HAL_UART_IRQHandler+0x54e>
 8004d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f8f7 	bl	8004f94 <UART_EndTransmit_IT>
    return;
 8004da6:	e004      	b.n	8004db2 <HAL_UART_IRQHandler+0x54e>
    return;
 8004da8:	bf00      	nop
 8004daa:	e002      	b.n	8004db2 <HAL_UART_IRQHandler+0x54e>
      return;
 8004dac:	bf00      	nop
 8004dae:	e000      	b.n	8004db2 <HAL_UART_IRQHandler+0x54e>
      return;
 8004db0:	bf00      	nop
  }
}
 8004db2:	37e8      	adds	r7, #232	@ 0xe8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b095      	sub	sp, #84	@ 0x54
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e34:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3314      	adds	r3, #20
 8004e4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3314      	adds	r3, #20
 8004e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e5      	bne.n	8004e48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d119      	bne.n	8004eb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	330c      	adds	r3, #12
 8004e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f023 0310 	bic.w	r3, r3, #16
 8004e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ea4:	61ba      	str	r2, [r7, #24]
 8004ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6979      	ldr	r1, [r7, #20]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e5      	bne.n	8004e84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ec6:	bf00      	nop
 8004ec8:	3754      	adds	r7, #84	@ 0x54
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff ff7a 	bl	8004de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b21      	cmp	r3, #33	@ 0x21
 8004f06:	d13e      	bne.n	8004f86 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f10:	d114      	bne.n	8004f3c <UART_Transmit_IT+0x48>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d110      	bne.n	8004f3c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f2e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	621a      	str	r2, [r3, #32]
 8004f3a:	e008      	b.n	8004f4e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	1c59      	adds	r1, r3, #1
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6211      	str	r1, [r2, #32]
 8004f46:	781a      	ldrb	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10f      	bne.n	8004f82 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e000      	b.n	8004f88 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004faa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff feff 	bl	8004db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	@ 0x30
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b22      	cmp	r3, #34	@ 0x22
 8004fde:	f040 80aa 	bne.w	8005136 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fea:	d115      	bne.n	8005018 <UART_Receive_IT+0x54>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d111      	bne.n	8005018 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005006:	b29a      	uxth	r2, r3
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	1c9a      	adds	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	629a      	str	r2, [r3, #40]	@ 0x28
 8005016:	e024      	b.n	8005062 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005026:	d007      	beq.n	8005038 <UART_Receive_IT+0x74>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <UART_Receive_IT+0x82>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	b2da      	uxtb	r2, r3
 8005040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e008      	b.n	8005058 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005052:	b2da      	uxtb	r2, r3
 8005054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005056:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29b      	uxth	r3, r3
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4619      	mov	r1, r3
 8005070:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005072:	2b00      	cmp	r3, #0
 8005074:	d15d      	bne.n	8005132 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0220 	bic.w	r2, r2, #32
 8005084:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005094:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0201 	bic.w	r2, r2, #1
 80050a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d135      	bne.n	8005128 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	330c      	adds	r3, #12
 80050c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	613b      	str	r3, [r7, #16]
   return(result);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f023 0310 	bic.w	r3, r3, #16
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e2:	623a      	str	r2, [r7, #32]
 80050e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	69f9      	ldr	r1, [r7, #28]
 80050e8:	6a3a      	ldr	r2, [r7, #32]
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e5      	bne.n	80050c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b10      	cmp	r3, #16
 8005102:	d10a      	bne.n	800511a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800511e:	4619      	mov	r1, r3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fe67 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
 8005126:	e002      	b.n	800512e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fe4f 	bl	8004dcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e002      	b.n	8005138 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	e000      	b.n	8005138 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005136:	2302      	movs	r3, #2
  }
}
 8005138:	4618      	mov	r0, r3
 800513a:	3730      	adds	r7, #48	@ 0x30
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005144:	b0c0      	sub	sp, #256	@ 0x100
 8005146:	af00      	add	r7, sp, #0
 8005148:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515c:	68d9      	ldr	r1, [r3, #12]
 800515e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	ea40 0301 	orr.w	r3, r0, r1
 8005168:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800516a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	431a      	orrs	r2, r3
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	431a      	orrs	r2, r3
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005198:	f021 010c 	bic.w	r1, r1, #12
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051a6:	430b      	orrs	r3, r1
 80051a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ba:	6999      	ldr	r1, [r3, #24]
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	ea40 0301 	orr.w	r3, r0, r1
 80051c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b8f      	ldr	r3, [pc, #572]	@ (800540c <UART_SetConfig+0x2cc>)
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d005      	beq.n	80051e0 <UART_SetConfig+0xa0>
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b8d      	ldr	r3, [pc, #564]	@ (8005410 <UART_SetConfig+0x2d0>)
 80051dc:	429a      	cmp	r2, r3
 80051de:	d104      	bne.n	80051ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051e0:	f7fd f982 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 80051e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80051e8:	e003      	b.n	80051f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051ea:	f7fd f969 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 80051ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051fc:	f040 810c 	bne.w	8005418 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005204:	2200      	movs	r2, #0
 8005206:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800520a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800520e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005212:	4622      	mov	r2, r4
 8005214:	462b      	mov	r3, r5
 8005216:	1891      	adds	r1, r2, r2
 8005218:	65b9      	str	r1, [r7, #88]	@ 0x58
 800521a:	415b      	adcs	r3, r3
 800521c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800521e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005222:	4621      	mov	r1, r4
 8005224:	eb12 0801 	adds.w	r8, r2, r1
 8005228:	4629      	mov	r1, r5
 800522a:	eb43 0901 	adc.w	r9, r3, r1
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800523a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800523e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005242:	4690      	mov	r8, r2
 8005244:	4699      	mov	r9, r3
 8005246:	4623      	mov	r3, r4
 8005248:	eb18 0303 	adds.w	r3, r8, r3
 800524c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005250:	462b      	mov	r3, r5
 8005252:	eb49 0303 	adc.w	r3, r9, r3
 8005256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005266:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800526a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800526e:	460b      	mov	r3, r1
 8005270:	18db      	adds	r3, r3, r3
 8005272:	653b      	str	r3, [r7, #80]	@ 0x50
 8005274:	4613      	mov	r3, r2
 8005276:	eb42 0303 	adc.w	r3, r2, r3
 800527a:	657b      	str	r3, [r7, #84]	@ 0x54
 800527c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005280:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005284:	f7fb fd00 	bl	8000c88 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4b61      	ldr	r3, [pc, #388]	@ (8005414 <UART_SetConfig+0x2d4>)
 800528e:	fba3 2302 	umull	r2, r3, r3, r2
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	011c      	lsls	r4, r3, #4
 8005296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800529a:	2200      	movs	r2, #0
 800529c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052a8:	4642      	mov	r2, r8
 80052aa:	464b      	mov	r3, r9
 80052ac:	1891      	adds	r1, r2, r2
 80052ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052b0:	415b      	adcs	r3, r3
 80052b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052b8:	4641      	mov	r1, r8
 80052ba:	eb12 0a01 	adds.w	sl, r2, r1
 80052be:	4649      	mov	r1, r9
 80052c0:	eb43 0b01 	adc.w	fp, r3, r1
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d8:	4692      	mov	sl, r2
 80052da:	469b      	mov	fp, r3
 80052dc:	4643      	mov	r3, r8
 80052de:	eb1a 0303 	adds.w	r3, sl, r3
 80052e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052e6:	464b      	mov	r3, r9
 80052e8:	eb4b 0303 	adc.w	r3, fp, r3
 80052ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005300:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005304:	460b      	mov	r3, r1
 8005306:	18db      	adds	r3, r3, r3
 8005308:	643b      	str	r3, [r7, #64]	@ 0x40
 800530a:	4613      	mov	r3, r2
 800530c:	eb42 0303 	adc.w	r3, r2, r3
 8005310:	647b      	str	r3, [r7, #68]	@ 0x44
 8005312:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005316:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800531a:	f7fb fcb5 	bl	8000c88 <__aeabi_uldivmod>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4611      	mov	r1, r2
 8005324:	4b3b      	ldr	r3, [pc, #236]	@ (8005414 <UART_SetConfig+0x2d4>)
 8005326:	fba3 2301 	umull	r2, r3, r3, r1
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	2264      	movs	r2, #100	@ 0x64
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	1acb      	subs	r3, r1, r3
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800533a:	4b36      	ldr	r3, [pc, #216]	@ (8005414 <UART_SetConfig+0x2d4>)
 800533c:	fba3 2302 	umull	r2, r3, r3, r2
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005348:	441c      	add	r4, r3
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800534e:	2200      	movs	r2, #0
 8005350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005354:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005358:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800535c:	4642      	mov	r2, r8
 800535e:	464b      	mov	r3, r9
 8005360:	1891      	adds	r1, r2, r2
 8005362:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005364:	415b      	adcs	r3, r3
 8005366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005368:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800536c:	4641      	mov	r1, r8
 800536e:	1851      	adds	r1, r2, r1
 8005370:	6339      	str	r1, [r7, #48]	@ 0x30
 8005372:	4649      	mov	r1, r9
 8005374:	414b      	adcs	r3, r1
 8005376:	637b      	str	r3, [r7, #52]	@ 0x34
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005384:	4659      	mov	r1, fp
 8005386:	00cb      	lsls	r3, r1, #3
 8005388:	4651      	mov	r1, sl
 800538a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800538e:	4651      	mov	r1, sl
 8005390:	00ca      	lsls	r2, r1, #3
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	4603      	mov	r3, r0
 8005398:	4642      	mov	r2, r8
 800539a:	189b      	adds	r3, r3, r2
 800539c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053a0:	464b      	mov	r3, r9
 80053a2:	460a      	mov	r2, r1
 80053a4:	eb42 0303 	adc.w	r3, r2, r3
 80053a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053c0:	460b      	mov	r3, r1
 80053c2:	18db      	adds	r3, r3, r3
 80053c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053c6:	4613      	mov	r3, r2
 80053c8:	eb42 0303 	adc.w	r3, r2, r3
 80053cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053d6:	f7fb fc57 	bl	8000c88 <__aeabi_uldivmod>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4b0d      	ldr	r3, [pc, #52]	@ (8005414 <UART_SetConfig+0x2d4>)
 80053e0:	fba3 1302 	umull	r1, r3, r3, r2
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	2164      	movs	r1, #100	@ 0x64
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	3332      	adds	r3, #50	@ 0x32
 80053f2:	4a08      	ldr	r2, [pc, #32]	@ (8005414 <UART_SetConfig+0x2d4>)
 80053f4:	fba2 2303 	umull	r2, r3, r2, r3
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	f003 0207 	and.w	r2, r3, #7
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4422      	add	r2, r4
 8005406:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005408:	e106      	b.n	8005618 <UART_SetConfig+0x4d8>
 800540a:	bf00      	nop
 800540c:	40011000 	.word	0x40011000
 8005410:	40011400 	.word	0x40011400
 8005414:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541c:	2200      	movs	r2, #0
 800541e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005422:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005426:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800542a:	4642      	mov	r2, r8
 800542c:	464b      	mov	r3, r9
 800542e:	1891      	adds	r1, r2, r2
 8005430:	6239      	str	r1, [r7, #32]
 8005432:	415b      	adcs	r3, r3
 8005434:	627b      	str	r3, [r7, #36]	@ 0x24
 8005436:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800543a:	4641      	mov	r1, r8
 800543c:	1854      	adds	r4, r2, r1
 800543e:	4649      	mov	r1, r9
 8005440:	eb43 0501 	adc.w	r5, r3, r1
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	00eb      	lsls	r3, r5, #3
 800544e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005452:	00e2      	lsls	r2, r4, #3
 8005454:	4614      	mov	r4, r2
 8005456:	461d      	mov	r5, r3
 8005458:	4643      	mov	r3, r8
 800545a:	18e3      	adds	r3, r4, r3
 800545c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005460:	464b      	mov	r3, r9
 8005462:	eb45 0303 	adc.w	r3, r5, r3
 8005466:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005476:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005486:	4629      	mov	r1, r5
 8005488:	008b      	lsls	r3, r1, #2
 800548a:	4621      	mov	r1, r4
 800548c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005490:	4621      	mov	r1, r4
 8005492:	008a      	lsls	r2, r1, #2
 8005494:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005498:	f7fb fbf6 	bl	8000c88 <__aeabi_uldivmod>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4b60      	ldr	r3, [pc, #384]	@ (8005624 <UART_SetConfig+0x4e4>)
 80054a2:	fba3 2302 	umull	r2, r3, r3, r2
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	011c      	lsls	r4, r3, #4
 80054aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054bc:	4642      	mov	r2, r8
 80054be:	464b      	mov	r3, r9
 80054c0:	1891      	adds	r1, r2, r2
 80054c2:	61b9      	str	r1, [r7, #24]
 80054c4:	415b      	adcs	r3, r3
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054cc:	4641      	mov	r1, r8
 80054ce:	1851      	adds	r1, r2, r1
 80054d0:	6139      	str	r1, [r7, #16]
 80054d2:	4649      	mov	r1, r9
 80054d4:	414b      	adcs	r3, r1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054e4:	4659      	mov	r1, fp
 80054e6:	00cb      	lsls	r3, r1, #3
 80054e8:	4651      	mov	r1, sl
 80054ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ee:	4651      	mov	r1, sl
 80054f0:	00ca      	lsls	r2, r1, #3
 80054f2:	4610      	mov	r0, r2
 80054f4:	4619      	mov	r1, r3
 80054f6:	4603      	mov	r3, r0
 80054f8:	4642      	mov	r2, r8
 80054fa:	189b      	adds	r3, r3, r2
 80054fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005500:	464b      	mov	r3, r9
 8005502:	460a      	mov	r2, r1
 8005504:	eb42 0303 	adc.w	r3, r2, r3
 8005508:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005516:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005524:	4649      	mov	r1, r9
 8005526:	008b      	lsls	r3, r1, #2
 8005528:	4641      	mov	r1, r8
 800552a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800552e:	4641      	mov	r1, r8
 8005530:	008a      	lsls	r2, r1, #2
 8005532:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005536:	f7fb fba7 	bl	8000c88 <__aeabi_uldivmod>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4611      	mov	r1, r2
 8005540:	4b38      	ldr	r3, [pc, #224]	@ (8005624 <UART_SetConfig+0x4e4>)
 8005542:	fba3 2301 	umull	r2, r3, r3, r1
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	2264      	movs	r2, #100	@ 0x64
 800554a:	fb02 f303 	mul.w	r3, r2, r3
 800554e:	1acb      	subs	r3, r1, r3
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	3332      	adds	r3, #50	@ 0x32
 8005554:	4a33      	ldr	r2, [pc, #204]	@ (8005624 <UART_SetConfig+0x4e4>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005560:	441c      	add	r4, r3
 8005562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005566:	2200      	movs	r2, #0
 8005568:	673b      	str	r3, [r7, #112]	@ 0x70
 800556a:	677a      	str	r2, [r7, #116]	@ 0x74
 800556c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005570:	4642      	mov	r2, r8
 8005572:	464b      	mov	r3, r9
 8005574:	1891      	adds	r1, r2, r2
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	415b      	adcs	r3, r3
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005580:	4641      	mov	r1, r8
 8005582:	1851      	adds	r1, r2, r1
 8005584:	6039      	str	r1, [r7, #0]
 8005586:	4649      	mov	r1, r9
 8005588:	414b      	adcs	r3, r1
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005598:	4659      	mov	r1, fp
 800559a:	00cb      	lsls	r3, r1, #3
 800559c:	4651      	mov	r1, sl
 800559e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055a2:	4651      	mov	r1, sl
 80055a4:	00ca      	lsls	r2, r1, #3
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	4642      	mov	r2, r8
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055b2:	464b      	mov	r3, r9
 80055b4:	460a      	mov	r2, r1
 80055b6:	eb42 0303 	adc.w	r3, r2, r3
 80055ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80055c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055d4:	4649      	mov	r1, r9
 80055d6:	008b      	lsls	r3, r1, #2
 80055d8:	4641      	mov	r1, r8
 80055da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055de:	4641      	mov	r1, r8
 80055e0:	008a      	lsls	r2, r1, #2
 80055e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055e6:	f7fb fb4f 	bl	8000c88 <__aeabi_uldivmod>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005624 <UART_SetConfig+0x4e4>)
 80055f0:	fba3 1302 	umull	r1, r3, r3, r2
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	2164      	movs	r1, #100	@ 0x64
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	3332      	adds	r3, #50	@ 0x32
 8005602:	4a08      	ldr	r2, [pc, #32]	@ (8005624 <UART_SetConfig+0x4e4>)
 8005604:	fba2 2303 	umull	r2, r3, r2, r3
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	f003 020f 	and.w	r2, r3, #15
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4422      	add	r2, r4
 8005616:	609a      	str	r2, [r3, #8]
}
 8005618:	bf00      	nop
 800561a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800561e:	46bd      	mov	sp, r7
 8005620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005624:	51eb851f 	.word	0x51eb851f

08005628 <__cvt>:
 8005628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800562c:	ec57 6b10 	vmov	r6, r7, d0
 8005630:	2f00      	cmp	r7, #0
 8005632:	460c      	mov	r4, r1
 8005634:	4619      	mov	r1, r3
 8005636:	463b      	mov	r3, r7
 8005638:	bfbb      	ittet	lt
 800563a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800563e:	461f      	movlt	r7, r3
 8005640:	2300      	movge	r3, #0
 8005642:	232d      	movlt	r3, #45	@ 0x2d
 8005644:	700b      	strb	r3, [r1, #0]
 8005646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005648:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800564c:	4691      	mov	r9, r2
 800564e:	f023 0820 	bic.w	r8, r3, #32
 8005652:	bfbc      	itt	lt
 8005654:	4632      	movlt	r2, r6
 8005656:	4616      	movlt	r6, r2
 8005658:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800565c:	d005      	beq.n	800566a <__cvt+0x42>
 800565e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005662:	d100      	bne.n	8005666 <__cvt+0x3e>
 8005664:	3401      	adds	r4, #1
 8005666:	2102      	movs	r1, #2
 8005668:	e000      	b.n	800566c <__cvt+0x44>
 800566a:	2103      	movs	r1, #3
 800566c:	ab03      	add	r3, sp, #12
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	ab02      	add	r3, sp, #8
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	ec47 6b10 	vmov	d0, r6, r7
 8005678:	4653      	mov	r3, sl
 800567a:	4622      	mov	r2, r4
 800567c:	f000 fe70 	bl	8006360 <_dtoa_r>
 8005680:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005684:	4605      	mov	r5, r0
 8005686:	d119      	bne.n	80056bc <__cvt+0x94>
 8005688:	f019 0f01 	tst.w	r9, #1
 800568c:	d00e      	beq.n	80056ac <__cvt+0x84>
 800568e:	eb00 0904 	add.w	r9, r0, r4
 8005692:	2200      	movs	r2, #0
 8005694:	2300      	movs	r3, #0
 8005696:	4630      	mov	r0, r6
 8005698:	4639      	mov	r1, r7
 800569a:	f7fb fa35 	bl	8000b08 <__aeabi_dcmpeq>
 800569e:	b108      	cbz	r0, 80056a4 <__cvt+0x7c>
 80056a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80056a4:	2230      	movs	r2, #48	@ 0x30
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	454b      	cmp	r3, r9
 80056aa:	d31e      	bcc.n	80056ea <__cvt+0xc2>
 80056ac:	9b03      	ldr	r3, [sp, #12]
 80056ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056b0:	1b5b      	subs	r3, r3, r5
 80056b2:	4628      	mov	r0, r5
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	b004      	add	sp, #16
 80056b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056c0:	eb00 0904 	add.w	r9, r0, r4
 80056c4:	d1e5      	bne.n	8005692 <__cvt+0x6a>
 80056c6:	7803      	ldrb	r3, [r0, #0]
 80056c8:	2b30      	cmp	r3, #48	@ 0x30
 80056ca:	d10a      	bne.n	80056e2 <__cvt+0xba>
 80056cc:	2200      	movs	r2, #0
 80056ce:	2300      	movs	r3, #0
 80056d0:	4630      	mov	r0, r6
 80056d2:	4639      	mov	r1, r7
 80056d4:	f7fb fa18 	bl	8000b08 <__aeabi_dcmpeq>
 80056d8:	b918      	cbnz	r0, 80056e2 <__cvt+0xba>
 80056da:	f1c4 0401 	rsb	r4, r4, #1
 80056de:	f8ca 4000 	str.w	r4, [sl]
 80056e2:	f8da 3000 	ldr.w	r3, [sl]
 80056e6:	4499      	add	r9, r3
 80056e8:	e7d3      	b.n	8005692 <__cvt+0x6a>
 80056ea:	1c59      	adds	r1, r3, #1
 80056ec:	9103      	str	r1, [sp, #12]
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e7d9      	b.n	80056a6 <__cvt+0x7e>

080056f2 <__exponent>:
 80056f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f4:	2900      	cmp	r1, #0
 80056f6:	bfba      	itte	lt
 80056f8:	4249      	neglt	r1, r1
 80056fa:	232d      	movlt	r3, #45	@ 0x2d
 80056fc:	232b      	movge	r3, #43	@ 0x2b
 80056fe:	2909      	cmp	r1, #9
 8005700:	7002      	strb	r2, [r0, #0]
 8005702:	7043      	strb	r3, [r0, #1]
 8005704:	dd29      	ble.n	800575a <__exponent+0x68>
 8005706:	f10d 0307 	add.w	r3, sp, #7
 800570a:	461d      	mov	r5, r3
 800570c:	270a      	movs	r7, #10
 800570e:	461a      	mov	r2, r3
 8005710:	fbb1 f6f7 	udiv	r6, r1, r7
 8005714:	fb07 1416 	mls	r4, r7, r6, r1
 8005718:	3430      	adds	r4, #48	@ 0x30
 800571a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800571e:	460c      	mov	r4, r1
 8005720:	2c63      	cmp	r4, #99	@ 0x63
 8005722:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005726:	4631      	mov	r1, r6
 8005728:	dcf1      	bgt.n	800570e <__exponent+0x1c>
 800572a:	3130      	adds	r1, #48	@ 0x30
 800572c:	1e94      	subs	r4, r2, #2
 800572e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005732:	1c41      	adds	r1, r0, #1
 8005734:	4623      	mov	r3, r4
 8005736:	42ab      	cmp	r3, r5
 8005738:	d30a      	bcc.n	8005750 <__exponent+0x5e>
 800573a:	f10d 0309 	add.w	r3, sp, #9
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	42ac      	cmp	r4, r5
 8005742:	bf88      	it	hi
 8005744:	2300      	movhi	r3, #0
 8005746:	3302      	adds	r3, #2
 8005748:	4403      	add	r3, r0
 800574a:	1a18      	subs	r0, r3, r0
 800574c:	b003      	add	sp, #12
 800574e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005750:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005754:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005758:	e7ed      	b.n	8005736 <__exponent+0x44>
 800575a:	2330      	movs	r3, #48	@ 0x30
 800575c:	3130      	adds	r1, #48	@ 0x30
 800575e:	7083      	strb	r3, [r0, #2]
 8005760:	70c1      	strb	r1, [r0, #3]
 8005762:	1d03      	adds	r3, r0, #4
 8005764:	e7f1      	b.n	800574a <__exponent+0x58>
	...

08005768 <_printf_float>:
 8005768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800576c:	b08d      	sub	sp, #52	@ 0x34
 800576e:	460c      	mov	r4, r1
 8005770:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005774:	4616      	mov	r6, r2
 8005776:	461f      	mov	r7, r3
 8005778:	4605      	mov	r5, r0
 800577a:	f000 fcef 	bl	800615c <_localeconv_r>
 800577e:	6803      	ldr	r3, [r0, #0]
 8005780:	9304      	str	r3, [sp, #16]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fa fd94 	bl	80002b0 <strlen>
 8005788:	2300      	movs	r3, #0
 800578a:	930a      	str	r3, [sp, #40]	@ 0x28
 800578c:	f8d8 3000 	ldr.w	r3, [r8]
 8005790:	9005      	str	r0, [sp, #20]
 8005792:	3307      	adds	r3, #7
 8005794:	f023 0307 	bic.w	r3, r3, #7
 8005798:	f103 0208 	add.w	r2, r3, #8
 800579c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80057a0:	f8d4 b000 	ldr.w	fp, [r4]
 80057a4:	f8c8 2000 	str.w	r2, [r8]
 80057a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80057b0:	9307      	str	r3, [sp, #28]
 80057b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80057b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80057ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057be:	4b9c      	ldr	r3, [pc, #624]	@ (8005a30 <_printf_float+0x2c8>)
 80057c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057c4:	f7fb f9d2 	bl	8000b6c <__aeabi_dcmpun>
 80057c8:	bb70      	cbnz	r0, 8005828 <_printf_float+0xc0>
 80057ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ce:	4b98      	ldr	r3, [pc, #608]	@ (8005a30 <_printf_float+0x2c8>)
 80057d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057d4:	f7fb f9ac 	bl	8000b30 <__aeabi_dcmple>
 80057d8:	bb30      	cbnz	r0, 8005828 <_printf_float+0xc0>
 80057da:	2200      	movs	r2, #0
 80057dc:	2300      	movs	r3, #0
 80057de:	4640      	mov	r0, r8
 80057e0:	4649      	mov	r1, r9
 80057e2:	f7fb f99b 	bl	8000b1c <__aeabi_dcmplt>
 80057e6:	b110      	cbz	r0, 80057ee <_printf_float+0x86>
 80057e8:	232d      	movs	r3, #45	@ 0x2d
 80057ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057ee:	4a91      	ldr	r2, [pc, #580]	@ (8005a34 <_printf_float+0x2cc>)
 80057f0:	4b91      	ldr	r3, [pc, #580]	@ (8005a38 <_printf_float+0x2d0>)
 80057f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80057f6:	bf8c      	ite	hi
 80057f8:	4690      	movhi	r8, r2
 80057fa:	4698      	movls	r8, r3
 80057fc:	2303      	movs	r3, #3
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	f02b 0304 	bic.w	r3, fp, #4
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	f04f 0900 	mov.w	r9, #0
 800580a:	9700      	str	r7, [sp, #0]
 800580c:	4633      	mov	r3, r6
 800580e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005810:	4621      	mov	r1, r4
 8005812:	4628      	mov	r0, r5
 8005814:	f000 f9d2 	bl	8005bbc <_printf_common>
 8005818:	3001      	adds	r0, #1
 800581a:	f040 808d 	bne.w	8005938 <_printf_float+0x1d0>
 800581e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005822:	b00d      	add	sp, #52	@ 0x34
 8005824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	4640      	mov	r0, r8
 800582e:	4649      	mov	r1, r9
 8005830:	f7fb f99c 	bl	8000b6c <__aeabi_dcmpun>
 8005834:	b140      	cbz	r0, 8005848 <_printf_float+0xe0>
 8005836:	464b      	mov	r3, r9
 8005838:	2b00      	cmp	r3, #0
 800583a:	bfbc      	itt	lt
 800583c:	232d      	movlt	r3, #45	@ 0x2d
 800583e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005842:	4a7e      	ldr	r2, [pc, #504]	@ (8005a3c <_printf_float+0x2d4>)
 8005844:	4b7e      	ldr	r3, [pc, #504]	@ (8005a40 <_printf_float+0x2d8>)
 8005846:	e7d4      	b.n	80057f2 <_printf_float+0x8a>
 8005848:	6863      	ldr	r3, [r4, #4]
 800584a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800584e:	9206      	str	r2, [sp, #24]
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	d13b      	bne.n	80058cc <_printf_float+0x164>
 8005854:	2306      	movs	r3, #6
 8005856:	6063      	str	r3, [r4, #4]
 8005858:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800585c:	2300      	movs	r3, #0
 800585e:	6022      	str	r2, [r4, #0]
 8005860:	9303      	str	r3, [sp, #12]
 8005862:	ab0a      	add	r3, sp, #40	@ 0x28
 8005864:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005868:	ab09      	add	r3, sp, #36	@ 0x24
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	6861      	ldr	r1, [r4, #4]
 800586e:	ec49 8b10 	vmov	d0, r8, r9
 8005872:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005876:	4628      	mov	r0, r5
 8005878:	f7ff fed6 	bl	8005628 <__cvt>
 800587c:	9b06      	ldr	r3, [sp, #24]
 800587e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005880:	2b47      	cmp	r3, #71	@ 0x47
 8005882:	4680      	mov	r8, r0
 8005884:	d129      	bne.n	80058da <_printf_float+0x172>
 8005886:	1cc8      	adds	r0, r1, #3
 8005888:	db02      	blt.n	8005890 <_printf_float+0x128>
 800588a:	6863      	ldr	r3, [r4, #4]
 800588c:	4299      	cmp	r1, r3
 800588e:	dd41      	ble.n	8005914 <_printf_float+0x1ac>
 8005890:	f1aa 0a02 	sub.w	sl, sl, #2
 8005894:	fa5f fa8a 	uxtb.w	sl, sl
 8005898:	3901      	subs	r1, #1
 800589a:	4652      	mov	r2, sl
 800589c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80058a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80058a2:	f7ff ff26 	bl	80056f2 <__exponent>
 80058a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058a8:	1813      	adds	r3, r2, r0
 80058aa:	2a01      	cmp	r2, #1
 80058ac:	4681      	mov	r9, r0
 80058ae:	6123      	str	r3, [r4, #16]
 80058b0:	dc02      	bgt.n	80058b8 <_printf_float+0x150>
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	07d2      	lsls	r2, r2, #31
 80058b6:	d501      	bpl.n	80058bc <_printf_float+0x154>
 80058b8:	3301      	adds	r3, #1
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0a2      	beq.n	800580a <_printf_float+0xa2>
 80058c4:	232d      	movs	r3, #45	@ 0x2d
 80058c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ca:	e79e      	b.n	800580a <_printf_float+0xa2>
 80058cc:	9a06      	ldr	r2, [sp, #24]
 80058ce:	2a47      	cmp	r2, #71	@ 0x47
 80058d0:	d1c2      	bne.n	8005858 <_printf_float+0xf0>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1c0      	bne.n	8005858 <_printf_float+0xf0>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e7bd      	b.n	8005856 <_printf_float+0xee>
 80058da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058de:	d9db      	bls.n	8005898 <_printf_float+0x130>
 80058e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80058e4:	d118      	bne.n	8005918 <_printf_float+0x1b0>
 80058e6:	2900      	cmp	r1, #0
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	dd0b      	ble.n	8005904 <_printf_float+0x19c>
 80058ec:	6121      	str	r1, [r4, #16]
 80058ee:	b913      	cbnz	r3, 80058f6 <_printf_float+0x18e>
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	07d0      	lsls	r0, r2, #31
 80058f4:	d502      	bpl.n	80058fc <_printf_float+0x194>
 80058f6:	3301      	adds	r3, #1
 80058f8:	440b      	add	r3, r1
 80058fa:	6123      	str	r3, [r4, #16]
 80058fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80058fe:	f04f 0900 	mov.w	r9, #0
 8005902:	e7db      	b.n	80058bc <_printf_float+0x154>
 8005904:	b913      	cbnz	r3, 800590c <_printf_float+0x1a4>
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	07d2      	lsls	r2, r2, #31
 800590a:	d501      	bpl.n	8005910 <_printf_float+0x1a8>
 800590c:	3302      	adds	r3, #2
 800590e:	e7f4      	b.n	80058fa <_printf_float+0x192>
 8005910:	2301      	movs	r3, #1
 8005912:	e7f2      	b.n	80058fa <_printf_float+0x192>
 8005914:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800591a:	4299      	cmp	r1, r3
 800591c:	db05      	blt.n	800592a <_printf_float+0x1c2>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	6121      	str	r1, [r4, #16]
 8005922:	07d8      	lsls	r0, r3, #31
 8005924:	d5ea      	bpl.n	80058fc <_printf_float+0x194>
 8005926:	1c4b      	adds	r3, r1, #1
 8005928:	e7e7      	b.n	80058fa <_printf_float+0x192>
 800592a:	2900      	cmp	r1, #0
 800592c:	bfd4      	ite	le
 800592e:	f1c1 0202 	rsble	r2, r1, #2
 8005932:	2201      	movgt	r2, #1
 8005934:	4413      	add	r3, r2
 8005936:	e7e0      	b.n	80058fa <_printf_float+0x192>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	055a      	lsls	r2, r3, #21
 800593c:	d407      	bmi.n	800594e <_printf_float+0x1e6>
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	4642      	mov	r2, r8
 8005942:	4631      	mov	r1, r6
 8005944:	4628      	mov	r0, r5
 8005946:	47b8      	blx	r7
 8005948:	3001      	adds	r0, #1
 800594a:	d12b      	bne.n	80059a4 <_printf_float+0x23c>
 800594c:	e767      	b.n	800581e <_printf_float+0xb6>
 800594e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005952:	f240 80dd 	bls.w	8005b10 <_printf_float+0x3a8>
 8005956:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800595a:	2200      	movs	r2, #0
 800595c:	2300      	movs	r3, #0
 800595e:	f7fb f8d3 	bl	8000b08 <__aeabi_dcmpeq>
 8005962:	2800      	cmp	r0, #0
 8005964:	d033      	beq.n	80059ce <_printf_float+0x266>
 8005966:	4a37      	ldr	r2, [pc, #220]	@ (8005a44 <_printf_float+0x2dc>)
 8005968:	2301      	movs	r3, #1
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	f43f af54 	beq.w	800581e <_printf_float+0xb6>
 8005976:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800597a:	4543      	cmp	r3, r8
 800597c:	db02      	blt.n	8005984 <_printf_float+0x21c>
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	07d8      	lsls	r0, r3, #31
 8005982:	d50f      	bpl.n	80059a4 <_printf_float+0x23c>
 8005984:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005988:	4631      	mov	r1, r6
 800598a:	4628      	mov	r0, r5
 800598c:	47b8      	blx	r7
 800598e:	3001      	adds	r0, #1
 8005990:	f43f af45 	beq.w	800581e <_printf_float+0xb6>
 8005994:	f04f 0900 	mov.w	r9, #0
 8005998:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800599c:	f104 0a1a 	add.w	sl, r4, #26
 80059a0:	45c8      	cmp	r8, r9
 80059a2:	dc09      	bgt.n	80059b8 <_printf_float+0x250>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	079b      	lsls	r3, r3, #30
 80059a8:	f100 8103 	bmi.w	8005bb2 <_printf_float+0x44a>
 80059ac:	68e0      	ldr	r0, [r4, #12]
 80059ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059b0:	4298      	cmp	r0, r3
 80059b2:	bfb8      	it	lt
 80059b4:	4618      	movlt	r0, r3
 80059b6:	e734      	b.n	8005822 <_printf_float+0xba>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4652      	mov	r2, sl
 80059bc:	4631      	mov	r1, r6
 80059be:	4628      	mov	r0, r5
 80059c0:	47b8      	blx	r7
 80059c2:	3001      	adds	r0, #1
 80059c4:	f43f af2b 	beq.w	800581e <_printf_float+0xb6>
 80059c8:	f109 0901 	add.w	r9, r9, #1
 80059cc:	e7e8      	b.n	80059a0 <_printf_float+0x238>
 80059ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	dc39      	bgt.n	8005a48 <_printf_float+0x2e0>
 80059d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a44 <_printf_float+0x2dc>)
 80059d6:	2301      	movs	r3, #1
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f af1d 	beq.w	800581e <_printf_float+0xb6>
 80059e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80059e8:	ea59 0303 	orrs.w	r3, r9, r3
 80059ec:	d102      	bne.n	80059f4 <_printf_float+0x28c>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	07d9      	lsls	r1, r3, #31
 80059f2:	d5d7      	bpl.n	80059a4 <_printf_float+0x23c>
 80059f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059f8:	4631      	mov	r1, r6
 80059fa:	4628      	mov	r0, r5
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	f43f af0d 	beq.w	800581e <_printf_float+0xb6>
 8005a04:	f04f 0a00 	mov.w	sl, #0
 8005a08:	f104 0b1a 	add.w	fp, r4, #26
 8005a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a0e:	425b      	negs	r3, r3
 8005a10:	4553      	cmp	r3, sl
 8005a12:	dc01      	bgt.n	8005a18 <_printf_float+0x2b0>
 8005a14:	464b      	mov	r3, r9
 8005a16:	e793      	b.n	8005940 <_printf_float+0x1d8>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	465a      	mov	r2, fp
 8005a1c:	4631      	mov	r1, r6
 8005a1e:	4628      	mov	r0, r5
 8005a20:	47b8      	blx	r7
 8005a22:	3001      	adds	r0, #1
 8005a24:	f43f aefb 	beq.w	800581e <_printf_float+0xb6>
 8005a28:	f10a 0a01 	add.w	sl, sl, #1
 8005a2c:	e7ee      	b.n	8005a0c <_printf_float+0x2a4>
 8005a2e:	bf00      	nop
 8005a30:	7fefffff 	.word	0x7fefffff
 8005a34:	08008344 	.word	0x08008344
 8005a38:	08008340 	.word	0x08008340
 8005a3c:	0800834c 	.word	0x0800834c
 8005a40:	08008348 	.word	0x08008348
 8005a44:	08008350 	.word	0x08008350
 8005a48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a4e:	4553      	cmp	r3, sl
 8005a50:	bfa8      	it	ge
 8005a52:	4653      	movge	r3, sl
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	4699      	mov	r9, r3
 8005a58:	dc36      	bgt.n	8005ac8 <_printf_float+0x360>
 8005a5a:	f04f 0b00 	mov.w	fp, #0
 8005a5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a62:	f104 021a 	add.w	r2, r4, #26
 8005a66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a68:	9306      	str	r3, [sp, #24]
 8005a6a:	eba3 0309 	sub.w	r3, r3, r9
 8005a6e:	455b      	cmp	r3, fp
 8005a70:	dc31      	bgt.n	8005ad6 <_printf_float+0x36e>
 8005a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a74:	459a      	cmp	sl, r3
 8005a76:	dc3a      	bgt.n	8005aee <_printf_float+0x386>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	07da      	lsls	r2, r3, #31
 8005a7c:	d437      	bmi.n	8005aee <_printf_float+0x386>
 8005a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a80:	ebaa 0903 	sub.w	r9, sl, r3
 8005a84:	9b06      	ldr	r3, [sp, #24]
 8005a86:	ebaa 0303 	sub.w	r3, sl, r3
 8005a8a:	4599      	cmp	r9, r3
 8005a8c:	bfa8      	it	ge
 8005a8e:	4699      	movge	r9, r3
 8005a90:	f1b9 0f00 	cmp.w	r9, #0
 8005a94:	dc33      	bgt.n	8005afe <_printf_float+0x396>
 8005a96:	f04f 0800 	mov.w	r8, #0
 8005a9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a9e:	f104 0b1a 	add.w	fp, r4, #26
 8005aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa4:	ebaa 0303 	sub.w	r3, sl, r3
 8005aa8:	eba3 0309 	sub.w	r3, r3, r9
 8005aac:	4543      	cmp	r3, r8
 8005aae:	f77f af79 	ble.w	80059a4 <_printf_float+0x23c>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	465a      	mov	r2, fp
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b8      	blx	r7
 8005abc:	3001      	adds	r0, #1
 8005abe:	f43f aeae 	beq.w	800581e <_printf_float+0xb6>
 8005ac2:	f108 0801 	add.w	r8, r8, #1
 8005ac6:	e7ec      	b.n	8005aa2 <_printf_float+0x33a>
 8005ac8:	4642      	mov	r2, r8
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b8      	blx	r7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d1c2      	bne.n	8005a5a <_printf_float+0x2f2>
 8005ad4:	e6a3      	b.n	800581e <_printf_float+0xb6>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	9206      	str	r2, [sp, #24]
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f43f ae9c 	beq.w	800581e <_printf_float+0xb6>
 8005ae6:	9a06      	ldr	r2, [sp, #24]
 8005ae8:	f10b 0b01 	add.w	fp, fp, #1
 8005aec:	e7bb      	b.n	8005a66 <_printf_float+0x2fe>
 8005aee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005af2:	4631      	mov	r1, r6
 8005af4:	4628      	mov	r0, r5
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	d1c0      	bne.n	8005a7e <_printf_float+0x316>
 8005afc:	e68f      	b.n	800581e <_printf_float+0xb6>
 8005afe:	9a06      	ldr	r2, [sp, #24]
 8005b00:	464b      	mov	r3, r9
 8005b02:	4442      	add	r2, r8
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d1c3      	bne.n	8005a96 <_printf_float+0x32e>
 8005b0e:	e686      	b.n	800581e <_printf_float+0xb6>
 8005b10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b14:	f1ba 0f01 	cmp.w	sl, #1
 8005b18:	dc01      	bgt.n	8005b1e <_printf_float+0x3b6>
 8005b1a:	07db      	lsls	r3, r3, #31
 8005b1c:	d536      	bpl.n	8005b8c <_printf_float+0x424>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	4642      	mov	r2, r8
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f43f ae78 	beq.w	800581e <_printf_float+0xb6>
 8005b2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b32:	4631      	mov	r1, r6
 8005b34:	4628      	mov	r0, r5
 8005b36:	47b8      	blx	r7
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f43f ae70 	beq.w	800581e <_printf_float+0xb6>
 8005b3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b42:	2200      	movs	r2, #0
 8005b44:	2300      	movs	r3, #0
 8005b46:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005b4a:	f7fa ffdd 	bl	8000b08 <__aeabi_dcmpeq>
 8005b4e:	b9c0      	cbnz	r0, 8005b82 <_printf_float+0x41a>
 8005b50:	4653      	mov	r3, sl
 8005b52:	f108 0201 	add.w	r2, r8, #1
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d10c      	bne.n	8005b7a <_printf_float+0x412>
 8005b60:	e65d      	b.n	800581e <_printf_float+0xb6>
 8005b62:	2301      	movs	r3, #1
 8005b64:	465a      	mov	r2, fp
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f43f ae56 	beq.w	800581e <_printf_float+0xb6>
 8005b72:	f108 0801 	add.w	r8, r8, #1
 8005b76:	45d0      	cmp	r8, sl
 8005b78:	dbf3      	blt.n	8005b62 <_printf_float+0x3fa>
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005b80:	e6df      	b.n	8005942 <_printf_float+0x1da>
 8005b82:	f04f 0800 	mov.w	r8, #0
 8005b86:	f104 0b1a 	add.w	fp, r4, #26
 8005b8a:	e7f4      	b.n	8005b76 <_printf_float+0x40e>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4642      	mov	r2, r8
 8005b90:	e7e1      	b.n	8005b56 <_printf_float+0x3ee>
 8005b92:	2301      	movs	r3, #1
 8005b94:	464a      	mov	r2, r9
 8005b96:	4631      	mov	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	47b8      	blx	r7
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	f43f ae3e 	beq.w	800581e <_printf_float+0xb6>
 8005ba2:	f108 0801 	add.w	r8, r8, #1
 8005ba6:	68e3      	ldr	r3, [r4, #12]
 8005ba8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005baa:	1a5b      	subs	r3, r3, r1
 8005bac:	4543      	cmp	r3, r8
 8005bae:	dcf0      	bgt.n	8005b92 <_printf_float+0x42a>
 8005bb0:	e6fc      	b.n	80059ac <_printf_float+0x244>
 8005bb2:	f04f 0800 	mov.w	r8, #0
 8005bb6:	f104 0919 	add.w	r9, r4, #25
 8005bba:	e7f4      	b.n	8005ba6 <_printf_float+0x43e>

08005bbc <_printf_common>:
 8005bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	4698      	mov	r8, r3
 8005bc4:	688a      	ldr	r2, [r1, #8]
 8005bc6:	690b      	ldr	r3, [r1, #16]
 8005bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	bfb8      	it	lt
 8005bd0:	4613      	movlt	r3, r2
 8005bd2:	6033      	str	r3, [r6, #0]
 8005bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005bd8:	4607      	mov	r7, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	b10a      	cbz	r2, 8005be2 <_printf_common+0x26>
 8005bde:	3301      	adds	r3, #1
 8005be0:	6033      	str	r3, [r6, #0]
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	0699      	lsls	r1, r3, #26
 8005be6:	bf42      	ittt	mi
 8005be8:	6833      	ldrmi	r3, [r6, #0]
 8005bea:	3302      	addmi	r3, #2
 8005bec:	6033      	strmi	r3, [r6, #0]
 8005bee:	6825      	ldr	r5, [r4, #0]
 8005bf0:	f015 0506 	ands.w	r5, r5, #6
 8005bf4:	d106      	bne.n	8005c04 <_printf_common+0x48>
 8005bf6:	f104 0a19 	add.w	sl, r4, #25
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	6832      	ldr	r2, [r6, #0]
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	42ab      	cmp	r3, r5
 8005c02:	dc26      	bgt.n	8005c52 <_printf_common+0x96>
 8005c04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	3b00      	subs	r3, #0
 8005c0c:	bf18      	it	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	0692      	lsls	r2, r2, #26
 8005c12:	d42b      	bmi.n	8005c6c <_printf_common+0xb0>
 8005c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c18:	4641      	mov	r1, r8
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	47c8      	blx	r9
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d01e      	beq.n	8005c60 <_printf_common+0xa4>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	6922      	ldr	r2, [r4, #16]
 8005c26:	f003 0306 	and.w	r3, r3, #6
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	bf02      	ittt	eq
 8005c2e:	68e5      	ldreq	r5, [r4, #12]
 8005c30:	6833      	ldreq	r3, [r6, #0]
 8005c32:	1aed      	subeq	r5, r5, r3
 8005c34:	68a3      	ldr	r3, [r4, #8]
 8005c36:	bf0c      	ite	eq
 8005c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c3c:	2500      	movne	r5, #0
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	bfc4      	itt	gt
 8005c42:	1a9b      	subgt	r3, r3, r2
 8005c44:	18ed      	addgt	r5, r5, r3
 8005c46:	2600      	movs	r6, #0
 8005c48:	341a      	adds	r4, #26
 8005c4a:	42b5      	cmp	r5, r6
 8005c4c:	d11a      	bne.n	8005c84 <_printf_common+0xc8>
 8005c4e:	2000      	movs	r0, #0
 8005c50:	e008      	b.n	8005c64 <_printf_common+0xa8>
 8005c52:	2301      	movs	r3, #1
 8005c54:	4652      	mov	r2, sl
 8005c56:	4641      	mov	r1, r8
 8005c58:	4638      	mov	r0, r7
 8005c5a:	47c8      	blx	r9
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d103      	bne.n	8005c68 <_printf_common+0xac>
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c68:	3501      	adds	r5, #1
 8005c6a:	e7c6      	b.n	8005bfa <_printf_common+0x3e>
 8005c6c:	18e1      	adds	r1, r4, r3
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	2030      	movs	r0, #48	@ 0x30
 8005c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c76:	4422      	add	r2, r4
 8005c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c80:	3302      	adds	r3, #2
 8005c82:	e7c7      	b.n	8005c14 <_printf_common+0x58>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4622      	mov	r2, r4
 8005c88:	4641      	mov	r1, r8
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	47c8      	blx	r9
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d0e6      	beq.n	8005c60 <_printf_common+0xa4>
 8005c92:	3601      	adds	r6, #1
 8005c94:	e7d9      	b.n	8005c4a <_printf_common+0x8e>
	...

08005c98 <_printf_i>:
 8005c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	7e0f      	ldrb	r7, [r1, #24]
 8005c9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ca0:	2f78      	cmp	r7, #120	@ 0x78
 8005ca2:	4691      	mov	r9, r2
 8005ca4:	4680      	mov	r8, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	469a      	mov	sl, r3
 8005caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cae:	d807      	bhi.n	8005cc0 <_printf_i+0x28>
 8005cb0:	2f62      	cmp	r7, #98	@ 0x62
 8005cb2:	d80a      	bhi.n	8005cca <_printf_i+0x32>
 8005cb4:	2f00      	cmp	r7, #0
 8005cb6:	f000 80d1 	beq.w	8005e5c <_printf_i+0x1c4>
 8005cba:	2f58      	cmp	r7, #88	@ 0x58
 8005cbc:	f000 80b8 	beq.w	8005e30 <_printf_i+0x198>
 8005cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cc8:	e03a      	b.n	8005d40 <_printf_i+0xa8>
 8005cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cce:	2b15      	cmp	r3, #21
 8005cd0:	d8f6      	bhi.n	8005cc0 <_printf_i+0x28>
 8005cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8005cd8 <_printf_i+0x40>)
 8005cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cd8:	08005d31 	.word	0x08005d31
 8005cdc:	08005d45 	.word	0x08005d45
 8005ce0:	08005cc1 	.word	0x08005cc1
 8005ce4:	08005cc1 	.word	0x08005cc1
 8005ce8:	08005cc1 	.word	0x08005cc1
 8005cec:	08005cc1 	.word	0x08005cc1
 8005cf0:	08005d45 	.word	0x08005d45
 8005cf4:	08005cc1 	.word	0x08005cc1
 8005cf8:	08005cc1 	.word	0x08005cc1
 8005cfc:	08005cc1 	.word	0x08005cc1
 8005d00:	08005cc1 	.word	0x08005cc1
 8005d04:	08005e43 	.word	0x08005e43
 8005d08:	08005d6f 	.word	0x08005d6f
 8005d0c:	08005dfd 	.word	0x08005dfd
 8005d10:	08005cc1 	.word	0x08005cc1
 8005d14:	08005cc1 	.word	0x08005cc1
 8005d18:	08005e65 	.word	0x08005e65
 8005d1c:	08005cc1 	.word	0x08005cc1
 8005d20:	08005d6f 	.word	0x08005d6f
 8005d24:	08005cc1 	.word	0x08005cc1
 8005d28:	08005cc1 	.word	0x08005cc1
 8005d2c:	08005e05 	.word	0x08005e05
 8005d30:	6833      	ldr	r3, [r6, #0]
 8005d32:	1d1a      	adds	r2, r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6032      	str	r2, [r6, #0]
 8005d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d40:	2301      	movs	r3, #1
 8005d42:	e09c      	b.n	8005e7e <_printf_i+0x1e6>
 8005d44:	6833      	ldr	r3, [r6, #0]
 8005d46:	6820      	ldr	r0, [r4, #0]
 8005d48:	1d19      	adds	r1, r3, #4
 8005d4a:	6031      	str	r1, [r6, #0]
 8005d4c:	0606      	lsls	r6, r0, #24
 8005d4e:	d501      	bpl.n	8005d54 <_printf_i+0xbc>
 8005d50:	681d      	ldr	r5, [r3, #0]
 8005d52:	e003      	b.n	8005d5c <_printf_i+0xc4>
 8005d54:	0645      	lsls	r5, r0, #25
 8005d56:	d5fb      	bpl.n	8005d50 <_printf_i+0xb8>
 8005d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d5c:	2d00      	cmp	r5, #0
 8005d5e:	da03      	bge.n	8005d68 <_printf_i+0xd0>
 8005d60:	232d      	movs	r3, #45	@ 0x2d
 8005d62:	426d      	negs	r5, r5
 8005d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d68:	4858      	ldr	r0, [pc, #352]	@ (8005ecc <_printf_i+0x234>)
 8005d6a:	230a      	movs	r3, #10
 8005d6c:	e011      	b.n	8005d92 <_printf_i+0xfa>
 8005d6e:	6821      	ldr	r1, [r4, #0]
 8005d70:	6833      	ldr	r3, [r6, #0]
 8005d72:	0608      	lsls	r0, r1, #24
 8005d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d78:	d402      	bmi.n	8005d80 <_printf_i+0xe8>
 8005d7a:	0649      	lsls	r1, r1, #25
 8005d7c:	bf48      	it	mi
 8005d7e:	b2ad      	uxthmi	r5, r5
 8005d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d82:	4852      	ldr	r0, [pc, #328]	@ (8005ecc <_printf_i+0x234>)
 8005d84:	6033      	str	r3, [r6, #0]
 8005d86:	bf14      	ite	ne
 8005d88:	230a      	movne	r3, #10
 8005d8a:	2308      	moveq	r3, #8
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d92:	6866      	ldr	r6, [r4, #4]
 8005d94:	60a6      	str	r6, [r4, #8]
 8005d96:	2e00      	cmp	r6, #0
 8005d98:	db05      	blt.n	8005da6 <_printf_i+0x10e>
 8005d9a:	6821      	ldr	r1, [r4, #0]
 8005d9c:	432e      	orrs	r6, r5
 8005d9e:	f021 0104 	bic.w	r1, r1, #4
 8005da2:	6021      	str	r1, [r4, #0]
 8005da4:	d04b      	beq.n	8005e3e <_printf_i+0x1a6>
 8005da6:	4616      	mov	r6, r2
 8005da8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dac:	fb03 5711 	mls	r7, r3, r1, r5
 8005db0:	5dc7      	ldrb	r7, [r0, r7]
 8005db2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005db6:	462f      	mov	r7, r5
 8005db8:	42bb      	cmp	r3, r7
 8005dba:	460d      	mov	r5, r1
 8005dbc:	d9f4      	bls.n	8005da8 <_printf_i+0x110>
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d10b      	bne.n	8005dda <_printf_i+0x142>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	07df      	lsls	r7, r3, #31
 8005dc6:	d508      	bpl.n	8005dda <_printf_i+0x142>
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	6861      	ldr	r1, [r4, #4]
 8005dcc:	4299      	cmp	r1, r3
 8005dce:	bfde      	ittt	le
 8005dd0:	2330      	movle	r3, #48	@ 0x30
 8005dd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dd6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005dda:	1b92      	subs	r2, r2, r6
 8005ddc:	6122      	str	r2, [r4, #16]
 8005dde:	f8cd a000 	str.w	sl, [sp]
 8005de2:	464b      	mov	r3, r9
 8005de4:	aa03      	add	r2, sp, #12
 8005de6:	4621      	mov	r1, r4
 8005de8:	4640      	mov	r0, r8
 8005dea:	f7ff fee7 	bl	8005bbc <_printf_common>
 8005dee:	3001      	adds	r0, #1
 8005df0:	d14a      	bne.n	8005e88 <_printf_i+0x1f0>
 8005df2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005df6:	b004      	add	sp, #16
 8005df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	f043 0320 	orr.w	r3, r3, #32
 8005e02:	6023      	str	r3, [r4, #0]
 8005e04:	4832      	ldr	r0, [pc, #200]	@ (8005ed0 <_printf_i+0x238>)
 8005e06:	2778      	movs	r7, #120	@ 0x78
 8005e08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	6831      	ldr	r1, [r6, #0]
 8005e10:	061f      	lsls	r7, r3, #24
 8005e12:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e16:	d402      	bmi.n	8005e1e <_printf_i+0x186>
 8005e18:	065f      	lsls	r7, r3, #25
 8005e1a:	bf48      	it	mi
 8005e1c:	b2ad      	uxthmi	r5, r5
 8005e1e:	6031      	str	r1, [r6, #0]
 8005e20:	07d9      	lsls	r1, r3, #31
 8005e22:	bf44      	itt	mi
 8005e24:	f043 0320 	orrmi.w	r3, r3, #32
 8005e28:	6023      	strmi	r3, [r4, #0]
 8005e2a:	b11d      	cbz	r5, 8005e34 <_printf_i+0x19c>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	e7ad      	b.n	8005d8c <_printf_i+0xf4>
 8005e30:	4826      	ldr	r0, [pc, #152]	@ (8005ecc <_printf_i+0x234>)
 8005e32:	e7e9      	b.n	8005e08 <_printf_i+0x170>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	f023 0320 	bic.w	r3, r3, #32
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	e7f6      	b.n	8005e2c <_printf_i+0x194>
 8005e3e:	4616      	mov	r6, r2
 8005e40:	e7bd      	b.n	8005dbe <_printf_i+0x126>
 8005e42:	6833      	ldr	r3, [r6, #0]
 8005e44:	6825      	ldr	r5, [r4, #0]
 8005e46:	6961      	ldr	r1, [r4, #20]
 8005e48:	1d18      	adds	r0, r3, #4
 8005e4a:	6030      	str	r0, [r6, #0]
 8005e4c:	062e      	lsls	r6, r5, #24
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	d501      	bpl.n	8005e56 <_printf_i+0x1be>
 8005e52:	6019      	str	r1, [r3, #0]
 8005e54:	e002      	b.n	8005e5c <_printf_i+0x1c4>
 8005e56:	0668      	lsls	r0, r5, #25
 8005e58:	d5fb      	bpl.n	8005e52 <_printf_i+0x1ba>
 8005e5a:	8019      	strh	r1, [r3, #0]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	6123      	str	r3, [r4, #16]
 8005e60:	4616      	mov	r6, r2
 8005e62:	e7bc      	b.n	8005dde <_printf_i+0x146>
 8005e64:	6833      	ldr	r3, [r6, #0]
 8005e66:	1d1a      	adds	r2, r3, #4
 8005e68:	6032      	str	r2, [r6, #0]
 8005e6a:	681e      	ldr	r6, [r3, #0]
 8005e6c:	6862      	ldr	r2, [r4, #4]
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4630      	mov	r0, r6
 8005e72:	f7fa f9cd 	bl	8000210 <memchr>
 8005e76:	b108      	cbz	r0, 8005e7c <_printf_i+0x1e4>
 8005e78:	1b80      	subs	r0, r0, r6
 8005e7a:	6060      	str	r0, [r4, #4]
 8005e7c:	6863      	ldr	r3, [r4, #4]
 8005e7e:	6123      	str	r3, [r4, #16]
 8005e80:	2300      	movs	r3, #0
 8005e82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e86:	e7aa      	b.n	8005dde <_printf_i+0x146>
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	4632      	mov	r2, r6
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	4640      	mov	r0, r8
 8005e90:	47d0      	blx	sl
 8005e92:	3001      	adds	r0, #1
 8005e94:	d0ad      	beq.n	8005df2 <_printf_i+0x15a>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	079b      	lsls	r3, r3, #30
 8005e9a:	d413      	bmi.n	8005ec4 <_printf_i+0x22c>
 8005e9c:	68e0      	ldr	r0, [r4, #12]
 8005e9e:	9b03      	ldr	r3, [sp, #12]
 8005ea0:	4298      	cmp	r0, r3
 8005ea2:	bfb8      	it	lt
 8005ea4:	4618      	movlt	r0, r3
 8005ea6:	e7a6      	b.n	8005df6 <_printf_i+0x15e>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4632      	mov	r2, r6
 8005eac:	4649      	mov	r1, r9
 8005eae:	4640      	mov	r0, r8
 8005eb0:	47d0      	blx	sl
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d09d      	beq.n	8005df2 <_printf_i+0x15a>
 8005eb6:	3501      	adds	r5, #1
 8005eb8:	68e3      	ldr	r3, [r4, #12]
 8005eba:	9903      	ldr	r1, [sp, #12]
 8005ebc:	1a5b      	subs	r3, r3, r1
 8005ebe:	42ab      	cmp	r3, r5
 8005ec0:	dcf2      	bgt.n	8005ea8 <_printf_i+0x210>
 8005ec2:	e7eb      	b.n	8005e9c <_printf_i+0x204>
 8005ec4:	2500      	movs	r5, #0
 8005ec6:	f104 0619 	add.w	r6, r4, #25
 8005eca:	e7f5      	b.n	8005eb8 <_printf_i+0x220>
 8005ecc:	08008352 	.word	0x08008352
 8005ed0:	08008363 	.word	0x08008363

08005ed4 <std>:
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	b510      	push	{r4, lr}
 8005ed8:	4604      	mov	r4, r0
 8005eda:	e9c0 3300 	strd	r3, r3, [r0]
 8005ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ee2:	6083      	str	r3, [r0, #8]
 8005ee4:	8181      	strh	r1, [r0, #12]
 8005ee6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ee8:	81c2      	strh	r2, [r0, #14]
 8005eea:	6183      	str	r3, [r0, #24]
 8005eec:	4619      	mov	r1, r3
 8005eee:	2208      	movs	r2, #8
 8005ef0:	305c      	adds	r0, #92	@ 0x5c
 8005ef2:	f000 f92a 	bl	800614a <memset>
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f2c <std+0x58>)
 8005ef8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005efa:	4b0d      	ldr	r3, [pc, #52]	@ (8005f30 <std+0x5c>)
 8005efc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005efe:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <std+0x60>)
 8005f00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f02:	4b0d      	ldr	r3, [pc, #52]	@ (8005f38 <std+0x64>)
 8005f04:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f06:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <std+0x68>)
 8005f08:	6224      	str	r4, [r4, #32]
 8005f0a:	429c      	cmp	r4, r3
 8005f0c:	d006      	beq.n	8005f1c <std+0x48>
 8005f0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f12:	4294      	cmp	r4, r2
 8005f14:	d002      	beq.n	8005f1c <std+0x48>
 8005f16:	33d0      	adds	r3, #208	@ 0xd0
 8005f18:	429c      	cmp	r4, r3
 8005f1a:	d105      	bne.n	8005f28 <std+0x54>
 8005f1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f24:	f000 b98e 	b.w	8006244 <__retarget_lock_init_recursive>
 8005f28:	bd10      	pop	{r4, pc}
 8005f2a:	bf00      	nop
 8005f2c:	080060c5 	.word	0x080060c5
 8005f30:	080060e7 	.word	0x080060e7
 8005f34:	0800611f 	.word	0x0800611f
 8005f38:	08006143 	.word	0x08006143
 8005f3c:	2000031c 	.word	0x2000031c

08005f40 <stdio_exit_handler>:
 8005f40:	4a02      	ldr	r2, [pc, #8]	@ (8005f4c <stdio_exit_handler+0xc>)
 8005f42:	4903      	ldr	r1, [pc, #12]	@ (8005f50 <stdio_exit_handler+0x10>)
 8005f44:	4803      	ldr	r0, [pc, #12]	@ (8005f54 <stdio_exit_handler+0x14>)
 8005f46:	f000 b869 	b.w	800601c <_fwalk_sglue>
 8005f4a:	bf00      	nop
 8005f4c:	2000000c 	.word	0x2000000c
 8005f50:	08007bad 	.word	0x08007bad
 8005f54:	2000001c 	.word	0x2000001c

08005f58 <cleanup_stdio>:
 8005f58:	6841      	ldr	r1, [r0, #4]
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f8c <cleanup_stdio+0x34>)
 8005f5c:	4299      	cmp	r1, r3
 8005f5e:	b510      	push	{r4, lr}
 8005f60:	4604      	mov	r4, r0
 8005f62:	d001      	beq.n	8005f68 <cleanup_stdio+0x10>
 8005f64:	f001 fe22 	bl	8007bac <_fflush_r>
 8005f68:	68a1      	ldr	r1, [r4, #8]
 8005f6a:	4b09      	ldr	r3, [pc, #36]	@ (8005f90 <cleanup_stdio+0x38>)
 8005f6c:	4299      	cmp	r1, r3
 8005f6e:	d002      	beq.n	8005f76 <cleanup_stdio+0x1e>
 8005f70:	4620      	mov	r0, r4
 8005f72:	f001 fe1b 	bl	8007bac <_fflush_r>
 8005f76:	68e1      	ldr	r1, [r4, #12]
 8005f78:	4b06      	ldr	r3, [pc, #24]	@ (8005f94 <cleanup_stdio+0x3c>)
 8005f7a:	4299      	cmp	r1, r3
 8005f7c:	d004      	beq.n	8005f88 <cleanup_stdio+0x30>
 8005f7e:	4620      	mov	r0, r4
 8005f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f84:	f001 be12 	b.w	8007bac <_fflush_r>
 8005f88:	bd10      	pop	{r4, pc}
 8005f8a:	bf00      	nop
 8005f8c:	2000031c 	.word	0x2000031c
 8005f90:	20000384 	.word	0x20000384
 8005f94:	200003ec 	.word	0x200003ec

08005f98 <global_stdio_init.part.0>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc8 <global_stdio_init.part.0+0x30>)
 8005f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8005fcc <global_stdio_init.part.0+0x34>)
 8005f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fd0 <global_stdio_init.part.0+0x38>)
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2104      	movs	r1, #4
 8005fa8:	f7ff ff94 	bl	8005ed4 <std>
 8005fac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	2109      	movs	r1, #9
 8005fb4:	f7ff ff8e 	bl	8005ed4 <std>
 8005fb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc2:	2112      	movs	r1, #18
 8005fc4:	f7ff bf86 	b.w	8005ed4 <std>
 8005fc8:	20000454 	.word	0x20000454
 8005fcc:	2000031c 	.word	0x2000031c
 8005fd0:	08005f41 	.word	0x08005f41

08005fd4 <__sfp_lock_acquire>:
 8005fd4:	4801      	ldr	r0, [pc, #4]	@ (8005fdc <__sfp_lock_acquire+0x8>)
 8005fd6:	f000 b936 	b.w	8006246 <__retarget_lock_acquire_recursive>
 8005fda:	bf00      	nop
 8005fdc:	2000045d 	.word	0x2000045d

08005fe0 <__sfp_lock_release>:
 8005fe0:	4801      	ldr	r0, [pc, #4]	@ (8005fe8 <__sfp_lock_release+0x8>)
 8005fe2:	f000 b931 	b.w	8006248 <__retarget_lock_release_recursive>
 8005fe6:	bf00      	nop
 8005fe8:	2000045d 	.word	0x2000045d

08005fec <__sinit>:
 8005fec:	b510      	push	{r4, lr}
 8005fee:	4604      	mov	r4, r0
 8005ff0:	f7ff fff0 	bl	8005fd4 <__sfp_lock_acquire>
 8005ff4:	6a23      	ldr	r3, [r4, #32]
 8005ff6:	b11b      	cbz	r3, 8006000 <__sinit+0x14>
 8005ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ffc:	f7ff bff0 	b.w	8005fe0 <__sfp_lock_release>
 8006000:	4b04      	ldr	r3, [pc, #16]	@ (8006014 <__sinit+0x28>)
 8006002:	6223      	str	r3, [r4, #32]
 8006004:	4b04      	ldr	r3, [pc, #16]	@ (8006018 <__sinit+0x2c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f5      	bne.n	8005ff8 <__sinit+0xc>
 800600c:	f7ff ffc4 	bl	8005f98 <global_stdio_init.part.0>
 8006010:	e7f2      	b.n	8005ff8 <__sinit+0xc>
 8006012:	bf00      	nop
 8006014:	08005f59 	.word	0x08005f59
 8006018:	20000454 	.word	0x20000454

0800601c <_fwalk_sglue>:
 800601c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006020:	4607      	mov	r7, r0
 8006022:	4688      	mov	r8, r1
 8006024:	4614      	mov	r4, r2
 8006026:	2600      	movs	r6, #0
 8006028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800602c:	f1b9 0901 	subs.w	r9, r9, #1
 8006030:	d505      	bpl.n	800603e <_fwalk_sglue+0x22>
 8006032:	6824      	ldr	r4, [r4, #0]
 8006034:	2c00      	cmp	r4, #0
 8006036:	d1f7      	bne.n	8006028 <_fwalk_sglue+0xc>
 8006038:	4630      	mov	r0, r6
 800603a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800603e:	89ab      	ldrh	r3, [r5, #12]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d907      	bls.n	8006054 <_fwalk_sglue+0x38>
 8006044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006048:	3301      	adds	r3, #1
 800604a:	d003      	beq.n	8006054 <_fwalk_sglue+0x38>
 800604c:	4629      	mov	r1, r5
 800604e:	4638      	mov	r0, r7
 8006050:	47c0      	blx	r8
 8006052:	4306      	orrs	r6, r0
 8006054:	3568      	adds	r5, #104	@ 0x68
 8006056:	e7e9      	b.n	800602c <_fwalk_sglue+0x10>

08006058 <sniprintf>:
 8006058:	b40c      	push	{r2, r3}
 800605a:	b530      	push	{r4, r5, lr}
 800605c:	4b18      	ldr	r3, [pc, #96]	@ (80060c0 <sniprintf+0x68>)
 800605e:	1e0c      	subs	r4, r1, #0
 8006060:	681d      	ldr	r5, [r3, #0]
 8006062:	b09d      	sub	sp, #116	@ 0x74
 8006064:	da08      	bge.n	8006078 <sniprintf+0x20>
 8006066:	238b      	movs	r3, #139	@ 0x8b
 8006068:	602b      	str	r3, [r5, #0]
 800606a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800606e:	b01d      	add	sp, #116	@ 0x74
 8006070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006074:	b002      	add	sp, #8
 8006076:	4770      	bx	lr
 8006078:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800607c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006086:	bf14      	ite	ne
 8006088:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800608c:	4623      	moveq	r3, r4
 800608e:	9304      	str	r3, [sp, #16]
 8006090:	9307      	str	r3, [sp, #28]
 8006092:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006096:	9002      	str	r0, [sp, #8]
 8006098:	9006      	str	r0, [sp, #24]
 800609a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800609e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80060a0:	ab21      	add	r3, sp, #132	@ 0x84
 80060a2:	a902      	add	r1, sp, #8
 80060a4:	4628      	mov	r0, r5
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	f001 fc00 	bl	80078ac <_svfiprintf_r>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	bfbc      	itt	lt
 80060b0:	238b      	movlt	r3, #139	@ 0x8b
 80060b2:	602b      	strlt	r3, [r5, #0]
 80060b4:	2c00      	cmp	r4, #0
 80060b6:	d0da      	beq.n	800606e <sniprintf+0x16>
 80060b8:	9b02      	ldr	r3, [sp, #8]
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	e7d6      	b.n	800606e <sniprintf+0x16>
 80060c0:	20000018 	.word	0x20000018

080060c4 <__sread>:
 80060c4:	b510      	push	{r4, lr}
 80060c6:	460c      	mov	r4, r1
 80060c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060cc:	f000 f86c 	bl	80061a8 <_read_r>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	bfab      	itete	ge
 80060d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060d6:	89a3      	ldrhlt	r3, [r4, #12]
 80060d8:	181b      	addge	r3, r3, r0
 80060da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060de:	bfac      	ite	ge
 80060e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060e2:	81a3      	strhlt	r3, [r4, #12]
 80060e4:	bd10      	pop	{r4, pc}

080060e6 <__swrite>:
 80060e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ea:	461f      	mov	r7, r3
 80060ec:	898b      	ldrh	r3, [r1, #12]
 80060ee:	05db      	lsls	r3, r3, #23
 80060f0:	4605      	mov	r5, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	4616      	mov	r6, r2
 80060f6:	d505      	bpl.n	8006104 <__swrite+0x1e>
 80060f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fc:	2302      	movs	r3, #2
 80060fe:	2200      	movs	r2, #0
 8006100:	f000 f840 	bl	8006184 <_lseek_r>
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800610a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	4632      	mov	r2, r6
 8006112:	463b      	mov	r3, r7
 8006114:	4628      	mov	r0, r5
 8006116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800611a:	f000 b857 	b.w	80061cc <_write_r>

0800611e <__sseek>:
 800611e:	b510      	push	{r4, lr}
 8006120:	460c      	mov	r4, r1
 8006122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006126:	f000 f82d 	bl	8006184 <_lseek_r>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	bf15      	itete	ne
 8006130:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006132:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006136:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800613a:	81a3      	strheq	r3, [r4, #12]
 800613c:	bf18      	it	ne
 800613e:	81a3      	strhne	r3, [r4, #12]
 8006140:	bd10      	pop	{r4, pc}

08006142 <__sclose>:
 8006142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006146:	f000 b80d 	b.w	8006164 <_close_r>

0800614a <memset>:
 800614a:	4402      	add	r2, r0
 800614c:	4603      	mov	r3, r0
 800614e:	4293      	cmp	r3, r2
 8006150:	d100      	bne.n	8006154 <memset+0xa>
 8006152:	4770      	bx	lr
 8006154:	f803 1b01 	strb.w	r1, [r3], #1
 8006158:	e7f9      	b.n	800614e <memset+0x4>
	...

0800615c <_localeconv_r>:
 800615c:	4800      	ldr	r0, [pc, #0]	@ (8006160 <_localeconv_r+0x4>)
 800615e:	4770      	bx	lr
 8006160:	20000158 	.word	0x20000158

08006164 <_close_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	4d06      	ldr	r5, [pc, #24]	@ (8006180 <_close_r+0x1c>)
 8006168:	2300      	movs	r3, #0
 800616a:	4604      	mov	r4, r0
 800616c:	4608      	mov	r0, r1
 800616e:	602b      	str	r3, [r5, #0]
 8006170:	f7fb fa12 	bl	8001598 <_close>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d102      	bne.n	800617e <_close_r+0x1a>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	b103      	cbz	r3, 800617e <_close_r+0x1a>
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	20000458 	.word	0x20000458

08006184 <_lseek_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4d07      	ldr	r5, [pc, #28]	@ (80061a4 <_lseek_r+0x20>)
 8006188:	4604      	mov	r4, r0
 800618a:	4608      	mov	r0, r1
 800618c:	4611      	mov	r1, r2
 800618e:	2200      	movs	r2, #0
 8006190:	602a      	str	r2, [r5, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	f7fb fa27 	bl	80015e6 <_lseek>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_lseek_r+0x1e>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_lseek_r+0x1e>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20000458 	.word	0x20000458

080061a8 <_read_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4d07      	ldr	r5, [pc, #28]	@ (80061c8 <_read_r+0x20>)
 80061ac:	4604      	mov	r4, r0
 80061ae:	4608      	mov	r0, r1
 80061b0:	4611      	mov	r1, r2
 80061b2:	2200      	movs	r2, #0
 80061b4:	602a      	str	r2, [r5, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f7fb f9b5 	bl	8001526 <_read>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_read_r+0x1e>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_read_r+0x1e>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	20000458 	.word	0x20000458

080061cc <_write_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d07      	ldr	r5, [pc, #28]	@ (80061ec <_write_r+0x20>)
 80061d0:	4604      	mov	r4, r0
 80061d2:	4608      	mov	r0, r1
 80061d4:	4611      	mov	r1, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	602a      	str	r2, [r5, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f7fb f9c0 	bl	8001560 <_write>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_write_r+0x1e>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_write_r+0x1e>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000458 	.word	0x20000458

080061f0 <__errno>:
 80061f0:	4b01      	ldr	r3, [pc, #4]	@ (80061f8 <__errno+0x8>)
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	20000018 	.word	0x20000018

080061fc <__libc_init_array>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006234 <__libc_init_array+0x38>)
 8006200:	4c0d      	ldr	r4, [pc, #52]	@ (8006238 <__libc_init_array+0x3c>)
 8006202:	1b64      	subs	r4, r4, r5
 8006204:	10a4      	asrs	r4, r4, #2
 8006206:	2600      	movs	r6, #0
 8006208:	42a6      	cmp	r6, r4
 800620a:	d109      	bne.n	8006220 <__libc_init_array+0x24>
 800620c:	4d0b      	ldr	r5, [pc, #44]	@ (800623c <__libc_init_array+0x40>)
 800620e:	4c0c      	ldr	r4, [pc, #48]	@ (8006240 <__libc_init_array+0x44>)
 8006210:	f002 f86a 	bl	80082e8 <_init>
 8006214:	1b64      	subs	r4, r4, r5
 8006216:	10a4      	asrs	r4, r4, #2
 8006218:	2600      	movs	r6, #0
 800621a:	42a6      	cmp	r6, r4
 800621c:	d105      	bne.n	800622a <__libc_init_array+0x2e>
 800621e:	bd70      	pop	{r4, r5, r6, pc}
 8006220:	f855 3b04 	ldr.w	r3, [r5], #4
 8006224:	4798      	blx	r3
 8006226:	3601      	adds	r6, #1
 8006228:	e7ee      	b.n	8006208 <__libc_init_array+0xc>
 800622a:	f855 3b04 	ldr.w	r3, [r5], #4
 800622e:	4798      	blx	r3
 8006230:	3601      	adds	r6, #1
 8006232:	e7f2      	b.n	800621a <__libc_init_array+0x1e>
 8006234:	080086bc 	.word	0x080086bc
 8006238:	080086bc 	.word	0x080086bc
 800623c:	080086bc 	.word	0x080086bc
 8006240:	080086c0 	.word	0x080086c0

08006244 <__retarget_lock_init_recursive>:
 8006244:	4770      	bx	lr

08006246 <__retarget_lock_acquire_recursive>:
 8006246:	4770      	bx	lr

08006248 <__retarget_lock_release_recursive>:
 8006248:	4770      	bx	lr

0800624a <quorem>:
 800624a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624e:	6903      	ldr	r3, [r0, #16]
 8006250:	690c      	ldr	r4, [r1, #16]
 8006252:	42a3      	cmp	r3, r4
 8006254:	4607      	mov	r7, r0
 8006256:	db7e      	blt.n	8006356 <quorem+0x10c>
 8006258:	3c01      	subs	r4, #1
 800625a:	f101 0814 	add.w	r8, r1, #20
 800625e:	00a3      	lsls	r3, r4, #2
 8006260:	f100 0514 	add.w	r5, r0, #20
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800626a:	9301      	str	r3, [sp, #4]
 800626c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006270:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006274:	3301      	adds	r3, #1
 8006276:	429a      	cmp	r2, r3
 8006278:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800627c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006280:	d32e      	bcc.n	80062e0 <quorem+0x96>
 8006282:	f04f 0a00 	mov.w	sl, #0
 8006286:	46c4      	mov	ip, r8
 8006288:	46ae      	mov	lr, r5
 800628a:	46d3      	mov	fp, sl
 800628c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006290:	b298      	uxth	r0, r3
 8006292:	fb06 a000 	mla	r0, r6, r0, sl
 8006296:	0c02      	lsrs	r2, r0, #16
 8006298:	0c1b      	lsrs	r3, r3, #16
 800629a:	fb06 2303 	mla	r3, r6, r3, r2
 800629e:	f8de 2000 	ldr.w	r2, [lr]
 80062a2:	b280      	uxth	r0, r0
 80062a4:	b292      	uxth	r2, r2
 80062a6:	1a12      	subs	r2, r2, r0
 80062a8:	445a      	add	r2, fp
 80062aa:	f8de 0000 	ldr.w	r0, [lr]
 80062ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80062b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80062bc:	b292      	uxth	r2, r2
 80062be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80062c2:	45e1      	cmp	r9, ip
 80062c4:	f84e 2b04 	str.w	r2, [lr], #4
 80062c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80062cc:	d2de      	bcs.n	800628c <quorem+0x42>
 80062ce:	9b00      	ldr	r3, [sp, #0]
 80062d0:	58eb      	ldr	r3, [r5, r3]
 80062d2:	b92b      	cbnz	r3, 80062e0 <quorem+0x96>
 80062d4:	9b01      	ldr	r3, [sp, #4]
 80062d6:	3b04      	subs	r3, #4
 80062d8:	429d      	cmp	r5, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	d32f      	bcc.n	800633e <quorem+0xf4>
 80062de:	613c      	str	r4, [r7, #16]
 80062e0:	4638      	mov	r0, r7
 80062e2:	f001 f97f 	bl	80075e4 <__mcmp>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	db25      	blt.n	8006336 <quorem+0xec>
 80062ea:	4629      	mov	r1, r5
 80062ec:	2000      	movs	r0, #0
 80062ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80062f2:	f8d1 c000 	ldr.w	ip, [r1]
 80062f6:	fa1f fe82 	uxth.w	lr, r2
 80062fa:	fa1f f38c 	uxth.w	r3, ip
 80062fe:	eba3 030e 	sub.w	r3, r3, lr
 8006302:	4403      	add	r3, r0
 8006304:	0c12      	lsrs	r2, r2, #16
 8006306:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800630a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800630e:	b29b      	uxth	r3, r3
 8006310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006314:	45c1      	cmp	r9, r8
 8006316:	f841 3b04 	str.w	r3, [r1], #4
 800631a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800631e:	d2e6      	bcs.n	80062ee <quorem+0xa4>
 8006320:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006324:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006328:	b922      	cbnz	r2, 8006334 <quorem+0xea>
 800632a:	3b04      	subs	r3, #4
 800632c:	429d      	cmp	r5, r3
 800632e:	461a      	mov	r2, r3
 8006330:	d30b      	bcc.n	800634a <quorem+0x100>
 8006332:	613c      	str	r4, [r7, #16]
 8006334:	3601      	adds	r6, #1
 8006336:	4630      	mov	r0, r6
 8006338:	b003      	add	sp, #12
 800633a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	3b04      	subs	r3, #4
 8006342:	2a00      	cmp	r2, #0
 8006344:	d1cb      	bne.n	80062de <quorem+0x94>
 8006346:	3c01      	subs	r4, #1
 8006348:	e7c6      	b.n	80062d8 <quorem+0x8e>
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	3b04      	subs	r3, #4
 800634e:	2a00      	cmp	r2, #0
 8006350:	d1ef      	bne.n	8006332 <quorem+0xe8>
 8006352:	3c01      	subs	r4, #1
 8006354:	e7ea      	b.n	800632c <quorem+0xe2>
 8006356:	2000      	movs	r0, #0
 8006358:	e7ee      	b.n	8006338 <quorem+0xee>
 800635a:	0000      	movs	r0, r0
 800635c:	0000      	movs	r0, r0
	...

08006360 <_dtoa_r>:
 8006360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	69c7      	ldr	r7, [r0, #28]
 8006366:	b097      	sub	sp, #92	@ 0x5c
 8006368:	ed8d 0b04 	vstr	d0, [sp, #16]
 800636c:	ec55 4b10 	vmov	r4, r5, d0
 8006370:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006372:	9107      	str	r1, [sp, #28]
 8006374:	4681      	mov	r9, r0
 8006376:	920c      	str	r2, [sp, #48]	@ 0x30
 8006378:	9311      	str	r3, [sp, #68]	@ 0x44
 800637a:	b97f      	cbnz	r7, 800639c <_dtoa_r+0x3c>
 800637c:	2010      	movs	r0, #16
 800637e:	f000 fe09 	bl	8006f94 <malloc>
 8006382:	4602      	mov	r2, r0
 8006384:	f8c9 001c 	str.w	r0, [r9, #28]
 8006388:	b920      	cbnz	r0, 8006394 <_dtoa_r+0x34>
 800638a:	4ba9      	ldr	r3, [pc, #676]	@ (8006630 <_dtoa_r+0x2d0>)
 800638c:	21ef      	movs	r1, #239	@ 0xef
 800638e:	48a9      	ldr	r0, [pc, #676]	@ (8006634 <_dtoa_r+0x2d4>)
 8006390:	f001 fc6c 	bl	8007c6c <__assert_func>
 8006394:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006398:	6007      	str	r7, [r0, #0]
 800639a:	60c7      	str	r7, [r0, #12]
 800639c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80063a0:	6819      	ldr	r1, [r3, #0]
 80063a2:	b159      	cbz	r1, 80063bc <_dtoa_r+0x5c>
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	604a      	str	r2, [r1, #4]
 80063a8:	2301      	movs	r3, #1
 80063aa:	4093      	lsls	r3, r2
 80063ac:	608b      	str	r3, [r1, #8]
 80063ae:	4648      	mov	r0, r9
 80063b0:	f000 fee6 	bl	8007180 <_Bfree>
 80063b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	1e2b      	subs	r3, r5, #0
 80063be:	bfb9      	ittee	lt
 80063c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80063c4:	9305      	strlt	r3, [sp, #20]
 80063c6:	2300      	movge	r3, #0
 80063c8:	6033      	strge	r3, [r6, #0]
 80063ca:	9f05      	ldr	r7, [sp, #20]
 80063cc:	4b9a      	ldr	r3, [pc, #616]	@ (8006638 <_dtoa_r+0x2d8>)
 80063ce:	bfbc      	itt	lt
 80063d0:	2201      	movlt	r2, #1
 80063d2:	6032      	strlt	r2, [r6, #0]
 80063d4:	43bb      	bics	r3, r7
 80063d6:	d112      	bne.n	80063fe <_dtoa_r+0x9e>
 80063d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80063da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063e4:	4323      	orrs	r3, r4
 80063e6:	f000 855a 	beq.w	8006e9e <_dtoa_r+0xb3e>
 80063ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800664c <_dtoa_r+0x2ec>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 855c 	beq.w	8006eae <_dtoa_r+0xb4e>
 80063f6:	f10a 0303 	add.w	r3, sl, #3
 80063fa:	f000 bd56 	b.w	8006eaa <_dtoa_r+0xb4a>
 80063fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006402:	2200      	movs	r2, #0
 8006404:	ec51 0b17 	vmov	r0, r1, d7
 8006408:	2300      	movs	r3, #0
 800640a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800640e:	f7fa fb7b 	bl	8000b08 <__aeabi_dcmpeq>
 8006412:	4680      	mov	r8, r0
 8006414:	b158      	cbz	r0, 800642e <_dtoa_r+0xce>
 8006416:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006418:	2301      	movs	r3, #1
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800641e:	b113      	cbz	r3, 8006426 <_dtoa_r+0xc6>
 8006420:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006422:	4b86      	ldr	r3, [pc, #536]	@ (800663c <_dtoa_r+0x2dc>)
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006650 <_dtoa_r+0x2f0>
 800642a:	f000 bd40 	b.w	8006eae <_dtoa_r+0xb4e>
 800642e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006432:	aa14      	add	r2, sp, #80	@ 0x50
 8006434:	a915      	add	r1, sp, #84	@ 0x54
 8006436:	4648      	mov	r0, r9
 8006438:	f001 f984 	bl	8007744 <__d2b>
 800643c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006440:	9002      	str	r0, [sp, #8]
 8006442:	2e00      	cmp	r6, #0
 8006444:	d078      	beq.n	8006538 <_dtoa_r+0x1d8>
 8006446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006448:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800644c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006450:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006454:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006458:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800645c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006460:	4619      	mov	r1, r3
 8006462:	2200      	movs	r2, #0
 8006464:	4b76      	ldr	r3, [pc, #472]	@ (8006640 <_dtoa_r+0x2e0>)
 8006466:	f7f9 ff2f 	bl	80002c8 <__aeabi_dsub>
 800646a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006618 <_dtoa_r+0x2b8>)
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f7fa f8e2 	bl	8000638 <__aeabi_dmul>
 8006474:	a36a      	add	r3, pc, #424	@ (adr r3, 8006620 <_dtoa_r+0x2c0>)
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f7f9 ff27 	bl	80002cc <__adddf3>
 800647e:	4604      	mov	r4, r0
 8006480:	4630      	mov	r0, r6
 8006482:	460d      	mov	r5, r1
 8006484:	f7fa f86e 	bl	8000564 <__aeabi_i2d>
 8006488:	a367      	add	r3, pc, #412	@ (adr r3, 8006628 <_dtoa_r+0x2c8>)
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f7fa f8d3 	bl	8000638 <__aeabi_dmul>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4620      	mov	r0, r4
 8006498:	4629      	mov	r1, r5
 800649a:	f7f9 ff17 	bl	80002cc <__adddf3>
 800649e:	4604      	mov	r4, r0
 80064a0:	460d      	mov	r5, r1
 80064a2:	f7fa fb79 	bl	8000b98 <__aeabi_d2iz>
 80064a6:	2200      	movs	r2, #0
 80064a8:	4607      	mov	r7, r0
 80064aa:	2300      	movs	r3, #0
 80064ac:	4620      	mov	r0, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	f7fa fb34 	bl	8000b1c <__aeabi_dcmplt>
 80064b4:	b140      	cbz	r0, 80064c8 <_dtoa_r+0x168>
 80064b6:	4638      	mov	r0, r7
 80064b8:	f7fa f854 	bl	8000564 <__aeabi_i2d>
 80064bc:	4622      	mov	r2, r4
 80064be:	462b      	mov	r3, r5
 80064c0:	f7fa fb22 	bl	8000b08 <__aeabi_dcmpeq>
 80064c4:	b900      	cbnz	r0, 80064c8 <_dtoa_r+0x168>
 80064c6:	3f01      	subs	r7, #1
 80064c8:	2f16      	cmp	r7, #22
 80064ca:	d852      	bhi.n	8006572 <_dtoa_r+0x212>
 80064cc:	4b5d      	ldr	r3, [pc, #372]	@ (8006644 <_dtoa_r+0x2e4>)
 80064ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064da:	f7fa fb1f 	bl	8000b1c <__aeabi_dcmplt>
 80064de:	2800      	cmp	r0, #0
 80064e0:	d049      	beq.n	8006576 <_dtoa_r+0x216>
 80064e2:	3f01      	subs	r7, #1
 80064e4:	2300      	movs	r3, #0
 80064e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80064e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064ea:	1b9b      	subs	r3, r3, r6
 80064ec:	1e5a      	subs	r2, r3, #1
 80064ee:	bf45      	ittet	mi
 80064f0:	f1c3 0301 	rsbmi	r3, r3, #1
 80064f4:	9300      	strmi	r3, [sp, #0]
 80064f6:	2300      	movpl	r3, #0
 80064f8:	2300      	movmi	r3, #0
 80064fa:	9206      	str	r2, [sp, #24]
 80064fc:	bf54      	ite	pl
 80064fe:	9300      	strpl	r3, [sp, #0]
 8006500:	9306      	strmi	r3, [sp, #24]
 8006502:	2f00      	cmp	r7, #0
 8006504:	db39      	blt.n	800657a <_dtoa_r+0x21a>
 8006506:	9b06      	ldr	r3, [sp, #24]
 8006508:	970d      	str	r7, [sp, #52]	@ 0x34
 800650a:	443b      	add	r3, r7
 800650c:	9306      	str	r3, [sp, #24]
 800650e:	2300      	movs	r3, #0
 8006510:	9308      	str	r3, [sp, #32]
 8006512:	9b07      	ldr	r3, [sp, #28]
 8006514:	2b09      	cmp	r3, #9
 8006516:	d863      	bhi.n	80065e0 <_dtoa_r+0x280>
 8006518:	2b05      	cmp	r3, #5
 800651a:	bfc4      	itt	gt
 800651c:	3b04      	subgt	r3, #4
 800651e:	9307      	strgt	r3, [sp, #28]
 8006520:	9b07      	ldr	r3, [sp, #28]
 8006522:	f1a3 0302 	sub.w	r3, r3, #2
 8006526:	bfcc      	ite	gt
 8006528:	2400      	movgt	r4, #0
 800652a:	2401      	movle	r4, #1
 800652c:	2b03      	cmp	r3, #3
 800652e:	d863      	bhi.n	80065f8 <_dtoa_r+0x298>
 8006530:	e8df f003 	tbb	[pc, r3]
 8006534:	2b375452 	.word	0x2b375452
 8006538:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800653c:	441e      	add	r6, r3
 800653e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006542:	2b20      	cmp	r3, #32
 8006544:	bfc1      	itttt	gt
 8006546:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800654a:	409f      	lslgt	r7, r3
 800654c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006550:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006554:	bfd6      	itet	le
 8006556:	f1c3 0320 	rsble	r3, r3, #32
 800655a:	ea47 0003 	orrgt.w	r0, r7, r3
 800655e:	fa04 f003 	lslle.w	r0, r4, r3
 8006562:	f7f9 ffef 	bl	8000544 <__aeabi_ui2d>
 8006566:	2201      	movs	r2, #1
 8006568:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800656c:	3e01      	subs	r6, #1
 800656e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006570:	e776      	b.n	8006460 <_dtoa_r+0x100>
 8006572:	2301      	movs	r3, #1
 8006574:	e7b7      	b.n	80064e6 <_dtoa_r+0x186>
 8006576:	9010      	str	r0, [sp, #64]	@ 0x40
 8006578:	e7b6      	b.n	80064e8 <_dtoa_r+0x188>
 800657a:	9b00      	ldr	r3, [sp, #0]
 800657c:	1bdb      	subs	r3, r3, r7
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	427b      	negs	r3, r7
 8006582:	9308      	str	r3, [sp, #32]
 8006584:	2300      	movs	r3, #0
 8006586:	930d      	str	r3, [sp, #52]	@ 0x34
 8006588:	e7c3      	b.n	8006512 <_dtoa_r+0x1b2>
 800658a:	2301      	movs	r3, #1
 800658c:	9309      	str	r3, [sp, #36]	@ 0x24
 800658e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006590:	eb07 0b03 	add.w	fp, r7, r3
 8006594:	f10b 0301 	add.w	r3, fp, #1
 8006598:	2b01      	cmp	r3, #1
 800659a:	9303      	str	r3, [sp, #12]
 800659c:	bfb8      	it	lt
 800659e:	2301      	movlt	r3, #1
 80065a0:	e006      	b.n	80065b0 <_dtoa_r+0x250>
 80065a2:	2301      	movs	r3, #1
 80065a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	dd28      	ble.n	80065fe <_dtoa_r+0x29e>
 80065ac:	469b      	mov	fp, r3
 80065ae:	9303      	str	r3, [sp, #12]
 80065b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80065b4:	2100      	movs	r1, #0
 80065b6:	2204      	movs	r2, #4
 80065b8:	f102 0514 	add.w	r5, r2, #20
 80065bc:	429d      	cmp	r5, r3
 80065be:	d926      	bls.n	800660e <_dtoa_r+0x2ae>
 80065c0:	6041      	str	r1, [r0, #4]
 80065c2:	4648      	mov	r0, r9
 80065c4:	f000 fd9c 	bl	8007100 <_Balloc>
 80065c8:	4682      	mov	sl, r0
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d142      	bne.n	8006654 <_dtoa_r+0x2f4>
 80065ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006648 <_dtoa_r+0x2e8>)
 80065d0:	4602      	mov	r2, r0
 80065d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80065d6:	e6da      	b.n	800638e <_dtoa_r+0x2e>
 80065d8:	2300      	movs	r3, #0
 80065da:	e7e3      	b.n	80065a4 <_dtoa_r+0x244>
 80065dc:	2300      	movs	r3, #0
 80065de:	e7d5      	b.n	800658c <_dtoa_r+0x22c>
 80065e0:	2401      	movs	r4, #1
 80065e2:	2300      	movs	r3, #0
 80065e4:	9307      	str	r3, [sp, #28]
 80065e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80065e8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80065ec:	2200      	movs	r2, #0
 80065ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80065f2:	2312      	movs	r3, #18
 80065f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80065f6:	e7db      	b.n	80065b0 <_dtoa_r+0x250>
 80065f8:	2301      	movs	r3, #1
 80065fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80065fc:	e7f4      	b.n	80065e8 <_dtoa_r+0x288>
 80065fe:	f04f 0b01 	mov.w	fp, #1
 8006602:	f8cd b00c 	str.w	fp, [sp, #12]
 8006606:	465b      	mov	r3, fp
 8006608:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800660c:	e7d0      	b.n	80065b0 <_dtoa_r+0x250>
 800660e:	3101      	adds	r1, #1
 8006610:	0052      	lsls	r2, r2, #1
 8006612:	e7d1      	b.n	80065b8 <_dtoa_r+0x258>
 8006614:	f3af 8000 	nop.w
 8006618:	636f4361 	.word	0x636f4361
 800661c:	3fd287a7 	.word	0x3fd287a7
 8006620:	8b60c8b3 	.word	0x8b60c8b3
 8006624:	3fc68a28 	.word	0x3fc68a28
 8006628:	509f79fb 	.word	0x509f79fb
 800662c:	3fd34413 	.word	0x3fd34413
 8006630:	08008381 	.word	0x08008381
 8006634:	08008398 	.word	0x08008398
 8006638:	7ff00000 	.word	0x7ff00000
 800663c:	08008351 	.word	0x08008351
 8006640:	3ff80000 	.word	0x3ff80000
 8006644:	080084e8 	.word	0x080084e8
 8006648:	080083f0 	.word	0x080083f0
 800664c:	0800837d 	.word	0x0800837d
 8006650:	08008350 	.word	0x08008350
 8006654:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006658:	6018      	str	r0, [r3, #0]
 800665a:	9b03      	ldr	r3, [sp, #12]
 800665c:	2b0e      	cmp	r3, #14
 800665e:	f200 80a1 	bhi.w	80067a4 <_dtoa_r+0x444>
 8006662:	2c00      	cmp	r4, #0
 8006664:	f000 809e 	beq.w	80067a4 <_dtoa_r+0x444>
 8006668:	2f00      	cmp	r7, #0
 800666a:	dd33      	ble.n	80066d4 <_dtoa_r+0x374>
 800666c:	4b9c      	ldr	r3, [pc, #624]	@ (80068e0 <_dtoa_r+0x580>)
 800666e:	f007 020f 	and.w	r2, r7, #15
 8006672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006676:	ed93 7b00 	vldr	d7, [r3]
 800667a:	05f8      	lsls	r0, r7, #23
 800667c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006680:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006684:	d516      	bpl.n	80066b4 <_dtoa_r+0x354>
 8006686:	4b97      	ldr	r3, [pc, #604]	@ (80068e4 <_dtoa_r+0x584>)
 8006688:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800668c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006690:	f7fa f8fc 	bl	800088c <__aeabi_ddiv>
 8006694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006698:	f004 040f 	and.w	r4, r4, #15
 800669c:	2603      	movs	r6, #3
 800669e:	4d91      	ldr	r5, [pc, #580]	@ (80068e4 <_dtoa_r+0x584>)
 80066a0:	b954      	cbnz	r4, 80066b8 <_dtoa_r+0x358>
 80066a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80066a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066aa:	f7fa f8ef 	bl	800088c <__aeabi_ddiv>
 80066ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066b2:	e028      	b.n	8006706 <_dtoa_r+0x3a6>
 80066b4:	2602      	movs	r6, #2
 80066b6:	e7f2      	b.n	800669e <_dtoa_r+0x33e>
 80066b8:	07e1      	lsls	r1, r4, #31
 80066ba:	d508      	bpl.n	80066ce <_dtoa_r+0x36e>
 80066bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80066c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066c4:	f7f9 ffb8 	bl	8000638 <__aeabi_dmul>
 80066c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80066cc:	3601      	adds	r6, #1
 80066ce:	1064      	asrs	r4, r4, #1
 80066d0:	3508      	adds	r5, #8
 80066d2:	e7e5      	b.n	80066a0 <_dtoa_r+0x340>
 80066d4:	f000 80af 	beq.w	8006836 <_dtoa_r+0x4d6>
 80066d8:	427c      	negs	r4, r7
 80066da:	4b81      	ldr	r3, [pc, #516]	@ (80068e0 <_dtoa_r+0x580>)
 80066dc:	4d81      	ldr	r5, [pc, #516]	@ (80068e4 <_dtoa_r+0x584>)
 80066de:	f004 020f 	and.w	r2, r4, #15
 80066e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066ee:	f7f9 ffa3 	bl	8000638 <__aeabi_dmul>
 80066f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066f6:	1124      	asrs	r4, r4, #4
 80066f8:	2300      	movs	r3, #0
 80066fa:	2602      	movs	r6, #2
 80066fc:	2c00      	cmp	r4, #0
 80066fe:	f040 808f 	bne.w	8006820 <_dtoa_r+0x4c0>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1d3      	bne.n	80066ae <_dtoa_r+0x34e>
 8006706:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006708:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8094 	beq.w	800683a <_dtoa_r+0x4da>
 8006712:	4b75      	ldr	r3, [pc, #468]	@ (80068e8 <_dtoa_r+0x588>)
 8006714:	2200      	movs	r2, #0
 8006716:	4620      	mov	r0, r4
 8006718:	4629      	mov	r1, r5
 800671a:	f7fa f9ff 	bl	8000b1c <__aeabi_dcmplt>
 800671e:	2800      	cmp	r0, #0
 8006720:	f000 808b 	beq.w	800683a <_dtoa_r+0x4da>
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8087 	beq.w	800683a <_dtoa_r+0x4da>
 800672c:	f1bb 0f00 	cmp.w	fp, #0
 8006730:	dd34      	ble.n	800679c <_dtoa_r+0x43c>
 8006732:	4620      	mov	r0, r4
 8006734:	4b6d      	ldr	r3, [pc, #436]	@ (80068ec <_dtoa_r+0x58c>)
 8006736:	2200      	movs	r2, #0
 8006738:	4629      	mov	r1, r5
 800673a:	f7f9 ff7d 	bl	8000638 <__aeabi_dmul>
 800673e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006742:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006746:	3601      	adds	r6, #1
 8006748:	465c      	mov	r4, fp
 800674a:	4630      	mov	r0, r6
 800674c:	f7f9 ff0a 	bl	8000564 <__aeabi_i2d>
 8006750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006754:	f7f9 ff70 	bl	8000638 <__aeabi_dmul>
 8006758:	4b65      	ldr	r3, [pc, #404]	@ (80068f0 <_dtoa_r+0x590>)
 800675a:	2200      	movs	r2, #0
 800675c:	f7f9 fdb6 	bl	80002cc <__adddf3>
 8006760:	4605      	mov	r5, r0
 8006762:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006766:	2c00      	cmp	r4, #0
 8006768:	d16a      	bne.n	8006840 <_dtoa_r+0x4e0>
 800676a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800676e:	4b61      	ldr	r3, [pc, #388]	@ (80068f4 <_dtoa_r+0x594>)
 8006770:	2200      	movs	r2, #0
 8006772:	f7f9 fda9 	bl	80002c8 <__aeabi_dsub>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800677e:	462a      	mov	r2, r5
 8006780:	4633      	mov	r3, r6
 8006782:	f7fa f9e9 	bl	8000b58 <__aeabi_dcmpgt>
 8006786:	2800      	cmp	r0, #0
 8006788:	f040 8298 	bne.w	8006cbc <_dtoa_r+0x95c>
 800678c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006790:	462a      	mov	r2, r5
 8006792:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006796:	f7fa f9c1 	bl	8000b1c <__aeabi_dcmplt>
 800679a:	bb38      	cbnz	r0, 80067ec <_dtoa_r+0x48c>
 800679c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80067a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f2c0 8157 	blt.w	8006a5a <_dtoa_r+0x6fa>
 80067ac:	2f0e      	cmp	r7, #14
 80067ae:	f300 8154 	bgt.w	8006a5a <_dtoa_r+0x6fa>
 80067b2:	4b4b      	ldr	r3, [pc, #300]	@ (80068e0 <_dtoa_r+0x580>)
 80067b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067b8:	ed93 7b00 	vldr	d7, [r3]
 80067bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067be:	2b00      	cmp	r3, #0
 80067c0:	ed8d 7b00 	vstr	d7, [sp]
 80067c4:	f280 80e5 	bge.w	8006992 <_dtoa_r+0x632>
 80067c8:	9b03      	ldr	r3, [sp, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f300 80e1 	bgt.w	8006992 <_dtoa_r+0x632>
 80067d0:	d10c      	bne.n	80067ec <_dtoa_r+0x48c>
 80067d2:	4b48      	ldr	r3, [pc, #288]	@ (80068f4 <_dtoa_r+0x594>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	ec51 0b17 	vmov	r0, r1, d7
 80067da:	f7f9 ff2d 	bl	8000638 <__aeabi_dmul>
 80067de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067e2:	f7fa f9af 	bl	8000b44 <__aeabi_dcmpge>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	f000 8266 	beq.w	8006cb8 <_dtoa_r+0x958>
 80067ec:	2400      	movs	r4, #0
 80067ee:	4625      	mov	r5, r4
 80067f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067f2:	4656      	mov	r6, sl
 80067f4:	ea6f 0803 	mvn.w	r8, r3
 80067f8:	2700      	movs	r7, #0
 80067fa:	4621      	mov	r1, r4
 80067fc:	4648      	mov	r0, r9
 80067fe:	f000 fcbf 	bl	8007180 <_Bfree>
 8006802:	2d00      	cmp	r5, #0
 8006804:	f000 80bd 	beq.w	8006982 <_dtoa_r+0x622>
 8006808:	b12f      	cbz	r7, 8006816 <_dtoa_r+0x4b6>
 800680a:	42af      	cmp	r7, r5
 800680c:	d003      	beq.n	8006816 <_dtoa_r+0x4b6>
 800680e:	4639      	mov	r1, r7
 8006810:	4648      	mov	r0, r9
 8006812:	f000 fcb5 	bl	8007180 <_Bfree>
 8006816:	4629      	mov	r1, r5
 8006818:	4648      	mov	r0, r9
 800681a:	f000 fcb1 	bl	8007180 <_Bfree>
 800681e:	e0b0      	b.n	8006982 <_dtoa_r+0x622>
 8006820:	07e2      	lsls	r2, r4, #31
 8006822:	d505      	bpl.n	8006830 <_dtoa_r+0x4d0>
 8006824:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006828:	f7f9 ff06 	bl	8000638 <__aeabi_dmul>
 800682c:	3601      	adds	r6, #1
 800682e:	2301      	movs	r3, #1
 8006830:	1064      	asrs	r4, r4, #1
 8006832:	3508      	adds	r5, #8
 8006834:	e762      	b.n	80066fc <_dtoa_r+0x39c>
 8006836:	2602      	movs	r6, #2
 8006838:	e765      	b.n	8006706 <_dtoa_r+0x3a6>
 800683a:	9c03      	ldr	r4, [sp, #12]
 800683c:	46b8      	mov	r8, r7
 800683e:	e784      	b.n	800674a <_dtoa_r+0x3ea>
 8006840:	4b27      	ldr	r3, [pc, #156]	@ (80068e0 <_dtoa_r+0x580>)
 8006842:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006844:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006848:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800684c:	4454      	add	r4, sl
 800684e:	2900      	cmp	r1, #0
 8006850:	d054      	beq.n	80068fc <_dtoa_r+0x59c>
 8006852:	4929      	ldr	r1, [pc, #164]	@ (80068f8 <_dtoa_r+0x598>)
 8006854:	2000      	movs	r0, #0
 8006856:	f7fa f819 	bl	800088c <__aeabi_ddiv>
 800685a:	4633      	mov	r3, r6
 800685c:	462a      	mov	r2, r5
 800685e:	f7f9 fd33 	bl	80002c8 <__aeabi_dsub>
 8006862:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006866:	4656      	mov	r6, sl
 8006868:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800686c:	f7fa f994 	bl	8000b98 <__aeabi_d2iz>
 8006870:	4605      	mov	r5, r0
 8006872:	f7f9 fe77 	bl	8000564 <__aeabi_i2d>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800687e:	f7f9 fd23 	bl	80002c8 <__aeabi_dsub>
 8006882:	3530      	adds	r5, #48	@ 0x30
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800688c:	f806 5b01 	strb.w	r5, [r6], #1
 8006890:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006894:	f7fa f942 	bl	8000b1c <__aeabi_dcmplt>
 8006898:	2800      	cmp	r0, #0
 800689a:	d172      	bne.n	8006982 <_dtoa_r+0x622>
 800689c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068a0:	4911      	ldr	r1, [pc, #68]	@ (80068e8 <_dtoa_r+0x588>)
 80068a2:	2000      	movs	r0, #0
 80068a4:	f7f9 fd10 	bl	80002c8 <__aeabi_dsub>
 80068a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80068ac:	f7fa f936 	bl	8000b1c <__aeabi_dcmplt>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	f040 80b4 	bne.w	8006a1e <_dtoa_r+0x6be>
 80068b6:	42a6      	cmp	r6, r4
 80068b8:	f43f af70 	beq.w	800679c <_dtoa_r+0x43c>
 80068bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80068c0:	4b0a      	ldr	r3, [pc, #40]	@ (80068ec <_dtoa_r+0x58c>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	f7f9 feb8 	bl	8000638 <__aeabi_dmul>
 80068c8:	4b08      	ldr	r3, [pc, #32]	@ (80068ec <_dtoa_r+0x58c>)
 80068ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80068ce:	2200      	movs	r2, #0
 80068d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068d4:	f7f9 feb0 	bl	8000638 <__aeabi_dmul>
 80068d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068dc:	e7c4      	b.n	8006868 <_dtoa_r+0x508>
 80068de:	bf00      	nop
 80068e0:	080084e8 	.word	0x080084e8
 80068e4:	080084c0 	.word	0x080084c0
 80068e8:	3ff00000 	.word	0x3ff00000
 80068ec:	40240000 	.word	0x40240000
 80068f0:	401c0000 	.word	0x401c0000
 80068f4:	40140000 	.word	0x40140000
 80068f8:	3fe00000 	.word	0x3fe00000
 80068fc:	4631      	mov	r1, r6
 80068fe:	4628      	mov	r0, r5
 8006900:	f7f9 fe9a 	bl	8000638 <__aeabi_dmul>
 8006904:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006908:	9413      	str	r4, [sp, #76]	@ 0x4c
 800690a:	4656      	mov	r6, sl
 800690c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006910:	f7fa f942 	bl	8000b98 <__aeabi_d2iz>
 8006914:	4605      	mov	r5, r0
 8006916:	f7f9 fe25 	bl	8000564 <__aeabi_i2d>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006922:	f7f9 fcd1 	bl	80002c8 <__aeabi_dsub>
 8006926:	3530      	adds	r5, #48	@ 0x30
 8006928:	f806 5b01 	strb.w	r5, [r6], #1
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	42a6      	cmp	r6, r4
 8006932:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	d124      	bne.n	8006986 <_dtoa_r+0x626>
 800693c:	4baf      	ldr	r3, [pc, #700]	@ (8006bfc <_dtoa_r+0x89c>)
 800693e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006942:	f7f9 fcc3 	bl	80002cc <__adddf3>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800694e:	f7fa f903 	bl	8000b58 <__aeabi_dcmpgt>
 8006952:	2800      	cmp	r0, #0
 8006954:	d163      	bne.n	8006a1e <_dtoa_r+0x6be>
 8006956:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800695a:	49a8      	ldr	r1, [pc, #672]	@ (8006bfc <_dtoa_r+0x89c>)
 800695c:	2000      	movs	r0, #0
 800695e:	f7f9 fcb3 	bl	80002c8 <__aeabi_dsub>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800696a:	f7fa f8d7 	bl	8000b1c <__aeabi_dcmplt>
 800696e:	2800      	cmp	r0, #0
 8006970:	f43f af14 	beq.w	800679c <_dtoa_r+0x43c>
 8006974:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006976:	1e73      	subs	r3, r6, #1
 8006978:	9313      	str	r3, [sp, #76]	@ 0x4c
 800697a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800697e:	2b30      	cmp	r3, #48	@ 0x30
 8006980:	d0f8      	beq.n	8006974 <_dtoa_r+0x614>
 8006982:	4647      	mov	r7, r8
 8006984:	e03b      	b.n	80069fe <_dtoa_r+0x69e>
 8006986:	4b9e      	ldr	r3, [pc, #632]	@ (8006c00 <_dtoa_r+0x8a0>)
 8006988:	f7f9 fe56 	bl	8000638 <__aeabi_dmul>
 800698c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006990:	e7bc      	b.n	800690c <_dtoa_r+0x5ac>
 8006992:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006996:	4656      	mov	r6, sl
 8006998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800699c:	4620      	mov	r0, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	f7f9 ff74 	bl	800088c <__aeabi_ddiv>
 80069a4:	f7fa f8f8 	bl	8000b98 <__aeabi_d2iz>
 80069a8:	4680      	mov	r8, r0
 80069aa:	f7f9 fddb 	bl	8000564 <__aeabi_i2d>
 80069ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069b2:	f7f9 fe41 	bl	8000638 <__aeabi_dmul>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4620      	mov	r0, r4
 80069bc:	4629      	mov	r1, r5
 80069be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069c2:	f7f9 fc81 	bl	80002c8 <__aeabi_dsub>
 80069c6:	f806 4b01 	strb.w	r4, [r6], #1
 80069ca:	9d03      	ldr	r5, [sp, #12]
 80069cc:	eba6 040a 	sub.w	r4, r6, sl
 80069d0:	42a5      	cmp	r5, r4
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	d133      	bne.n	8006a40 <_dtoa_r+0x6e0>
 80069d8:	f7f9 fc78 	bl	80002cc <__adddf3>
 80069dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069e0:	4604      	mov	r4, r0
 80069e2:	460d      	mov	r5, r1
 80069e4:	f7fa f8b8 	bl	8000b58 <__aeabi_dcmpgt>
 80069e8:	b9c0      	cbnz	r0, 8006a1c <_dtoa_r+0x6bc>
 80069ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ee:	4620      	mov	r0, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	f7fa f889 	bl	8000b08 <__aeabi_dcmpeq>
 80069f6:	b110      	cbz	r0, 80069fe <_dtoa_r+0x69e>
 80069f8:	f018 0f01 	tst.w	r8, #1
 80069fc:	d10e      	bne.n	8006a1c <_dtoa_r+0x6bc>
 80069fe:	9902      	ldr	r1, [sp, #8]
 8006a00:	4648      	mov	r0, r9
 8006a02:	f000 fbbd 	bl	8007180 <_Bfree>
 8006a06:	2300      	movs	r3, #0
 8006a08:	7033      	strb	r3, [r6, #0]
 8006a0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a0c:	3701      	adds	r7, #1
 8006a0e:	601f      	str	r7, [r3, #0]
 8006a10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 824b 	beq.w	8006eae <_dtoa_r+0xb4e>
 8006a18:	601e      	str	r6, [r3, #0]
 8006a1a:	e248      	b.n	8006eae <_dtoa_r+0xb4e>
 8006a1c:	46b8      	mov	r8, r7
 8006a1e:	4633      	mov	r3, r6
 8006a20:	461e      	mov	r6, r3
 8006a22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a26:	2a39      	cmp	r2, #57	@ 0x39
 8006a28:	d106      	bne.n	8006a38 <_dtoa_r+0x6d8>
 8006a2a:	459a      	cmp	sl, r3
 8006a2c:	d1f8      	bne.n	8006a20 <_dtoa_r+0x6c0>
 8006a2e:	2230      	movs	r2, #48	@ 0x30
 8006a30:	f108 0801 	add.w	r8, r8, #1
 8006a34:	f88a 2000 	strb.w	r2, [sl]
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	3201      	adds	r2, #1
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	e7a0      	b.n	8006982 <_dtoa_r+0x622>
 8006a40:	4b6f      	ldr	r3, [pc, #444]	@ (8006c00 <_dtoa_r+0x8a0>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	f7f9 fdf8 	bl	8000638 <__aeabi_dmul>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	460d      	mov	r5, r1
 8006a50:	f7fa f85a 	bl	8000b08 <__aeabi_dcmpeq>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d09f      	beq.n	8006998 <_dtoa_r+0x638>
 8006a58:	e7d1      	b.n	80069fe <_dtoa_r+0x69e>
 8006a5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a5c:	2a00      	cmp	r2, #0
 8006a5e:	f000 80ea 	beq.w	8006c36 <_dtoa_r+0x8d6>
 8006a62:	9a07      	ldr	r2, [sp, #28]
 8006a64:	2a01      	cmp	r2, #1
 8006a66:	f300 80cd 	bgt.w	8006c04 <_dtoa_r+0x8a4>
 8006a6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a6c:	2a00      	cmp	r2, #0
 8006a6e:	f000 80c1 	beq.w	8006bf4 <_dtoa_r+0x894>
 8006a72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006a76:	9c08      	ldr	r4, [sp, #32]
 8006a78:	9e00      	ldr	r6, [sp, #0]
 8006a7a:	9a00      	ldr	r2, [sp, #0]
 8006a7c:	441a      	add	r2, r3
 8006a7e:	9200      	str	r2, [sp, #0]
 8006a80:	9a06      	ldr	r2, [sp, #24]
 8006a82:	2101      	movs	r1, #1
 8006a84:	441a      	add	r2, r3
 8006a86:	4648      	mov	r0, r9
 8006a88:	9206      	str	r2, [sp, #24]
 8006a8a:	f000 fc2d 	bl	80072e8 <__i2b>
 8006a8e:	4605      	mov	r5, r0
 8006a90:	b166      	cbz	r6, 8006aac <_dtoa_r+0x74c>
 8006a92:	9b06      	ldr	r3, [sp, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	dd09      	ble.n	8006aac <_dtoa_r+0x74c>
 8006a98:	42b3      	cmp	r3, r6
 8006a9a:	9a00      	ldr	r2, [sp, #0]
 8006a9c:	bfa8      	it	ge
 8006a9e:	4633      	movge	r3, r6
 8006aa0:	1ad2      	subs	r2, r2, r3
 8006aa2:	9200      	str	r2, [sp, #0]
 8006aa4:	9a06      	ldr	r2, [sp, #24]
 8006aa6:	1af6      	subs	r6, r6, r3
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	9306      	str	r3, [sp, #24]
 8006aac:	9b08      	ldr	r3, [sp, #32]
 8006aae:	b30b      	cbz	r3, 8006af4 <_dtoa_r+0x794>
 8006ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80c6 	beq.w	8006c44 <_dtoa_r+0x8e4>
 8006ab8:	2c00      	cmp	r4, #0
 8006aba:	f000 80c0 	beq.w	8006c3e <_dtoa_r+0x8de>
 8006abe:	4629      	mov	r1, r5
 8006ac0:	4622      	mov	r2, r4
 8006ac2:	4648      	mov	r0, r9
 8006ac4:	f000 fcc8 	bl	8007458 <__pow5mult>
 8006ac8:	9a02      	ldr	r2, [sp, #8]
 8006aca:	4601      	mov	r1, r0
 8006acc:	4605      	mov	r5, r0
 8006ace:	4648      	mov	r0, r9
 8006ad0:	f000 fc20 	bl	8007314 <__multiply>
 8006ad4:	9902      	ldr	r1, [sp, #8]
 8006ad6:	4680      	mov	r8, r0
 8006ad8:	4648      	mov	r0, r9
 8006ada:	f000 fb51 	bl	8007180 <_Bfree>
 8006ade:	9b08      	ldr	r3, [sp, #32]
 8006ae0:	1b1b      	subs	r3, r3, r4
 8006ae2:	9308      	str	r3, [sp, #32]
 8006ae4:	f000 80b1 	beq.w	8006c4a <_dtoa_r+0x8ea>
 8006ae8:	9a08      	ldr	r2, [sp, #32]
 8006aea:	4641      	mov	r1, r8
 8006aec:	4648      	mov	r0, r9
 8006aee:	f000 fcb3 	bl	8007458 <__pow5mult>
 8006af2:	9002      	str	r0, [sp, #8]
 8006af4:	2101      	movs	r1, #1
 8006af6:	4648      	mov	r0, r9
 8006af8:	f000 fbf6 	bl	80072e8 <__i2b>
 8006afc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006afe:	4604      	mov	r4, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 81d8 	beq.w	8006eb6 <_dtoa_r+0xb56>
 8006b06:	461a      	mov	r2, r3
 8006b08:	4601      	mov	r1, r0
 8006b0a:	4648      	mov	r0, r9
 8006b0c:	f000 fca4 	bl	8007458 <__pow5mult>
 8006b10:	9b07      	ldr	r3, [sp, #28]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	4604      	mov	r4, r0
 8006b16:	f300 809f 	bgt.w	8006c58 <_dtoa_r+0x8f8>
 8006b1a:	9b04      	ldr	r3, [sp, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 8097 	bne.w	8006c50 <_dtoa_r+0x8f0>
 8006b22:	9b05      	ldr	r3, [sp, #20]
 8006b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f040 8093 	bne.w	8006c54 <_dtoa_r+0x8f4>
 8006b2e:	9b05      	ldr	r3, [sp, #20]
 8006b30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b34:	0d1b      	lsrs	r3, r3, #20
 8006b36:	051b      	lsls	r3, r3, #20
 8006b38:	b133      	cbz	r3, 8006b48 <_dtoa_r+0x7e8>
 8006b3a:	9b00      	ldr	r3, [sp, #0]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	9b06      	ldr	r3, [sp, #24]
 8006b42:	3301      	adds	r3, #1
 8006b44:	9306      	str	r3, [sp, #24]
 8006b46:	2301      	movs	r3, #1
 8006b48:	9308      	str	r3, [sp, #32]
 8006b4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 81b8 	beq.w	8006ec2 <_dtoa_r+0xb62>
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b58:	6918      	ldr	r0, [r3, #16]
 8006b5a:	f000 fb79 	bl	8007250 <__hi0bits>
 8006b5e:	f1c0 0020 	rsb	r0, r0, #32
 8006b62:	9b06      	ldr	r3, [sp, #24]
 8006b64:	4418      	add	r0, r3
 8006b66:	f010 001f 	ands.w	r0, r0, #31
 8006b6a:	f000 8082 	beq.w	8006c72 <_dtoa_r+0x912>
 8006b6e:	f1c0 0320 	rsb	r3, r0, #32
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	dd73      	ble.n	8006c5e <_dtoa_r+0x8fe>
 8006b76:	9b00      	ldr	r3, [sp, #0]
 8006b78:	f1c0 001c 	rsb	r0, r0, #28
 8006b7c:	4403      	add	r3, r0
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	9b06      	ldr	r3, [sp, #24]
 8006b82:	4403      	add	r3, r0
 8006b84:	4406      	add	r6, r0
 8006b86:	9306      	str	r3, [sp, #24]
 8006b88:	9b00      	ldr	r3, [sp, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	dd05      	ble.n	8006b9a <_dtoa_r+0x83a>
 8006b8e:	9902      	ldr	r1, [sp, #8]
 8006b90:	461a      	mov	r2, r3
 8006b92:	4648      	mov	r0, r9
 8006b94:	f000 fcba 	bl	800750c <__lshift>
 8006b98:	9002      	str	r0, [sp, #8]
 8006b9a:	9b06      	ldr	r3, [sp, #24]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dd05      	ble.n	8006bac <_dtoa_r+0x84c>
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4648      	mov	r0, r9
 8006ba6:	f000 fcb1 	bl	800750c <__lshift>
 8006baa:	4604      	mov	r4, r0
 8006bac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d061      	beq.n	8006c76 <_dtoa_r+0x916>
 8006bb2:	9802      	ldr	r0, [sp, #8]
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	f000 fd15 	bl	80075e4 <__mcmp>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	da5b      	bge.n	8006c76 <_dtoa_r+0x916>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9902      	ldr	r1, [sp, #8]
 8006bc2:	220a      	movs	r2, #10
 8006bc4:	4648      	mov	r0, r9
 8006bc6:	f000 fafd 	bl	80071c4 <__multadd>
 8006bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bcc:	9002      	str	r0, [sp, #8]
 8006bce:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 8177 	beq.w	8006ec6 <_dtoa_r+0xb66>
 8006bd8:	4629      	mov	r1, r5
 8006bda:	2300      	movs	r3, #0
 8006bdc:	220a      	movs	r2, #10
 8006bde:	4648      	mov	r0, r9
 8006be0:	f000 faf0 	bl	80071c4 <__multadd>
 8006be4:	f1bb 0f00 	cmp.w	fp, #0
 8006be8:	4605      	mov	r5, r0
 8006bea:	dc6f      	bgt.n	8006ccc <_dtoa_r+0x96c>
 8006bec:	9b07      	ldr	r3, [sp, #28]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	dc49      	bgt.n	8006c86 <_dtoa_r+0x926>
 8006bf2:	e06b      	b.n	8006ccc <_dtoa_r+0x96c>
 8006bf4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006bfa:	e73c      	b.n	8006a76 <_dtoa_r+0x716>
 8006bfc:	3fe00000 	.word	0x3fe00000
 8006c00:	40240000 	.word	0x40240000
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	1e5c      	subs	r4, r3, #1
 8006c08:	9b08      	ldr	r3, [sp, #32]
 8006c0a:	42a3      	cmp	r3, r4
 8006c0c:	db09      	blt.n	8006c22 <_dtoa_r+0x8c2>
 8006c0e:	1b1c      	subs	r4, r3, r4
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f6bf af30 	bge.w	8006a78 <_dtoa_r+0x718>
 8006c18:	9b00      	ldr	r3, [sp, #0]
 8006c1a:	9a03      	ldr	r2, [sp, #12]
 8006c1c:	1a9e      	subs	r6, r3, r2
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e72b      	b.n	8006a7a <_dtoa_r+0x71a>
 8006c22:	9b08      	ldr	r3, [sp, #32]
 8006c24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006c26:	9408      	str	r4, [sp, #32]
 8006c28:	1ae3      	subs	r3, r4, r3
 8006c2a:	441a      	add	r2, r3
 8006c2c:	9e00      	ldr	r6, [sp, #0]
 8006c2e:	9b03      	ldr	r3, [sp, #12]
 8006c30:	920d      	str	r2, [sp, #52]	@ 0x34
 8006c32:	2400      	movs	r4, #0
 8006c34:	e721      	b.n	8006a7a <_dtoa_r+0x71a>
 8006c36:	9c08      	ldr	r4, [sp, #32]
 8006c38:	9e00      	ldr	r6, [sp, #0]
 8006c3a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006c3c:	e728      	b.n	8006a90 <_dtoa_r+0x730>
 8006c3e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c42:	e751      	b.n	8006ae8 <_dtoa_r+0x788>
 8006c44:	9a08      	ldr	r2, [sp, #32]
 8006c46:	9902      	ldr	r1, [sp, #8]
 8006c48:	e750      	b.n	8006aec <_dtoa_r+0x78c>
 8006c4a:	f8cd 8008 	str.w	r8, [sp, #8]
 8006c4e:	e751      	b.n	8006af4 <_dtoa_r+0x794>
 8006c50:	2300      	movs	r3, #0
 8006c52:	e779      	b.n	8006b48 <_dtoa_r+0x7e8>
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	e777      	b.n	8006b48 <_dtoa_r+0x7e8>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	9308      	str	r3, [sp, #32]
 8006c5c:	e779      	b.n	8006b52 <_dtoa_r+0x7f2>
 8006c5e:	d093      	beq.n	8006b88 <_dtoa_r+0x828>
 8006c60:	9a00      	ldr	r2, [sp, #0]
 8006c62:	331c      	adds	r3, #28
 8006c64:	441a      	add	r2, r3
 8006c66:	9200      	str	r2, [sp, #0]
 8006c68:	9a06      	ldr	r2, [sp, #24]
 8006c6a:	441a      	add	r2, r3
 8006c6c:	441e      	add	r6, r3
 8006c6e:	9206      	str	r2, [sp, #24]
 8006c70:	e78a      	b.n	8006b88 <_dtoa_r+0x828>
 8006c72:	4603      	mov	r3, r0
 8006c74:	e7f4      	b.n	8006c60 <_dtoa_r+0x900>
 8006c76:	9b03      	ldr	r3, [sp, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	46b8      	mov	r8, r7
 8006c7c:	dc20      	bgt.n	8006cc0 <_dtoa_r+0x960>
 8006c7e:	469b      	mov	fp, r3
 8006c80:	9b07      	ldr	r3, [sp, #28]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	dd1e      	ble.n	8006cc4 <_dtoa_r+0x964>
 8006c86:	f1bb 0f00 	cmp.w	fp, #0
 8006c8a:	f47f adb1 	bne.w	80067f0 <_dtoa_r+0x490>
 8006c8e:	4621      	mov	r1, r4
 8006c90:	465b      	mov	r3, fp
 8006c92:	2205      	movs	r2, #5
 8006c94:	4648      	mov	r0, r9
 8006c96:	f000 fa95 	bl	80071c4 <__multadd>
 8006c9a:	4601      	mov	r1, r0
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	9802      	ldr	r0, [sp, #8]
 8006ca0:	f000 fca0 	bl	80075e4 <__mcmp>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	f77f ada3 	ble.w	80067f0 <_dtoa_r+0x490>
 8006caa:	4656      	mov	r6, sl
 8006cac:	2331      	movs	r3, #49	@ 0x31
 8006cae:	f806 3b01 	strb.w	r3, [r6], #1
 8006cb2:	f108 0801 	add.w	r8, r8, #1
 8006cb6:	e59f      	b.n	80067f8 <_dtoa_r+0x498>
 8006cb8:	9c03      	ldr	r4, [sp, #12]
 8006cba:	46b8      	mov	r8, r7
 8006cbc:	4625      	mov	r5, r4
 8006cbe:	e7f4      	b.n	8006caa <_dtoa_r+0x94a>
 8006cc0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 8101 	beq.w	8006ece <_dtoa_r+0xb6e>
 8006ccc:	2e00      	cmp	r6, #0
 8006cce:	dd05      	ble.n	8006cdc <_dtoa_r+0x97c>
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4632      	mov	r2, r6
 8006cd4:	4648      	mov	r0, r9
 8006cd6:	f000 fc19 	bl	800750c <__lshift>
 8006cda:	4605      	mov	r5, r0
 8006cdc:	9b08      	ldr	r3, [sp, #32]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d05c      	beq.n	8006d9c <_dtoa_r+0xa3c>
 8006ce2:	6869      	ldr	r1, [r5, #4]
 8006ce4:	4648      	mov	r0, r9
 8006ce6:	f000 fa0b 	bl	8007100 <_Balloc>
 8006cea:	4606      	mov	r6, r0
 8006cec:	b928      	cbnz	r0, 8006cfa <_dtoa_r+0x99a>
 8006cee:	4b82      	ldr	r3, [pc, #520]	@ (8006ef8 <_dtoa_r+0xb98>)
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006cf6:	f7ff bb4a 	b.w	800638e <_dtoa_r+0x2e>
 8006cfa:	692a      	ldr	r2, [r5, #16]
 8006cfc:	3202      	adds	r2, #2
 8006cfe:	0092      	lsls	r2, r2, #2
 8006d00:	f105 010c 	add.w	r1, r5, #12
 8006d04:	300c      	adds	r0, #12
 8006d06:	f000 ffa3 	bl	8007c50 <memcpy>
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4648      	mov	r0, r9
 8006d10:	f000 fbfc 	bl	800750c <__lshift>
 8006d14:	f10a 0301 	add.w	r3, sl, #1
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	eb0a 030b 	add.w	r3, sl, fp
 8006d1e:	9308      	str	r3, [sp, #32]
 8006d20:	9b04      	ldr	r3, [sp, #16]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	462f      	mov	r7, r5
 8006d28:	9306      	str	r3, [sp, #24]
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	9b00      	ldr	r3, [sp, #0]
 8006d2e:	9802      	ldr	r0, [sp, #8]
 8006d30:	4621      	mov	r1, r4
 8006d32:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006d36:	f7ff fa88 	bl	800624a <quorem>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	3330      	adds	r3, #48	@ 0x30
 8006d3e:	9003      	str	r0, [sp, #12]
 8006d40:	4639      	mov	r1, r7
 8006d42:	9802      	ldr	r0, [sp, #8]
 8006d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d46:	f000 fc4d 	bl	80075e4 <__mcmp>
 8006d4a:	462a      	mov	r2, r5
 8006d4c:	9004      	str	r0, [sp, #16]
 8006d4e:	4621      	mov	r1, r4
 8006d50:	4648      	mov	r0, r9
 8006d52:	f000 fc63 	bl	800761c <__mdiff>
 8006d56:	68c2      	ldr	r2, [r0, #12]
 8006d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	bb02      	cbnz	r2, 8006da0 <_dtoa_r+0xa40>
 8006d5e:	4601      	mov	r1, r0
 8006d60:	9802      	ldr	r0, [sp, #8]
 8006d62:	f000 fc3f 	bl	80075e4 <__mcmp>
 8006d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d68:	4602      	mov	r2, r0
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4648      	mov	r0, r9
 8006d6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d72:	f000 fa05 	bl	8007180 <_Bfree>
 8006d76:	9b07      	ldr	r3, [sp, #28]
 8006d78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006d7a:	9e00      	ldr	r6, [sp, #0]
 8006d7c:	ea42 0103 	orr.w	r1, r2, r3
 8006d80:	9b06      	ldr	r3, [sp, #24]
 8006d82:	4319      	orrs	r1, r3
 8006d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d86:	d10d      	bne.n	8006da4 <_dtoa_r+0xa44>
 8006d88:	2b39      	cmp	r3, #57	@ 0x39
 8006d8a:	d027      	beq.n	8006ddc <_dtoa_r+0xa7c>
 8006d8c:	9a04      	ldr	r2, [sp, #16]
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	dd01      	ble.n	8006d96 <_dtoa_r+0xa36>
 8006d92:	9b03      	ldr	r3, [sp, #12]
 8006d94:	3331      	adds	r3, #49	@ 0x31
 8006d96:	f88b 3000 	strb.w	r3, [fp]
 8006d9a:	e52e      	b.n	80067fa <_dtoa_r+0x49a>
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	e7b9      	b.n	8006d14 <_dtoa_r+0x9b4>
 8006da0:	2201      	movs	r2, #1
 8006da2:	e7e2      	b.n	8006d6a <_dtoa_r+0xa0a>
 8006da4:	9904      	ldr	r1, [sp, #16]
 8006da6:	2900      	cmp	r1, #0
 8006da8:	db04      	blt.n	8006db4 <_dtoa_r+0xa54>
 8006daa:	9807      	ldr	r0, [sp, #28]
 8006dac:	4301      	orrs	r1, r0
 8006dae:	9806      	ldr	r0, [sp, #24]
 8006db0:	4301      	orrs	r1, r0
 8006db2:	d120      	bne.n	8006df6 <_dtoa_r+0xa96>
 8006db4:	2a00      	cmp	r2, #0
 8006db6:	ddee      	ble.n	8006d96 <_dtoa_r+0xa36>
 8006db8:	9902      	ldr	r1, [sp, #8]
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	4648      	mov	r0, r9
 8006dc0:	f000 fba4 	bl	800750c <__lshift>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	9002      	str	r0, [sp, #8]
 8006dc8:	f000 fc0c 	bl	80075e4 <__mcmp>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	9b00      	ldr	r3, [sp, #0]
 8006dd0:	dc02      	bgt.n	8006dd8 <_dtoa_r+0xa78>
 8006dd2:	d1e0      	bne.n	8006d96 <_dtoa_r+0xa36>
 8006dd4:	07da      	lsls	r2, r3, #31
 8006dd6:	d5de      	bpl.n	8006d96 <_dtoa_r+0xa36>
 8006dd8:	2b39      	cmp	r3, #57	@ 0x39
 8006dda:	d1da      	bne.n	8006d92 <_dtoa_r+0xa32>
 8006ddc:	2339      	movs	r3, #57	@ 0x39
 8006dde:	f88b 3000 	strb.w	r3, [fp]
 8006de2:	4633      	mov	r3, r6
 8006de4:	461e      	mov	r6, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006dec:	2a39      	cmp	r2, #57	@ 0x39
 8006dee:	d04e      	beq.n	8006e8e <_dtoa_r+0xb2e>
 8006df0:	3201      	adds	r2, #1
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	e501      	b.n	80067fa <_dtoa_r+0x49a>
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	dd03      	ble.n	8006e02 <_dtoa_r+0xaa2>
 8006dfa:	2b39      	cmp	r3, #57	@ 0x39
 8006dfc:	d0ee      	beq.n	8006ddc <_dtoa_r+0xa7c>
 8006dfe:	3301      	adds	r3, #1
 8006e00:	e7c9      	b.n	8006d96 <_dtoa_r+0xa36>
 8006e02:	9a00      	ldr	r2, [sp, #0]
 8006e04:	9908      	ldr	r1, [sp, #32]
 8006e06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006e0a:	428a      	cmp	r2, r1
 8006e0c:	d028      	beq.n	8006e60 <_dtoa_r+0xb00>
 8006e0e:	9902      	ldr	r1, [sp, #8]
 8006e10:	2300      	movs	r3, #0
 8006e12:	220a      	movs	r2, #10
 8006e14:	4648      	mov	r0, r9
 8006e16:	f000 f9d5 	bl	80071c4 <__multadd>
 8006e1a:	42af      	cmp	r7, r5
 8006e1c:	9002      	str	r0, [sp, #8]
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	f04f 020a 	mov.w	r2, #10
 8006e26:	4639      	mov	r1, r7
 8006e28:	4648      	mov	r0, r9
 8006e2a:	d107      	bne.n	8006e3c <_dtoa_r+0xadc>
 8006e2c:	f000 f9ca 	bl	80071c4 <__multadd>
 8006e30:	4607      	mov	r7, r0
 8006e32:	4605      	mov	r5, r0
 8006e34:	9b00      	ldr	r3, [sp, #0]
 8006e36:	3301      	adds	r3, #1
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	e777      	b.n	8006d2c <_dtoa_r+0x9cc>
 8006e3c:	f000 f9c2 	bl	80071c4 <__multadd>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4607      	mov	r7, r0
 8006e44:	2300      	movs	r3, #0
 8006e46:	220a      	movs	r2, #10
 8006e48:	4648      	mov	r0, r9
 8006e4a:	f000 f9bb 	bl	80071c4 <__multadd>
 8006e4e:	4605      	mov	r5, r0
 8006e50:	e7f0      	b.n	8006e34 <_dtoa_r+0xad4>
 8006e52:	f1bb 0f00 	cmp.w	fp, #0
 8006e56:	bfcc      	ite	gt
 8006e58:	465e      	movgt	r6, fp
 8006e5a:	2601      	movle	r6, #1
 8006e5c:	4456      	add	r6, sl
 8006e5e:	2700      	movs	r7, #0
 8006e60:	9902      	ldr	r1, [sp, #8]
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	2201      	movs	r2, #1
 8006e66:	4648      	mov	r0, r9
 8006e68:	f000 fb50 	bl	800750c <__lshift>
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	9002      	str	r0, [sp, #8]
 8006e70:	f000 fbb8 	bl	80075e4 <__mcmp>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	dcb4      	bgt.n	8006de2 <_dtoa_r+0xa82>
 8006e78:	d102      	bne.n	8006e80 <_dtoa_r+0xb20>
 8006e7a:	9b00      	ldr	r3, [sp, #0]
 8006e7c:	07db      	lsls	r3, r3, #31
 8006e7e:	d4b0      	bmi.n	8006de2 <_dtoa_r+0xa82>
 8006e80:	4633      	mov	r3, r6
 8006e82:	461e      	mov	r6, r3
 8006e84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e88:	2a30      	cmp	r2, #48	@ 0x30
 8006e8a:	d0fa      	beq.n	8006e82 <_dtoa_r+0xb22>
 8006e8c:	e4b5      	b.n	80067fa <_dtoa_r+0x49a>
 8006e8e:	459a      	cmp	sl, r3
 8006e90:	d1a8      	bne.n	8006de4 <_dtoa_r+0xa84>
 8006e92:	2331      	movs	r3, #49	@ 0x31
 8006e94:	f108 0801 	add.w	r8, r8, #1
 8006e98:	f88a 3000 	strb.w	r3, [sl]
 8006e9c:	e4ad      	b.n	80067fa <_dtoa_r+0x49a>
 8006e9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ea0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006efc <_dtoa_r+0xb9c>
 8006ea4:	b11b      	cbz	r3, 8006eae <_dtoa_r+0xb4e>
 8006ea6:	f10a 0308 	add.w	r3, sl, #8
 8006eaa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	4650      	mov	r0, sl
 8006eb0:	b017      	add	sp, #92	@ 0x5c
 8006eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb6:	9b07      	ldr	r3, [sp, #28]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	f77f ae2e 	ble.w	8006b1a <_dtoa_r+0x7ba>
 8006ebe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ec0:	9308      	str	r3, [sp, #32]
 8006ec2:	2001      	movs	r0, #1
 8006ec4:	e64d      	b.n	8006b62 <_dtoa_r+0x802>
 8006ec6:	f1bb 0f00 	cmp.w	fp, #0
 8006eca:	f77f aed9 	ble.w	8006c80 <_dtoa_r+0x920>
 8006ece:	4656      	mov	r6, sl
 8006ed0:	9802      	ldr	r0, [sp, #8]
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	f7ff f9b9 	bl	800624a <quorem>
 8006ed8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006edc:	f806 3b01 	strb.w	r3, [r6], #1
 8006ee0:	eba6 020a 	sub.w	r2, r6, sl
 8006ee4:	4593      	cmp	fp, r2
 8006ee6:	ddb4      	ble.n	8006e52 <_dtoa_r+0xaf2>
 8006ee8:	9902      	ldr	r1, [sp, #8]
 8006eea:	2300      	movs	r3, #0
 8006eec:	220a      	movs	r2, #10
 8006eee:	4648      	mov	r0, r9
 8006ef0:	f000 f968 	bl	80071c4 <__multadd>
 8006ef4:	9002      	str	r0, [sp, #8]
 8006ef6:	e7eb      	b.n	8006ed0 <_dtoa_r+0xb70>
 8006ef8:	080083f0 	.word	0x080083f0
 8006efc:	08008374 	.word	0x08008374

08006f00 <_free_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4605      	mov	r5, r0
 8006f04:	2900      	cmp	r1, #0
 8006f06:	d041      	beq.n	8006f8c <_free_r+0x8c>
 8006f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f0c:	1f0c      	subs	r4, r1, #4
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bfb8      	it	lt
 8006f12:	18e4      	addlt	r4, r4, r3
 8006f14:	f000 f8e8 	bl	80070e8 <__malloc_lock>
 8006f18:	4a1d      	ldr	r2, [pc, #116]	@ (8006f90 <_free_r+0x90>)
 8006f1a:	6813      	ldr	r3, [r2, #0]
 8006f1c:	b933      	cbnz	r3, 8006f2c <_free_r+0x2c>
 8006f1e:	6063      	str	r3, [r4, #4]
 8006f20:	6014      	str	r4, [r2, #0]
 8006f22:	4628      	mov	r0, r5
 8006f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f28:	f000 b8e4 	b.w	80070f4 <__malloc_unlock>
 8006f2c:	42a3      	cmp	r3, r4
 8006f2e:	d908      	bls.n	8006f42 <_free_r+0x42>
 8006f30:	6820      	ldr	r0, [r4, #0]
 8006f32:	1821      	adds	r1, r4, r0
 8006f34:	428b      	cmp	r3, r1
 8006f36:	bf01      	itttt	eq
 8006f38:	6819      	ldreq	r1, [r3, #0]
 8006f3a:	685b      	ldreq	r3, [r3, #4]
 8006f3c:	1809      	addeq	r1, r1, r0
 8006f3e:	6021      	streq	r1, [r4, #0]
 8006f40:	e7ed      	b.n	8006f1e <_free_r+0x1e>
 8006f42:	461a      	mov	r2, r3
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	b10b      	cbz	r3, 8006f4c <_free_r+0x4c>
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	d9fa      	bls.n	8006f42 <_free_r+0x42>
 8006f4c:	6811      	ldr	r1, [r2, #0]
 8006f4e:	1850      	adds	r0, r2, r1
 8006f50:	42a0      	cmp	r0, r4
 8006f52:	d10b      	bne.n	8006f6c <_free_r+0x6c>
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	4401      	add	r1, r0
 8006f58:	1850      	adds	r0, r2, r1
 8006f5a:	4283      	cmp	r3, r0
 8006f5c:	6011      	str	r1, [r2, #0]
 8006f5e:	d1e0      	bne.n	8006f22 <_free_r+0x22>
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	6053      	str	r3, [r2, #4]
 8006f66:	4408      	add	r0, r1
 8006f68:	6010      	str	r0, [r2, #0]
 8006f6a:	e7da      	b.n	8006f22 <_free_r+0x22>
 8006f6c:	d902      	bls.n	8006f74 <_free_r+0x74>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	602b      	str	r3, [r5, #0]
 8006f72:	e7d6      	b.n	8006f22 <_free_r+0x22>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	1821      	adds	r1, r4, r0
 8006f78:	428b      	cmp	r3, r1
 8006f7a:	bf04      	itt	eq
 8006f7c:	6819      	ldreq	r1, [r3, #0]
 8006f7e:	685b      	ldreq	r3, [r3, #4]
 8006f80:	6063      	str	r3, [r4, #4]
 8006f82:	bf04      	itt	eq
 8006f84:	1809      	addeq	r1, r1, r0
 8006f86:	6021      	streq	r1, [r4, #0]
 8006f88:	6054      	str	r4, [r2, #4]
 8006f8a:	e7ca      	b.n	8006f22 <_free_r+0x22>
 8006f8c:	bd38      	pop	{r3, r4, r5, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000464 	.word	0x20000464

08006f94 <malloc>:
 8006f94:	4b02      	ldr	r3, [pc, #8]	@ (8006fa0 <malloc+0xc>)
 8006f96:	4601      	mov	r1, r0
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	f000 b825 	b.w	8006fe8 <_malloc_r>
 8006f9e:	bf00      	nop
 8006fa0:	20000018 	.word	0x20000018

08006fa4 <sbrk_aligned>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	4e0f      	ldr	r6, [pc, #60]	@ (8006fe4 <sbrk_aligned+0x40>)
 8006fa8:	460c      	mov	r4, r1
 8006faa:	6831      	ldr	r1, [r6, #0]
 8006fac:	4605      	mov	r5, r0
 8006fae:	b911      	cbnz	r1, 8006fb6 <sbrk_aligned+0x12>
 8006fb0:	f000 fe3e 	bl	8007c30 <_sbrk_r>
 8006fb4:	6030      	str	r0, [r6, #0]
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4628      	mov	r0, r5
 8006fba:	f000 fe39 	bl	8007c30 <_sbrk_r>
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	d103      	bne.n	8006fca <sbrk_aligned+0x26>
 8006fc2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	bd70      	pop	{r4, r5, r6, pc}
 8006fca:	1cc4      	adds	r4, r0, #3
 8006fcc:	f024 0403 	bic.w	r4, r4, #3
 8006fd0:	42a0      	cmp	r0, r4
 8006fd2:	d0f8      	beq.n	8006fc6 <sbrk_aligned+0x22>
 8006fd4:	1a21      	subs	r1, r4, r0
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f000 fe2a 	bl	8007c30 <_sbrk_r>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d1f2      	bne.n	8006fc6 <sbrk_aligned+0x22>
 8006fe0:	e7ef      	b.n	8006fc2 <sbrk_aligned+0x1e>
 8006fe2:	bf00      	nop
 8006fe4:	20000460 	.word	0x20000460

08006fe8 <_malloc_r>:
 8006fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fec:	1ccd      	adds	r5, r1, #3
 8006fee:	f025 0503 	bic.w	r5, r5, #3
 8006ff2:	3508      	adds	r5, #8
 8006ff4:	2d0c      	cmp	r5, #12
 8006ff6:	bf38      	it	cc
 8006ff8:	250c      	movcc	r5, #12
 8006ffa:	2d00      	cmp	r5, #0
 8006ffc:	4606      	mov	r6, r0
 8006ffe:	db01      	blt.n	8007004 <_malloc_r+0x1c>
 8007000:	42a9      	cmp	r1, r5
 8007002:	d904      	bls.n	800700e <_malloc_r+0x26>
 8007004:	230c      	movs	r3, #12
 8007006:	6033      	str	r3, [r6, #0]
 8007008:	2000      	movs	r0, #0
 800700a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800700e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070e4 <_malloc_r+0xfc>
 8007012:	f000 f869 	bl	80070e8 <__malloc_lock>
 8007016:	f8d8 3000 	ldr.w	r3, [r8]
 800701a:	461c      	mov	r4, r3
 800701c:	bb44      	cbnz	r4, 8007070 <_malloc_r+0x88>
 800701e:	4629      	mov	r1, r5
 8007020:	4630      	mov	r0, r6
 8007022:	f7ff ffbf 	bl	8006fa4 <sbrk_aligned>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	4604      	mov	r4, r0
 800702a:	d158      	bne.n	80070de <_malloc_r+0xf6>
 800702c:	f8d8 4000 	ldr.w	r4, [r8]
 8007030:	4627      	mov	r7, r4
 8007032:	2f00      	cmp	r7, #0
 8007034:	d143      	bne.n	80070be <_malloc_r+0xd6>
 8007036:	2c00      	cmp	r4, #0
 8007038:	d04b      	beq.n	80070d2 <_malloc_r+0xea>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	4639      	mov	r1, r7
 800703e:	4630      	mov	r0, r6
 8007040:	eb04 0903 	add.w	r9, r4, r3
 8007044:	f000 fdf4 	bl	8007c30 <_sbrk_r>
 8007048:	4581      	cmp	r9, r0
 800704a:	d142      	bne.n	80070d2 <_malloc_r+0xea>
 800704c:	6821      	ldr	r1, [r4, #0]
 800704e:	1a6d      	subs	r5, r5, r1
 8007050:	4629      	mov	r1, r5
 8007052:	4630      	mov	r0, r6
 8007054:	f7ff ffa6 	bl	8006fa4 <sbrk_aligned>
 8007058:	3001      	adds	r0, #1
 800705a:	d03a      	beq.n	80070d2 <_malloc_r+0xea>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	442b      	add	r3, r5
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	f8d8 3000 	ldr.w	r3, [r8]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	bb62      	cbnz	r2, 80070c4 <_malloc_r+0xdc>
 800706a:	f8c8 7000 	str.w	r7, [r8]
 800706e:	e00f      	b.n	8007090 <_malloc_r+0xa8>
 8007070:	6822      	ldr	r2, [r4, #0]
 8007072:	1b52      	subs	r2, r2, r5
 8007074:	d420      	bmi.n	80070b8 <_malloc_r+0xd0>
 8007076:	2a0b      	cmp	r2, #11
 8007078:	d917      	bls.n	80070aa <_malloc_r+0xc2>
 800707a:	1961      	adds	r1, r4, r5
 800707c:	42a3      	cmp	r3, r4
 800707e:	6025      	str	r5, [r4, #0]
 8007080:	bf18      	it	ne
 8007082:	6059      	strne	r1, [r3, #4]
 8007084:	6863      	ldr	r3, [r4, #4]
 8007086:	bf08      	it	eq
 8007088:	f8c8 1000 	streq.w	r1, [r8]
 800708c:	5162      	str	r2, [r4, r5]
 800708e:	604b      	str	r3, [r1, #4]
 8007090:	4630      	mov	r0, r6
 8007092:	f000 f82f 	bl	80070f4 <__malloc_unlock>
 8007096:	f104 000b 	add.w	r0, r4, #11
 800709a:	1d23      	adds	r3, r4, #4
 800709c:	f020 0007 	bic.w	r0, r0, #7
 80070a0:	1ac2      	subs	r2, r0, r3
 80070a2:	bf1c      	itt	ne
 80070a4:	1a1b      	subne	r3, r3, r0
 80070a6:	50a3      	strne	r3, [r4, r2]
 80070a8:	e7af      	b.n	800700a <_malloc_r+0x22>
 80070aa:	6862      	ldr	r2, [r4, #4]
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	bf0c      	ite	eq
 80070b0:	f8c8 2000 	streq.w	r2, [r8]
 80070b4:	605a      	strne	r2, [r3, #4]
 80070b6:	e7eb      	b.n	8007090 <_malloc_r+0xa8>
 80070b8:	4623      	mov	r3, r4
 80070ba:	6864      	ldr	r4, [r4, #4]
 80070bc:	e7ae      	b.n	800701c <_malloc_r+0x34>
 80070be:	463c      	mov	r4, r7
 80070c0:	687f      	ldr	r7, [r7, #4]
 80070c2:	e7b6      	b.n	8007032 <_malloc_r+0x4a>
 80070c4:	461a      	mov	r2, r3
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	d1fb      	bne.n	80070c4 <_malloc_r+0xdc>
 80070cc:	2300      	movs	r3, #0
 80070ce:	6053      	str	r3, [r2, #4]
 80070d0:	e7de      	b.n	8007090 <_malloc_r+0xa8>
 80070d2:	230c      	movs	r3, #12
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	4630      	mov	r0, r6
 80070d8:	f000 f80c 	bl	80070f4 <__malloc_unlock>
 80070dc:	e794      	b.n	8007008 <_malloc_r+0x20>
 80070de:	6005      	str	r5, [r0, #0]
 80070e0:	e7d6      	b.n	8007090 <_malloc_r+0xa8>
 80070e2:	bf00      	nop
 80070e4:	20000464 	.word	0x20000464

080070e8 <__malloc_lock>:
 80070e8:	4801      	ldr	r0, [pc, #4]	@ (80070f0 <__malloc_lock+0x8>)
 80070ea:	f7ff b8ac 	b.w	8006246 <__retarget_lock_acquire_recursive>
 80070ee:	bf00      	nop
 80070f0:	2000045c 	.word	0x2000045c

080070f4 <__malloc_unlock>:
 80070f4:	4801      	ldr	r0, [pc, #4]	@ (80070fc <__malloc_unlock+0x8>)
 80070f6:	f7ff b8a7 	b.w	8006248 <__retarget_lock_release_recursive>
 80070fa:	bf00      	nop
 80070fc:	2000045c 	.word	0x2000045c

08007100 <_Balloc>:
 8007100:	b570      	push	{r4, r5, r6, lr}
 8007102:	69c6      	ldr	r6, [r0, #28]
 8007104:	4604      	mov	r4, r0
 8007106:	460d      	mov	r5, r1
 8007108:	b976      	cbnz	r6, 8007128 <_Balloc+0x28>
 800710a:	2010      	movs	r0, #16
 800710c:	f7ff ff42 	bl	8006f94 <malloc>
 8007110:	4602      	mov	r2, r0
 8007112:	61e0      	str	r0, [r4, #28]
 8007114:	b920      	cbnz	r0, 8007120 <_Balloc+0x20>
 8007116:	4b18      	ldr	r3, [pc, #96]	@ (8007178 <_Balloc+0x78>)
 8007118:	4818      	ldr	r0, [pc, #96]	@ (800717c <_Balloc+0x7c>)
 800711a:	216b      	movs	r1, #107	@ 0x6b
 800711c:	f000 fda6 	bl	8007c6c <__assert_func>
 8007120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007124:	6006      	str	r6, [r0, #0]
 8007126:	60c6      	str	r6, [r0, #12]
 8007128:	69e6      	ldr	r6, [r4, #28]
 800712a:	68f3      	ldr	r3, [r6, #12]
 800712c:	b183      	cbz	r3, 8007150 <_Balloc+0x50>
 800712e:	69e3      	ldr	r3, [r4, #28]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007136:	b9b8      	cbnz	r0, 8007168 <_Balloc+0x68>
 8007138:	2101      	movs	r1, #1
 800713a:	fa01 f605 	lsl.w	r6, r1, r5
 800713e:	1d72      	adds	r2, r6, #5
 8007140:	0092      	lsls	r2, r2, #2
 8007142:	4620      	mov	r0, r4
 8007144:	f000 fdb0 	bl	8007ca8 <_calloc_r>
 8007148:	b160      	cbz	r0, 8007164 <_Balloc+0x64>
 800714a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800714e:	e00e      	b.n	800716e <_Balloc+0x6e>
 8007150:	2221      	movs	r2, #33	@ 0x21
 8007152:	2104      	movs	r1, #4
 8007154:	4620      	mov	r0, r4
 8007156:	f000 fda7 	bl	8007ca8 <_calloc_r>
 800715a:	69e3      	ldr	r3, [r4, #28]
 800715c:	60f0      	str	r0, [r6, #12]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e4      	bne.n	800712e <_Balloc+0x2e>
 8007164:	2000      	movs	r0, #0
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	6802      	ldr	r2, [r0, #0]
 800716a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800716e:	2300      	movs	r3, #0
 8007170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007174:	e7f7      	b.n	8007166 <_Balloc+0x66>
 8007176:	bf00      	nop
 8007178:	08008381 	.word	0x08008381
 800717c:	08008401 	.word	0x08008401

08007180 <_Bfree>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	69c6      	ldr	r6, [r0, #28]
 8007184:	4605      	mov	r5, r0
 8007186:	460c      	mov	r4, r1
 8007188:	b976      	cbnz	r6, 80071a8 <_Bfree+0x28>
 800718a:	2010      	movs	r0, #16
 800718c:	f7ff ff02 	bl	8006f94 <malloc>
 8007190:	4602      	mov	r2, r0
 8007192:	61e8      	str	r0, [r5, #28]
 8007194:	b920      	cbnz	r0, 80071a0 <_Bfree+0x20>
 8007196:	4b09      	ldr	r3, [pc, #36]	@ (80071bc <_Bfree+0x3c>)
 8007198:	4809      	ldr	r0, [pc, #36]	@ (80071c0 <_Bfree+0x40>)
 800719a:	218f      	movs	r1, #143	@ 0x8f
 800719c:	f000 fd66 	bl	8007c6c <__assert_func>
 80071a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071a4:	6006      	str	r6, [r0, #0]
 80071a6:	60c6      	str	r6, [r0, #12]
 80071a8:	b13c      	cbz	r4, 80071ba <_Bfree+0x3a>
 80071aa:	69eb      	ldr	r3, [r5, #28]
 80071ac:	6862      	ldr	r2, [r4, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071b4:	6021      	str	r1, [r4, #0]
 80071b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	08008381 	.word	0x08008381
 80071c0:	08008401 	.word	0x08008401

080071c4 <__multadd>:
 80071c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c8:	690d      	ldr	r5, [r1, #16]
 80071ca:	4607      	mov	r7, r0
 80071cc:	460c      	mov	r4, r1
 80071ce:	461e      	mov	r6, r3
 80071d0:	f101 0c14 	add.w	ip, r1, #20
 80071d4:	2000      	movs	r0, #0
 80071d6:	f8dc 3000 	ldr.w	r3, [ip]
 80071da:	b299      	uxth	r1, r3
 80071dc:	fb02 6101 	mla	r1, r2, r1, r6
 80071e0:	0c1e      	lsrs	r6, r3, #16
 80071e2:	0c0b      	lsrs	r3, r1, #16
 80071e4:	fb02 3306 	mla	r3, r2, r6, r3
 80071e8:	b289      	uxth	r1, r1
 80071ea:	3001      	adds	r0, #1
 80071ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071f0:	4285      	cmp	r5, r0
 80071f2:	f84c 1b04 	str.w	r1, [ip], #4
 80071f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071fa:	dcec      	bgt.n	80071d6 <__multadd+0x12>
 80071fc:	b30e      	cbz	r6, 8007242 <__multadd+0x7e>
 80071fe:	68a3      	ldr	r3, [r4, #8]
 8007200:	42ab      	cmp	r3, r5
 8007202:	dc19      	bgt.n	8007238 <__multadd+0x74>
 8007204:	6861      	ldr	r1, [r4, #4]
 8007206:	4638      	mov	r0, r7
 8007208:	3101      	adds	r1, #1
 800720a:	f7ff ff79 	bl	8007100 <_Balloc>
 800720e:	4680      	mov	r8, r0
 8007210:	b928      	cbnz	r0, 800721e <__multadd+0x5a>
 8007212:	4602      	mov	r2, r0
 8007214:	4b0c      	ldr	r3, [pc, #48]	@ (8007248 <__multadd+0x84>)
 8007216:	480d      	ldr	r0, [pc, #52]	@ (800724c <__multadd+0x88>)
 8007218:	21ba      	movs	r1, #186	@ 0xba
 800721a:	f000 fd27 	bl	8007c6c <__assert_func>
 800721e:	6922      	ldr	r2, [r4, #16]
 8007220:	3202      	adds	r2, #2
 8007222:	f104 010c 	add.w	r1, r4, #12
 8007226:	0092      	lsls	r2, r2, #2
 8007228:	300c      	adds	r0, #12
 800722a:	f000 fd11 	bl	8007c50 <memcpy>
 800722e:	4621      	mov	r1, r4
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff ffa5 	bl	8007180 <_Bfree>
 8007236:	4644      	mov	r4, r8
 8007238:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800723c:	3501      	adds	r5, #1
 800723e:	615e      	str	r6, [r3, #20]
 8007240:	6125      	str	r5, [r4, #16]
 8007242:	4620      	mov	r0, r4
 8007244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007248:	080083f0 	.word	0x080083f0
 800724c:	08008401 	.word	0x08008401

08007250 <__hi0bits>:
 8007250:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007254:	4603      	mov	r3, r0
 8007256:	bf36      	itet	cc
 8007258:	0403      	lslcc	r3, r0, #16
 800725a:	2000      	movcs	r0, #0
 800725c:	2010      	movcc	r0, #16
 800725e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007262:	bf3c      	itt	cc
 8007264:	021b      	lslcc	r3, r3, #8
 8007266:	3008      	addcc	r0, #8
 8007268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800726c:	bf3c      	itt	cc
 800726e:	011b      	lslcc	r3, r3, #4
 8007270:	3004      	addcc	r0, #4
 8007272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007276:	bf3c      	itt	cc
 8007278:	009b      	lslcc	r3, r3, #2
 800727a:	3002      	addcc	r0, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	db05      	blt.n	800728c <__hi0bits+0x3c>
 8007280:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007284:	f100 0001 	add.w	r0, r0, #1
 8007288:	bf08      	it	eq
 800728a:	2020      	moveq	r0, #32
 800728c:	4770      	bx	lr

0800728e <__lo0bits>:
 800728e:	6803      	ldr	r3, [r0, #0]
 8007290:	4602      	mov	r2, r0
 8007292:	f013 0007 	ands.w	r0, r3, #7
 8007296:	d00b      	beq.n	80072b0 <__lo0bits+0x22>
 8007298:	07d9      	lsls	r1, r3, #31
 800729a:	d421      	bmi.n	80072e0 <__lo0bits+0x52>
 800729c:	0798      	lsls	r0, r3, #30
 800729e:	bf49      	itett	mi
 80072a0:	085b      	lsrmi	r3, r3, #1
 80072a2:	089b      	lsrpl	r3, r3, #2
 80072a4:	2001      	movmi	r0, #1
 80072a6:	6013      	strmi	r3, [r2, #0]
 80072a8:	bf5c      	itt	pl
 80072aa:	6013      	strpl	r3, [r2, #0]
 80072ac:	2002      	movpl	r0, #2
 80072ae:	4770      	bx	lr
 80072b0:	b299      	uxth	r1, r3
 80072b2:	b909      	cbnz	r1, 80072b8 <__lo0bits+0x2a>
 80072b4:	0c1b      	lsrs	r3, r3, #16
 80072b6:	2010      	movs	r0, #16
 80072b8:	b2d9      	uxtb	r1, r3
 80072ba:	b909      	cbnz	r1, 80072c0 <__lo0bits+0x32>
 80072bc:	3008      	adds	r0, #8
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	0719      	lsls	r1, r3, #28
 80072c2:	bf04      	itt	eq
 80072c4:	091b      	lsreq	r3, r3, #4
 80072c6:	3004      	addeq	r0, #4
 80072c8:	0799      	lsls	r1, r3, #30
 80072ca:	bf04      	itt	eq
 80072cc:	089b      	lsreq	r3, r3, #2
 80072ce:	3002      	addeq	r0, #2
 80072d0:	07d9      	lsls	r1, r3, #31
 80072d2:	d403      	bmi.n	80072dc <__lo0bits+0x4e>
 80072d4:	085b      	lsrs	r3, r3, #1
 80072d6:	f100 0001 	add.w	r0, r0, #1
 80072da:	d003      	beq.n	80072e4 <__lo0bits+0x56>
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	4770      	bx	lr
 80072e0:	2000      	movs	r0, #0
 80072e2:	4770      	bx	lr
 80072e4:	2020      	movs	r0, #32
 80072e6:	4770      	bx	lr

080072e8 <__i2b>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	460c      	mov	r4, r1
 80072ec:	2101      	movs	r1, #1
 80072ee:	f7ff ff07 	bl	8007100 <_Balloc>
 80072f2:	4602      	mov	r2, r0
 80072f4:	b928      	cbnz	r0, 8007302 <__i2b+0x1a>
 80072f6:	4b05      	ldr	r3, [pc, #20]	@ (800730c <__i2b+0x24>)
 80072f8:	4805      	ldr	r0, [pc, #20]	@ (8007310 <__i2b+0x28>)
 80072fa:	f240 1145 	movw	r1, #325	@ 0x145
 80072fe:	f000 fcb5 	bl	8007c6c <__assert_func>
 8007302:	2301      	movs	r3, #1
 8007304:	6144      	str	r4, [r0, #20]
 8007306:	6103      	str	r3, [r0, #16]
 8007308:	bd10      	pop	{r4, pc}
 800730a:	bf00      	nop
 800730c:	080083f0 	.word	0x080083f0
 8007310:	08008401 	.word	0x08008401

08007314 <__multiply>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	4617      	mov	r7, r2
 800731a:	690a      	ldr	r2, [r1, #16]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	429a      	cmp	r2, r3
 8007320:	bfa8      	it	ge
 8007322:	463b      	movge	r3, r7
 8007324:	4689      	mov	r9, r1
 8007326:	bfa4      	itt	ge
 8007328:	460f      	movge	r7, r1
 800732a:	4699      	movge	r9, r3
 800732c:	693d      	ldr	r5, [r7, #16]
 800732e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	eb05 060a 	add.w	r6, r5, sl
 800733a:	42b3      	cmp	r3, r6
 800733c:	b085      	sub	sp, #20
 800733e:	bfb8      	it	lt
 8007340:	3101      	addlt	r1, #1
 8007342:	f7ff fedd 	bl	8007100 <_Balloc>
 8007346:	b930      	cbnz	r0, 8007356 <__multiply+0x42>
 8007348:	4602      	mov	r2, r0
 800734a:	4b41      	ldr	r3, [pc, #260]	@ (8007450 <__multiply+0x13c>)
 800734c:	4841      	ldr	r0, [pc, #260]	@ (8007454 <__multiply+0x140>)
 800734e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007352:	f000 fc8b 	bl	8007c6c <__assert_func>
 8007356:	f100 0414 	add.w	r4, r0, #20
 800735a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800735e:	4623      	mov	r3, r4
 8007360:	2200      	movs	r2, #0
 8007362:	4573      	cmp	r3, lr
 8007364:	d320      	bcc.n	80073a8 <__multiply+0x94>
 8007366:	f107 0814 	add.w	r8, r7, #20
 800736a:	f109 0114 	add.w	r1, r9, #20
 800736e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007372:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007376:	9302      	str	r3, [sp, #8]
 8007378:	1beb      	subs	r3, r5, r7
 800737a:	3b15      	subs	r3, #21
 800737c:	f023 0303 	bic.w	r3, r3, #3
 8007380:	3304      	adds	r3, #4
 8007382:	3715      	adds	r7, #21
 8007384:	42bd      	cmp	r5, r7
 8007386:	bf38      	it	cc
 8007388:	2304      	movcc	r3, #4
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	9b02      	ldr	r3, [sp, #8]
 800738e:	9103      	str	r1, [sp, #12]
 8007390:	428b      	cmp	r3, r1
 8007392:	d80c      	bhi.n	80073ae <__multiply+0x9a>
 8007394:	2e00      	cmp	r6, #0
 8007396:	dd03      	ble.n	80073a0 <__multiply+0x8c>
 8007398:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800739c:	2b00      	cmp	r3, #0
 800739e:	d055      	beq.n	800744c <__multiply+0x138>
 80073a0:	6106      	str	r6, [r0, #16]
 80073a2:	b005      	add	sp, #20
 80073a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a8:	f843 2b04 	str.w	r2, [r3], #4
 80073ac:	e7d9      	b.n	8007362 <__multiply+0x4e>
 80073ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80073b2:	f1ba 0f00 	cmp.w	sl, #0
 80073b6:	d01f      	beq.n	80073f8 <__multiply+0xe4>
 80073b8:	46c4      	mov	ip, r8
 80073ba:	46a1      	mov	r9, r4
 80073bc:	2700      	movs	r7, #0
 80073be:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073c2:	f8d9 3000 	ldr.w	r3, [r9]
 80073c6:	fa1f fb82 	uxth.w	fp, r2
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80073d0:	443b      	add	r3, r7
 80073d2:	f8d9 7000 	ldr.w	r7, [r9]
 80073d6:	0c12      	lsrs	r2, r2, #16
 80073d8:	0c3f      	lsrs	r7, r7, #16
 80073da:	fb0a 7202 	mla	r2, sl, r2, r7
 80073de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073e8:	4565      	cmp	r5, ip
 80073ea:	f849 3b04 	str.w	r3, [r9], #4
 80073ee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80073f2:	d8e4      	bhi.n	80073be <__multiply+0xaa>
 80073f4:	9b01      	ldr	r3, [sp, #4]
 80073f6:	50e7      	str	r7, [r4, r3]
 80073f8:	9b03      	ldr	r3, [sp, #12]
 80073fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80073fe:	3104      	adds	r1, #4
 8007400:	f1b9 0f00 	cmp.w	r9, #0
 8007404:	d020      	beq.n	8007448 <__multiply+0x134>
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	4647      	mov	r7, r8
 800740a:	46a4      	mov	ip, r4
 800740c:	f04f 0a00 	mov.w	sl, #0
 8007410:	f8b7 b000 	ldrh.w	fp, [r7]
 8007414:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007418:	fb09 220b 	mla	r2, r9, fp, r2
 800741c:	4452      	add	r2, sl
 800741e:	b29b      	uxth	r3, r3
 8007420:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007424:	f84c 3b04 	str.w	r3, [ip], #4
 8007428:	f857 3b04 	ldr.w	r3, [r7], #4
 800742c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007430:	f8bc 3000 	ldrh.w	r3, [ip]
 8007434:	fb09 330a 	mla	r3, r9, sl, r3
 8007438:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800743c:	42bd      	cmp	r5, r7
 800743e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007442:	d8e5      	bhi.n	8007410 <__multiply+0xfc>
 8007444:	9a01      	ldr	r2, [sp, #4]
 8007446:	50a3      	str	r3, [r4, r2]
 8007448:	3404      	adds	r4, #4
 800744a:	e79f      	b.n	800738c <__multiply+0x78>
 800744c:	3e01      	subs	r6, #1
 800744e:	e7a1      	b.n	8007394 <__multiply+0x80>
 8007450:	080083f0 	.word	0x080083f0
 8007454:	08008401 	.word	0x08008401

08007458 <__pow5mult>:
 8007458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800745c:	4615      	mov	r5, r2
 800745e:	f012 0203 	ands.w	r2, r2, #3
 8007462:	4607      	mov	r7, r0
 8007464:	460e      	mov	r6, r1
 8007466:	d007      	beq.n	8007478 <__pow5mult+0x20>
 8007468:	4c25      	ldr	r4, [pc, #148]	@ (8007500 <__pow5mult+0xa8>)
 800746a:	3a01      	subs	r2, #1
 800746c:	2300      	movs	r3, #0
 800746e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007472:	f7ff fea7 	bl	80071c4 <__multadd>
 8007476:	4606      	mov	r6, r0
 8007478:	10ad      	asrs	r5, r5, #2
 800747a:	d03d      	beq.n	80074f8 <__pow5mult+0xa0>
 800747c:	69fc      	ldr	r4, [r7, #28]
 800747e:	b97c      	cbnz	r4, 80074a0 <__pow5mult+0x48>
 8007480:	2010      	movs	r0, #16
 8007482:	f7ff fd87 	bl	8006f94 <malloc>
 8007486:	4602      	mov	r2, r0
 8007488:	61f8      	str	r0, [r7, #28]
 800748a:	b928      	cbnz	r0, 8007498 <__pow5mult+0x40>
 800748c:	4b1d      	ldr	r3, [pc, #116]	@ (8007504 <__pow5mult+0xac>)
 800748e:	481e      	ldr	r0, [pc, #120]	@ (8007508 <__pow5mult+0xb0>)
 8007490:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007494:	f000 fbea 	bl	8007c6c <__assert_func>
 8007498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800749c:	6004      	str	r4, [r0, #0]
 800749e:	60c4      	str	r4, [r0, #12]
 80074a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80074a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074a8:	b94c      	cbnz	r4, 80074be <__pow5mult+0x66>
 80074aa:	f240 2171 	movw	r1, #625	@ 0x271
 80074ae:	4638      	mov	r0, r7
 80074b0:	f7ff ff1a 	bl	80072e8 <__i2b>
 80074b4:	2300      	movs	r3, #0
 80074b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80074ba:	4604      	mov	r4, r0
 80074bc:	6003      	str	r3, [r0, #0]
 80074be:	f04f 0900 	mov.w	r9, #0
 80074c2:	07eb      	lsls	r3, r5, #31
 80074c4:	d50a      	bpl.n	80074dc <__pow5mult+0x84>
 80074c6:	4631      	mov	r1, r6
 80074c8:	4622      	mov	r2, r4
 80074ca:	4638      	mov	r0, r7
 80074cc:	f7ff ff22 	bl	8007314 <__multiply>
 80074d0:	4631      	mov	r1, r6
 80074d2:	4680      	mov	r8, r0
 80074d4:	4638      	mov	r0, r7
 80074d6:	f7ff fe53 	bl	8007180 <_Bfree>
 80074da:	4646      	mov	r6, r8
 80074dc:	106d      	asrs	r5, r5, #1
 80074de:	d00b      	beq.n	80074f8 <__pow5mult+0xa0>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	b938      	cbnz	r0, 80074f4 <__pow5mult+0x9c>
 80074e4:	4622      	mov	r2, r4
 80074e6:	4621      	mov	r1, r4
 80074e8:	4638      	mov	r0, r7
 80074ea:	f7ff ff13 	bl	8007314 <__multiply>
 80074ee:	6020      	str	r0, [r4, #0]
 80074f0:	f8c0 9000 	str.w	r9, [r0]
 80074f4:	4604      	mov	r4, r0
 80074f6:	e7e4      	b.n	80074c2 <__pow5mult+0x6a>
 80074f8:	4630      	mov	r0, r6
 80074fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fe:	bf00      	nop
 8007500:	080084b4 	.word	0x080084b4
 8007504:	08008381 	.word	0x08008381
 8007508:	08008401 	.word	0x08008401

0800750c <__lshift>:
 800750c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007510:	460c      	mov	r4, r1
 8007512:	6849      	ldr	r1, [r1, #4]
 8007514:	6923      	ldr	r3, [r4, #16]
 8007516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800751a:	68a3      	ldr	r3, [r4, #8]
 800751c:	4607      	mov	r7, r0
 800751e:	4691      	mov	r9, r2
 8007520:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007524:	f108 0601 	add.w	r6, r8, #1
 8007528:	42b3      	cmp	r3, r6
 800752a:	db0b      	blt.n	8007544 <__lshift+0x38>
 800752c:	4638      	mov	r0, r7
 800752e:	f7ff fde7 	bl	8007100 <_Balloc>
 8007532:	4605      	mov	r5, r0
 8007534:	b948      	cbnz	r0, 800754a <__lshift+0x3e>
 8007536:	4602      	mov	r2, r0
 8007538:	4b28      	ldr	r3, [pc, #160]	@ (80075dc <__lshift+0xd0>)
 800753a:	4829      	ldr	r0, [pc, #164]	@ (80075e0 <__lshift+0xd4>)
 800753c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007540:	f000 fb94 	bl	8007c6c <__assert_func>
 8007544:	3101      	adds	r1, #1
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	e7ee      	b.n	8007528 <__lshift+0x1c>
 800754a:	2300      	movs	r3, #0
 800754c:	f100 0114 	add.w	r1, r0, #20
 8007550:	f100 0210 	add.w	r2, r0, #16
 8007554:	4618      	mov	r0, r3
 8007556:	4553      	cmp	r3, sl
 8007558:	db33      	blt.n	80075c2 <__lshift+0xb6>
 800755a:	6920      	ldr	r0, [r4, #16]
 800755c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007560:	f104 0314 	add.w	r3, r4, #20
 8007564:	f019 091f 	ands.w	r9, r9, #31
 8007568:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800756c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007570:	d02b      	beq.n	80075ca <__lshift+0xbe>
 8007572:	f1c9 0e20 	rsb	lr, r9, #32
 8007576:	468a      	mov	sl, r1
 8007578:	2200      	movs	r2, #0
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	fa00 f009 	lsl.w	r0, r0, r9
 8007580:	4310      	orrs	r0, r2
 8007582:	f84a 0b04 	str.w	r0, [sl], #4
 8007586:	f853 2b04 	ldr.w	r2, [r3], #4
 800758a:	459c      	cmp	ip, r3
 800758c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007590:	d8f3      	bhi.n	800757a <__lshift+0x6e>
 8007592:	ebac 0304 	sub.w	r3, ip, r4
 8007596:	3b15      	subs	r3, #21
 8007598:	f023 0303 	bic.w	r3, r3, #3
 800759c:	3304      	adds	r3, #4
 800759e:	f104 0015 	add.w	r0, r4, #21
 80075a2:	4560      	cmp	r0, ip
 80075a4:	bf88      	it	hi
 80075a6:	2304      	movhi	r3, #4
 80075a8:	50ca      	str	r2, [r1, r3]
 80075aa:	b10a      	cbz	r2, 80075b0 <__lshift+0xa4>
 80075ac:	f108 0602 	add.w	r6, r8, #2
 80075b0:	3e01      	subs	r6, #1
 80075b2:	4638      	mov	r0, r7
 80075b4:	612e      	str	r6, [r5, #16]
 80075b6:	4621      	mov	r1, r4
 80075b8:	f7ff fde2 	bl	8007180 <_Bfree>
 80075bc:	4628      	mov	r0, r5
 80075be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80075c6:	3301      	adds	r3, #1
 80075c8:	e7c5      	b.n	8007556 <__lshift+0x4a>
 80075ca:	3904      	subs	r1, #4
 80075cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80075d4:	459c      	cmp	ip, r3
 80075d6:	d8f9      	bhi.n	80075cc <__lshift+0xc0>
 80075d8:	e7ea      	b.n	80075b0 <__lshift+0xa4>
 80075da:	bf00      	nop
 80075dc:	080083f0 	.word	0x080083f0
 80075e0:	08008401 	.word	0x08008401

080075e4 <__mcmp>:
 80075e4:	690a      	ldr	r2, [r1, #16]
 80075e6:	4603      	mov	r3, r0
 80075e8:	6900      	ldr	r0, [r0, #16]
 80075ea:	1a80      	subs	r0, r0, r2
 80075ec:	b530      	push	{r4, r5, lr}
 80075ee:	d10e      	bne.n	800760e <__mcmp+0x2a>
 80075f0:	3314      	adds	r3, #20
 80075f2:	3114      	adds	r1, #20
 80075f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80075f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007600:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007604:	4295      	cmp	r5, r2
 8007606:	d003      	beq.n	8007610 <__mcmp+0x2c>
 8007608:	d205      	bcs.n	8007616 <__mcmp+0x32>
 800760a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800760e:	bd30      	pop	{r4, r5, pc}
 8007610:	42a3      	cmp	r3, r4
 8007612:	d3f3      	bcc.n	80075fc <__mcmp+0x18>
 8007614:	e7fb      	b.n	800760e <__mcmp+0x2a>
 8007616:	2001      	movs	r0, #1
 8007618:	e7f9      	b.n	800760e <__mcmp+0x2a>
	...

0800761c <__mdiff>:
 800761c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007620:	4689      	mov	r9, r1
 8007622:	4606      	mov	r6, r0
 8007624:	4611      	mov	r1, r2
 8007626:	4648      	mov	r0, r9
 8007628:	4614      	mov	r4, r2
 800762a:	f7ff ffdb 	bl	80075e4 <__mcmp>
 800762e:	1e05      	subs	r5, r0, #0
 8007630:	d112      	bne.n	8007658 <__mdiff+0x3c>
 8007632:	4629      	mov	r1, r5
 8007634:	4630      	mov	r0, r6
 8007636:	f7ff fd63 	bl	8007100 <_Balloc>
 800763a:	4602      	mov	r2, r0
 800763c:	b928      	cbnz	r0, 800764a <__mdiff+0x2e>
 800763e:	4b3f      	ldr	r3, [pc, #252]	@ (800773c <__mdiff+0x120>)
 8007640:	f240 2137 	movw	r1, #567	@ 0x237
 8007644:	483e      	ldr	r0, [pc, #248]	@ (8007740 <__mdiff+0x124>)
 8007646:	f000 fb11 	bl	8007c6c <__assert_func>
 800764a:	2301      	movs	r3, #1
 800764c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007650:	4610      	mov	r0, r2
 8007652:	b003      	add	sp, #12
 8007654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007658:	bfbc      	itt	lt
 800765a:	464b      	movlt	r3, r9
 800765c:	46a1      	movlt	r9, r4
 800765e:	4630      	mov	r0, r6
 8007660:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007664:	bfba      	itte	lt
 8007666:	461c      	movlt	r4, r3
 8007668:	2501      	movlt	r5, #1
 800766a:	2500      	movge	r5, #0
 800766c:	f7ff fd48 	bl	8007100 <_Balloc>
 8007670:	4602      	mov	r2, r0
 8007672:	b918      	cbnz	r0, 800767c <__mdiff+0x60>
 8007674:	4b31      	ldr	r3, [pc, #196]	@ (800773c <__mdiff+0x120>)
 8007676:	f240 2145 	movw	r1, #581	@ 0x245
 800767a:	e7e3      	b.n	8007644 <__mdiff+0x28>
 800767c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007680:	6926      	ldr	r6, [r4, #16]
 8007682:	60c5      	str	r5, [r0, #12]
 8007684:	f109 0310 	add.w	r3, r9, #16
 8007688:	f109 0514 	add.w	r5, r9, #20
 800768c:	f104 0e14 	add.w	lr, r4, #20
 8007690:	f100 0b14 	add.w	fp, r0, #20
 8007694:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007698:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	46d9      	mov	r9, fp
 80076a0:	f04f 0c00 	mov.w	ip, #0
 80076a4:	9b01      	ldr	r3, [sp, #4]
 80076a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80076aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	fa1f f38a 	uxth.w	r3, sl
 80076b4:	4619      	mov	r1, r3
 80076b6:	b283      	uxth	r3, r0
 80076b8:	1acb      	subs	r3, r1, r3
 80076ba:	0c00      	lsrs	r0, r0, #16
 80076bc:	4463      	add	r3, ip
 80076be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80076c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80076cc:	4576      	cmp	r6, lr
 80076ce:	f849 3b04 	str.w	r3, [r9], #4
 80076d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076d6:	d8e5      	bhi.n	80076a4 <__mdiff+0x88>
 80076d8:	1b33      	subs	r3, r6, r4
 80076da:	3b15      	subs	r3, #21
 80076dc:	f023 0303 	bic.w	r3, r3, #3
 80076e0:	3415      	adds	r4, #21
 80076e2:	3304      	adds	r3, #4
 80076e4:	42a6      	cmp	r6, r4
 80076e6:	bf38      	it	cc
 80076e8:	2304      	movcc	r3, #4
 80076ea:	441d      	add	r5, r3
 80076ec:	445b      	add	r3, fp
 80076ee:	461e      	mov	r6, r3
 80076f0:	462c      	mov	r4, r5
 80076f2:	4544      	cmp	r4, r8
 80076f4:	d30e      	bcc.n	8007714 <__mdiff+0xf8>
 80076f6:	f108 0103 	add.w	r1, r8, #3
 80076fa:	1b49      	subs	r1, r1, r5
 80076fc:	f021 0103 	bic.w	r1, r1, #3
 8007700:	3d03      	subs	r5, #3
 8007702:	45a8      	cmp	r8, r5
 8007704:	bf38      	it	cc
 8007706:	2100      	movcc	r1, #0
 8007708:	440b      	add	r3, r1
 800770a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800770e:	b191      	cbz	r1, 8007736 <__mdiff+0x11a>
 8007710:	6117      	str	r7, [r2, #16]
 8007712:	e79d      	b.n	8007650 <__mdiff+0x34>
 8007714:	f854 1b04 	ldr.w	r1, [r4], #4
 8007718:	46e6      	mov	lr, ip
 800771a:	0c08      	lsrs	r0, r1, #16
 800771c:	fa1c fc81 	uxtah	ip, ip, r1
 8007720:	4471      	add	r1, lr
 8007722:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007726:	b289      	uxth	r1, r1
 8007728:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800772c:	f846 1b04 	str.w	r1, [r6], #4
 8007730:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007734:	e7dd      	b.n	80076f2 <__mdiff+0xd6>
 8007736:	3f01      	subs	r7, #1
 8007738:	e7e7      	b.n	800770a <__mdiff+0xee>
 800773a:	bf00      	nop
 800773c:	080083f0 	.word	0x080083f0
 8007740:	08008401 	.word	0x08008401

08007744 <__d2b>:
 8007744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007748:	460f      	mov	r7, r1
 800774a:	2101      	movs	r1, #1
 800774c:	ec59 8b10 	vmov	r8, r9, d0
 8007750:	4616      	mov	r6, r2
 8007752:	f7ff fcd5 	bl	8007100 <_Balloc>
 8007756:	4604      	mov	r4, r0
 8007758:	b930      	cbnz	r0, 8007768 <__d2b+0x24>
 800775a:	4602      	mov	r2, r0
 800775c:	4b23      	ldr	r3, [pc, #140]	@ (80077ec <__d2b+0xa8>)
 800775e:	4824      	ldr	r0, [pc, #144]	@ (80077f0 <__d2b+0xac>)
 8007760:	f240 310f 	movw	r1, #783	@ 0x30f
 8007764:	f000 fa82 	bl	8007c6c <__assert_func>
 8007768:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800776c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007770:	b10d      	cbz	r5, 8007776 <__d2b+0x32>
 8007772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	f1b8 0300 	subs.w	r3, r8, #0
 800777c:	d023      	beq.n	80077c6 <__d2b+0x82>
 800777e:	4668      	mov	r0, sp
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	f7ff fd84 	bl	800728e <__lo0bits>
 8007786:	e9dd 1200 	ldrd	r1, r2, [sp]
 800778a:	b1d0      	cbz	r0, 80077c2 <__d2b+0x7e>
 800778c:	f1c0 0320 	rsb	r3, r0, #32
 8007790:	fa02 f303 	lsl.w	r3, r2, r3
 8007794:	430b      	orrs	r3, r1
 8007796:	40c2      	lsrs	r2, r0
 8007798:	6163      	str	r3, [r4, #20]
 800779a:	9201      	str	r2, [sp, #4]
 800779c:	9b01      	ldr	r3, [sp, #4]
 800779e:	61a3      	str	r3, [r4, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bf0c      	ite	eq
 80077a4:	2201      	moveq	r2, #1
 80077a6:	2202      	movne	r2, #2
 80077a8:	6122      	str	r2, [r4, #16]
 80077aa:	b1a5      	cbz	r5, 80077d6 <__d2b+0x92>
 80077ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80077b0:	4405      	add	r5, r0
 80077b2:	603d      	str	r5, [r7, #0]
 80077b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80077b8:	6030      	str	r0, [r6, #0]
 80077ba:	4620      	mov	r0, r4
 80077bc:	b003      	add	sp, #12
 80077be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077c2:	6161      	str	r1, [r4, #20]
 80077c4:	e7ea      	b.n	800779c <__d2b+0x58>
 80077c6:	a801      	add	r0, sp, #4
 80077c8:	f7ff fd61 	bl	800728e <__lo0bits>
 80077cc:	9b01      	ldr	r3, [sp, #4]
 80077ce:	6163      	str	r3, [r4, #20]
 80077d0:	3020      	adds	r0, #32
 80077d2:	2201      	movs	r2, #1
 80077d4:	e7e8      	b.n	80077a8 <__d2b+0x64>
 80077d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80077de:	6038      	str	r0, [r7, #0]
 80077e0:	6918      	ldr	r0, [r3, #16]
 80077e2:	f7ff fd35 	bl	8007250 <__hi0bits>
 80077e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077ea:	e7e5      	b.n	80077b8 <__d2b+0x74>
 80077ec:	080083f0 	.word	0x080083f0
 80077f0:	08008401 	.word	0x08008401

080077f4 <__ssputs_r>:
 80077f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f8:	688e      	ldr	r6, [r1, #8]
 80077fa:	461f      	mov	r7, r3
 80077fc:	42be      	cmp	r6, r7
 80077fe:	680b      	ldr	r3, [r1, #0]
 8007800:	4682      	mov	sl, r0
 8007802:	460c      	mov	r4, r1
 8007804:	4690      	mov	r8, r2
 8007806:	d82d      	bhi.n	8007864 <__ssputs_r+0x70>
 8007808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800780c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007810:	d026      	beq.n	8007860 <__ssputs_r+0x6c>
 8007812:	6965      	ldr	r5, [r4, #20]
 8007814:	6909      	ldr	r1, [r1, #16]
 8007816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800781a:	eba3 0901 	sub.w	r9, r3, r1
 800781e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007822:	1c7b      	adds	r3, r7, #1
 8007824:	444b      	add	r3, r9
 8007826:	106d      	asrs	r5, r5, #1
 8007828:	429d      	cmp	r5, r3
 800782a:	bf38      	it	cc
 800782c:	461d      	movcc	r5, r3
 800782e:	0553      	lsls	r3, r2, #21
 8007830:	d527      	bpl.n	8007882 <__ssputs_r+0x8e>
 8007832:	4629      	mov	r1, r5
 8007834:	f7ff fbd8 	bl	8006fe8 <_malloc_r>
 8007838:	4606      	mov	r6, r0
 800783a:	b360      	cbz	r0, 8007896 <__ssputs_r+0xa2>
 800783c:	6921      	ldr	r1, [r4, #16]
 800783e:	464a      	mov	r2, r9
 8007840:	f000 fa06 	bl	8007c50 <memcpy>
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800784a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800784e:	81a3      	strh	r3, [r4, #12]
 8007850:	6126      	str	r6, [r4, #16]
 8007852:	6165      	str	r5, [r4, #20]
 8007854:	444e      	add	r6, r9
 8007856:	eba5 0509 	sub.w	r5, r5, r9
 800785a:	6026      	str	r6, [r4, #0]
 800785c:	60a5      	str	r5, [r4, #8]
 800785e:	463e      	mov	r6, r7
 8007860:	42be      	cmp	r6, r7
 8007862:	d900      	bls.n	8007866 <__ssputs_r+0x72>
 8007864:	463e      	mov	r6, r7
 8007866:	6820      	ldr	r0, [r4, #0]
 8007868:	4632      	mov	r2, r6
 800786a:	4641      	mov	r1, r8
 800786c:	f000 f9c6 	bl	8007bfc <memmove>
 8007870:	68a3      	ldr	r3, [r4, #8]
 8007872:	1b9b      	subs	r3, r3, r6
 8007874:	60a3      	str	r3, [r4, #8]
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	4433      	add	r3, r6
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	2000      	movs	r0, #0
 800787e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007882:	462a      	mov	r2, r5
 8007884:	f000 fa36 	bl	8007cf4 <_realloc_r>
 8007888:	4606      	mov	r6, r0
 800788a:	2800      	cmp	r0, #0
 800788c:	d1e0      	bne.n	8007850 <__ssputs_r+0x5c>
 800788e:	6921      	ldr	r1, [r4, #16]
 8007890:	4650      	mov	r0, sl
 8007892:	f7ff fb35 	bl	8006f00 <_free_r>
 8007896:	230c      	movs	r3, #12
 8007898:	f8ca 3000 	str.w	r3, [sl]
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078a8:	e7e9      	b.n	800787e <__ssputs_r+0x8a>
	...

080078ac <_svfiprintf_r>:
 80078ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	4698      	mov	r8, r3
 80078b2:	898b      	ldrh	r3, [r1, #12]
 80078b4:	061b      	lsls	r3, r3, #24
 80078b6:	b09d      	sub	sp, #116	@ 0x74
 80078b8:	4607      	mov	r7, r0
 80078ba:	460d      	mov	r5, r1
 80078bc:	4614      	mov	r4, r2
 80078be:	d510      	bpl.n	80078e2 <_svfiprintf_r+0x36>
 80078c0:	690b      	ldr	r3, [r1, #16]
 80078c2:	b973      	cbnz	r3, 80078e2 <_svfiprintf_r+0x36>
 80078c4:	2140      	movs	r1, #64	@ 0x40
 80078c6:	f7ff fb8f 	bl	8006fe8 <_malloc_r>
 80078ca:	6028      	str	r0, [r5, #0]
 80078cc:	6128      	str	r0, [r5, #16]
 80078ce:	b930      	cbnz	r0, 80078de <_svfiprintf_r+0x32>
 80078d0:	230c      	movs	r3, #12
 80078d2:	603b      	str	r3, [r7, #0]
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078d8:	b01d      	add	sp, #116	@ 0x74
 80078da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078de:	2340      	movs	r3, #64	@ 0x40
 80078e0:	616b      	str	r3, [r5, #20]
 80078e2:	2300      	movs	r3, #0
 80078e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80078e6:	2320      	movs	r3, #32
 80078e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f0:	2330      	movs	r3, #48	@ 0x30
 80078f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a90 <_svfiprintf_r+0x1e4>
 80078f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078fa:	f04f 0901 	mov.w	r9, #1
 80078fe:	4623      	mov	r3, r4
 8007900:	469a      	mov	sl, r3
 8007902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007906:	b10a      	cbz	r2, 800790c <_svfiprintf_r+0x60>
 8007908:	2a25      	cmp	r2, #37	@ 0x25
 800790a:	d1f9      	bne.n	8007900 <_svfiprintf_r+0x54>
 800790c:	ebba 0b04 	subs.w	fp, sl, r4
 8007910:	d00b      	beq.n	800792a <_svfiprintf_r+0x7e>
 8007912:	465b      	mov	r3, fp
 8007914:	4622      	mov	r2, r4
 8007916:	4629      	mov	r1, r5
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff ff6b 	bl	80077f4 <__ssputs_r>
 800791e:	3001      	adds	r0, #1
 8007920:	f000 80a7 	beq.w	8007a72 <_svfiprintf_r+0x1c6>
 8007924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007926:	445a      	add	r2, fp
 8007928:	9209      	str	r2, [sp, #36]	@ 0x24
 800792a:	f89a 3000 	ldrb.w	r3, [sl]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 809f 	beq.w	8007a72 <_svfiprintf_r+0x1c6>
 8007934:	2300      	movs	r3, #0
 8007936:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800793a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800793e:	f10a 0a01 	add.w	sl, sl, #1
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	9307      	str	r3, [sp, #28]
 8007946:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800794a:	931a      	str	r3, [sp, #104]	@ 0x68
 800794c:	4654      	mov	r4, sl
 800794e:	2205      	movs	r2, #5
 8007950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007954:	484e      	ldr	r0, [pc, #312]	@ (8007a90 <_svfiprintf_r+0x1e4>)
 8007956:	f7f8 fc5b 	bl	8000210 <memchr>
 800795a:	9a04      	ldr	r2, [sp, #16]
 800795c:	b9d8      	cbnz	r0, 8007996 <_svfiprintf_r+0xea>
 800795e:	06d0      	lsls	r0, r2, #27
 8007960:	bf44      	itt	mi
 8007962:	2320      	movmi	r3, #32
 8007964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007968:	0711      	lsls	r1, r2, #28
 800796a:	bf44      	itt	mi
 800796c:	232b      	movmi	r3, #43	@ 0x2b
 800796e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007972:	f89a 3000 	ldrb.w	r3, [sl]
 8007976:	2b2a      	cmp	r3, #42	@ 0x2a
 8007978:	d015      	beq.n	80079a6 <_svfiprintf_r+0xfa>
 800797a:	9a07      	ldr	r2, [sp, #28]
 800797c:	4654      	mov	r4, sl
 800797e:	2000      	movs	r0, #0
 8007980:	f04f 0c0a 	mov.w	ip, #10
 8007984:	4621      	mov	r1, r4
 8007986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798a:	3b30      	subs	r3, #48	@ 0x30
 800798c:	2b09      	cmp	r3, #9
 800798e:	d94b      	bls.n	8007a28 <_svfiprintf_r+0x17c>
 8007990:	b1b0      	cbz	r0, 80079c0 <_svfiprintf_r+0x114>
 8007992:	9207      	str	r2, [sp, #28]
 8007994:	e014      	b.n	80079c0 <_svfiprintf_r+0x114>
 8007996:	eba0 0308 	sub.w	r3, r0, r8
 800799a:	fa09 f303 	lsl.w	r3, r9, r3
 800799e:	4313      	orrs	r3, r2
 80079a0:	9304      	str	r3, [sp, #16]
 80079a2:	46a2      	mov	sl, r4
 80079a4:	e7d2      	b.n	800794c <_svfiprintf_r+0xa0>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	1d19      	adds	r1, r3, #4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	9103      	str	r1, [sp, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfbb      	ittet	lt
 80079b2:	425b      	neglt	r3, r3
 80079b4:	f042 0202 	orrlt.w	r2, r2, #2
 80079b8:	9307      	strge	r3, [sp, #28]
 80079ba:	9307      	strlt	r3, [sp, #28]
 80079bc:	bfb8      	it	lt
 80079be:	9204      	strlt	r2, [sp, #16]
 80079c0:	7823      	ldrb	r3, [r4, #0]
 80079c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80079c4:	d10a      	bne.n	80079dc <_svfiprintf_r+0x130>
 80079c6:	7863      	ldrb	r3, [r4, #1]
 80079c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079ca:	d132      	bne.n	8007a32 <_svfiprintf_r+0x186>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	1d1a      	adds	r2, r3, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	9203      	str	r2, [sp, #12]
 80079d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079d8:	3402      	adds	r4, #2
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007aa0 <_svfiprintf_r+0x1f4>
 80079e0:	7821      	ldrb	r1, [r4, #0]
 80079e2:	2203      	movs	r2, #3
 80079e4:	4650      	mov	r0, sl
 80079e6:	f7f8 fc13 	bl	8000210 <memchr>
 80079ea:	b138      	cbz	r0, 80079fc <_svfiprintf_r+0x150>
 80079ec:	9b04      	ldr	r3, [sp, #16]
 80079ee:	eba0 000a 	sub.w	r0, r0, sl
 80079f2:	2240      	movs	r2, #64	@ 0x40
 80079f4:	4082      	lsls	r2, r0
 80079f6:	4313      	orrs	r3, r2
 80079f8:	3401      	adds	r4, #1
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a00:	4824      	ldr	r0, [pc, #144]	@ (8007a94 <_svfiprintf_r+0x1e8>)
 8007a02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a06:	2206      	movs	r2, #6
 8007a08:	f7f8 fc02 	bl	8000210 <memchr>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d036      	beq.n	8007a7e <_svfiprintf_r+0x1d2>
 8007a10:	4b21      	ldr	r3, [pc, #132]	@ (8007a98 <_svfiprintf_r+0x1ec>)
 8007a12:	bb1b      	cbnz	r3, 8007a5c <_svfiprintf_r+0x1b0>
 8007a14:	9b03      	ldr	r3, [sp, #12]
 8007a16:	3307      	adds	r3, #7
 8007a18:	f023 0307 	bic.w	r3, r3, #7
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	9303      	str	r3, [sp, #12]
 8007a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a22:	4433      	add	r3, r6
 8007a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a26:	e76a      	b.n	80078fe <_svfiprintf_r+0x52>
 8007a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	2001      	movs	r0, #1
 8007a30:	e7a8      	b.n	8007984 <_svfiprintf_r+0xd8>
 8007a32:	2300      	movs	r3, #0
 8007a34:	3401      	adds	r4, #1
 8007a36:	9305      	str	r3, [sp, #20]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	f04f 0c0a 	mov.w	ip, #10
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a44:	3a30      	subs	r2, #48	@ 0x30
 8007a46:	2a09      	cmp	r2, #9
 8007a48:	d903      	bls.n	8007a52 <_svfiprintf_r+0x1a6>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d0c6      	beq.n	80079dc <_svfiprintf_r+0x130>
 8007a4e:	9105      	str	r1, [sp, #20]
 8007a50:	e7c4      	b.n	80079dc <_svfiprintf_r+0x130>
 8007a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a56:	4604      	mov	r4, r0
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e7f0      	b.n	8007a3e <_svfiprintf_r+0x192>
 8007a5c:	ab03      	add	r3, sp, #12
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	462a      	mov	r2, r5
 8007a62:	4b0e      	ldr	r3, [pc, #56]	@ (8007a9c <_svfiprintf_r+0x1f0>)
 8007a64:	a904      	add	r1, sp, #16
 8007a66:	4638      	mov	r0, r7
 8007a68:	f7fd fe7e 	bl	8005768 <_printf_float>
 8007a6c:	1c42      	adds	r2, r0, #1
 8007a6e:	4606      	mov	r6, r0
 8007a70:	d1d6      	bne.n	8007a20 <_svfiprintf_r+0x174>
 8007a72:	89ab      	ldrh	r3, [r5, #12]
 8007a74:	065b      	lsls	r3, r3, #25
 8007a76:	f53f af2d 	bmi.w	80078d4 <_svfiprintf_r+0x28>
 8007a7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a7c:	e72c      	b.n	80078d8 <_svfiprintf_r+0x2c>
 8007a7e:	ab03      	add	r3, sp, #12
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	462a      	mov	r2, r5
 8007a84:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <_svfiprintf_r+0x1f0>)
 8007a86:	a904      	add	r1, sp, #16
 8007a88:	4638      	mov	r0, r7
 8007a8a:	f7fe f905 	bl	8005c98 <_printf_i>
 8007a8e:	e7ed      	b.n	8007a6c <_svfiprintf_r+0x1c0>
 8007a90:	0800845a 	.word	0x0800845a
 8007a94:	08008464 	.word	0x08008464
 8007a98:	08005769 	.word	0x08005769
 8007a9c:	080077f5 	.word	0x080077f5
 8007aa0:	08008460 	.word	0x08008460

08007aa4 <__sflush_r>:
 8007aa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aac:	0716      	lsls	r6, r2, #28
 8007aae:	4605      	mov	r5, r0
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	d454      	bmi.n	8007b5e <__sflush_r+0xba>
 8007ab4:	684b      	ldr	r3, [r1, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	dc02      	bgt.n	8007ac0 <__sflush_r+0x1c>
 8007aba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dd48      	ble.n	8007b52 <__sflush_r+0xae>
 8007ac0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ac2:	2e00      	cmp	r6, #0
 8007ac4:	d045      	beq.n	8007b52 <__sflush_r+0xae>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007acc:	682f      	ldr	r7, [r5, #0]
 8007ace:	6a21      	ldr	r1, [r4, #32]
 8007ad0:	602b      	str	r3, [r5, #0]
 8007ad2:	d030      	beq.n	8007b36 <__sflush_r+0x92>
 8007ad4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	0759      	lsls	r1, r3, #29
 8007ada:	d505      	bpl.n	8007ae8 <__sflush_r+0x44>
 8007adc:	6863      	ldr	r3, [r4, #4]
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ae2:	b10b      	cbz	r3, 8007ae8 <__sflush_r+0x44>
 8007ae4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ae6:	1ad2      	subs	r2, r2, r3
 8007ae8:	2300      	movs	r3, #0
 8007aea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007aec:	6a21      	ldr	r1, [r4, #32]
 8007aee:	4628      	mov	r0, r5
 8007af0:	47b0      	blx	r6
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	d106      	bne.n	8007b06 <__sflush_r+0x62>
 8007af8:	6829      	ldr	r1, [r5, #0]
 8007afa:	291d      	cmp	r1, #29
 8007afc:	d82b      	bhi.n	8007b56 <__sflush_r+0xb2>
 8007afe:	4a2a      	ldr	r2, [pc, #168]	@ (8007ba8 <__sflush_r+0x104>)
 8007b00:	40ca      	lsrs	r2, r1
 8007b02:	07d6      	lsls	r6, r2, #31
 8007b04:	d527      	bpl.n	8007b56 <__sflush_r+0xb2>
 8007b06:	2200      	movs	r2, #0
 8007b08:	6062      	str	r2, [r4, #4]
 8007b0a:	04d9      	lsls	r1, r3, #19
 8007b0c:	6922      	ldr	r2, [r4, #16]
 8007b0e:	6022      	str	r2, [r4, #0]
 8007b10:	d504      	bpl.n	8007b1c <__sflush_r+0x78>
 8007b12:	1c42      	adds	r2, r0, #1
 8007b14:	d101      	bne.n	8007b1a <__sflush_r+0x76>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	b903      	cbnz	r3, 8007b1c <__sflush_r+0x78>
 8007b1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b1e:	602f      	str	r7, [r5, #0]
 8007b20:	b1b9      	cbz	r1, 8007b52 <__sflush_r+0xae>
 8007b22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b26:	4299      	cmp	r1, r3
 8007b28:	d002      	beq.n	8007b30 <__sflush_r+0x8c>
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f7ff f9e8 	bl	8006f00 <_free_r>
 8007b30:	2300      	movs	r3, #0
 8007b32:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b34:	e00d      	b.n	8007b52 <__sflush_r+0xae>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b0      	blx	r6
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	1c50      	adds	r0, r2, #1
 8007b40:	d1c9      	bne.n	8007ad6 <__sflush_r+0x32>
 8007b42:	682b      	ldr	r3, [r5, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0c6      	beq.n	8007ad6 <__sflush_r+0x32>
 8007b48:	2b1d      	cmp	r3, #29
 8007b4a:	d001      	beq.n	8007b50 <__sflush_r+0xac>
 8007b4c:	2b16      	cmp	r3, #22
 8007b4e:	d11e      	bne.n	8007b8e <__sflush_r+0xea>
 8007b50:	602f      	str	r7, [r5, #0]
 8007b52:	2000      	movs	r0, #0
 8007b54:	e022      	b.n	8007b9c <__sflush_r+0xf8>
 8007b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b5a:	b21b      	sxth	r3, r3
 8007b5c:	e01b      	b.n	8007b96 <__sflush_r+0xf2>
 8007b5e:	690f      	ldr	r7, [r1, #16]
 8007b60:	2f00      	cmp	r7, #0
 8007b62:	d0f6      	beq.n	8007b52 <__sflush_r+0xae>
 8007b64:	0793      	lsls	r3, r2, #30
 8007b66:	680e      	ldr	r6, [r1, #0]
 8007b68:	bf08      	it	eq
 8007b6a:	694b      	ldreq	r3, [r1, #20]
 8007b6c:	600f      	str	r7, [r1, #0]
 8007b6e:	bf18      	it	ne
 8007b70:	2300      	movne	r3, #0
 8007b72:	eba6 0807 	sub.w	r8, r6, r7
 8007b76:	608b      	str	r3, [r1, #8]
 8007b78:	f1b8 0f00 	cmp.w	r8, #0
 8007b7c:	dde9      	ble.n	8007b52 <__sflush_r+0xae>
 8007b7e:	6a21      	ldr	r1, [r4, #32]
 8007b80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b82:	4643      	mov	r3, r8
 8007b84:	463a      	mov	r2, r7
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b0      	blx	r6
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	dc08      	bgt.n	8007ba0 <__sflush_r+0xfc>
 8007b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b96:	81a3      	strh	r3, [r4, #12]
 8007b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba0:	4407      	add	r7, r0
 8007ba2:	eba8 0800 	sub.w	r8, r8, r0
 8007ba6:	e7e7      	b.n	8007b78 <__sflush_r+0xd4>
 8007ba8:	20400001 	.word	0x20400001

08007bac <_fflush_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	690b      	ldr	r3, [r1, #16]
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	b913      	cbnz	r3, 8007bbc <_fflush_r+0x10>
 8007bb6:	2500      	movs	r5, #0
 8007bb8:	4628      	mov	r0, r5
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	b118      	cbz	r0, 8007bc6 <_fflush_r+0x1a>
 8007bbe:	6a03      	ldr	r3, [r0, #32]
 8007bc0:	b90b      	cbnz	r3, 8007bc6 <_fflush_r+0x1a>
 8007bc2:	f7fe fa13 	bl	8005fec <__sinit>
 8007bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0f3      	beq.n	8007bb6 <_fflush_r+0xa>
 8007bce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bd0:	07d0      	lsls	r0, r2, #31
 8007bd2:	d404      	bmi.n	8007bde <_fflush_r+0x32>
 8007bd4:	0599      	lsls	r1, r3, #22
 8007bd6:	d402      	bmi.n	8007bde <_fflush_r+0x32>
 8007bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bda:	f7fe fb34 	bl	8006246 <__retarget_lock_acquire_recursive>
 8007bde:	4628      	mov	r0, r5
 8007be0:	4621      	mov	r1, r4
 8007be2:	f7ff ff5f 	bl	8007aa4 <__sflush_r>
 8007be6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007be8:	07da      	lsls	r2, r3, #31
 8007bea:	4605      	mov	r5, r0
 8007bec:	d4e4      	bmi.n	8007bb8 <_fflush_r+0xc>
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	059b      	lsls	r3, r3, #22
 8007bf2:	d4e1      	bmi.n	8007bb8 <_fflush_r+0xc>
 8007bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bf6:	f7fe fb27 	bl	8006248 <__retarget_lock_release_recursive>
 8007bfa:	e7dd      	b.n	8007bb8 <_fflush_r+0xc>

08007bfc <memmove>:
 8007bfc:	4288      	cmp	r0, r1
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	eb01 0402 	add.w	r4, r1, r2
 8007c04:	d902      	bls.n	8007c0c <memmove+0x10>
 8007c06:	4284      	cmp	r4, r0
 8007c08:	4623      	mov	r3, r4
 8007c0a:	d807      	bhi.n	8007c1c <memmove+0x20>
 8007c0c:	1e43      	subs	r3, r0, #1
 8007c0e:	42a1      	cmp	r1, r4
 8007c10:	d008      	beq.n	8007c24 <memmove+0x28>
 8007c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c1a:	e7f8      	b.n	8007c0e <memmove+0x12>
 8007c1c:	4402      	add	r2, r0
 8007c1e:	4601      	mov	r1, r0
 8007c20:	428a      	cmp	r2, r1
 8007c22:	d100      	bne.n	8007c26 <memmove+0x2a>
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c2e:	e7f7      	b.n	8007c20 <memmove+0x24>

08007c30 <_sbrk_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d06      	ldr	r5, [pc, #24]	@ (8007c4c <_sbrk_r+0x1c>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	f7f9 fce0 	bl	8001600 <_sbrk>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_sbrk_r+0x1a>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_sbrk_r+0x1a>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	20000458 	.word	0x20000458

08007c50 <memcpy>:
 8007c50:	440a      	add	r2, r1
 8007c52:	4291      	cmp	r1, r2
 8007c54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007c58:	d100      	bne.n	8007c5c <memcpy+0xc>
 8007c5a:	4770      	bx	lr
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c66:	4291      	cmp	r1, r2
 8007c68:	d1f9      	bne.n	8007c5e <memcpy+0xe>
 8007c6a:	bd10      	pop	{r4, pc}

08007c6c <__assert_func>:
 8007c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c6e:	4614      	mov	r4, r2
 8007c70:	461a      	mov	r2, r3
 8007c72:	4b09      	ldr	r3, [pc, #36]	@ (8007c98 <__assert_func+0x2c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4605      	mov	r5, r0
 8007c78:	68d8      	ldr	r0, [r3, #12]
 8007c7a:	b14c      	cbz	r4, 8007c90 <__assert_func+0x24>
 8007c7c:	4b07      	ldr	r3, [pc, #28]	@ (8007c9c <__assert_func+0x30>)
 8007c7e:	9100      	str	r1, [sp, #0]
 8007c80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c84:	4906      	ldr	r1, [pc, #24]	@ (8007ca0 <__assert_func+0x34>)
 8007c86:	462b      	mov	r3, r5
 8007c88:	f000 f870 	bl	8007d6c <fiprintf>
 8007c8c:	f000 f880 	bl	8007d90 <abort>
 8007c90:	4b04      	ldr	r3, [pc, #16]	@ (8007ca4 <__assert_func+0x38>)
 8007c92:	461c      	mov	r4, r3
 8007c94:	e7f3      	b.n	8007c7e <__assert_func+0x12>
 8007c96:	bf00      	nop
 8007c98:	20000018 	.word	0x20000018
 8007c9c:	08008475 	.word	0x08008475
 8007ca0:	08008482 	.word	0x08008482
 8007ca4:	080084b0 	.word	0x080084b0

08007ca8 <_calloc_r>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	fba1 5402 	umull	r5, r4, r1, r2
 8007cae:	b934      	cbnz	r4, 8007cbe <_calloc_r+0x16>
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	f7ff f999 	bl	8006fe8 <_malloc_r>
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	b928      	cbnz	r0, 8007cc6 <_calloc_r+0x1e>
 8007cba:	4630      	mov	r0, r6
 8007cbc:	bd70      	pop	{r4, r5, r6, pc}
 8007cbe:	220c      	movs	r2, #12
 8007cc0:	6002      	str	r2, [r0, #0]
 8007cc2:	2600      	movs	r6, #0
 8007cc4:	e7f9      	b.n	8007cba <_calloc_r+0x12>
 8007cc6:	462a      	mov	r2, r5
 8007cc8:	4621      	mov	r1, r4
 8007cca:	f7fe fa3e 	bl	800614a <memset>
 8007cce:	e7f4      	b.n	8007cba <_calloc_r+0x12>

08007cd0 <__ascii_mbtowc>:
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	b901      	cbnz	r1, 8007cd6 <__ascii_mbtowc+0x6>
 8007cd4:	a901      	add	r1, sp, #4
 8007cd6:	b142      	cbz	r2, 8007cea <__ascii_mbtowc+0x1a>
 8007cd8:	b14b      	cbz	r3, 8007cee <__ascii_mbtowc+0x1e>
 8007cda:	7813      	ldrb	r3, [r2, #0]
 8007cdc:	600b      	str	r3, [r1, #0]
 8007cde:	7812      	ldrb	r2, [r2, #0]
 8007ce0:	1e10      	subs	r0, r2, #0
 8007ce2:	bf18      	it	ne
 8007ce4:	2001      	movne	r0, #1
 8007ce6:	b002      	add	sp, #8
 8007ce8:	4770      	bx	lr
 8007cea:	4610      	mov	r0, r2
 8007cec:	e7fb      	b.n	8007ce6 <__ascii_mbtowc+0x16>
 8007cee:	f06f 0001 	mvn.w	r0, #1
 8007cf2:	e7f8      	b.n	8007ce6 <__ascii_mbtowc+0x16>

08007cf4 <_realloc_r>:
 8007cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf8:	4607      	mov	r7, r0
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	460d      	mov	r5, r1
 8007cfe:	b921      	cbnz	r1, 8007d0a <_realloc_r+0x16>
 8007d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d04:	4611      	mov	r1, r2
 8007d06:	f7ff b96f 	b.w	8006fe8 <_malloc_r>
 8007d0a:	b92a      	cbnz	r2, 8007d18 <_realloc_r+0x24>
 8007d0c:	f7ff f8f8 	bl	8006f00 <_free_r>
 8007d10:	4625      	mov	r5, r4
 8007d12:	4628      	mov	r0, r5
 8007d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d18:	f000 f841 	bl	8007d9e <_malloc_usable_size_r>
 8007d1c:	4284      	cmp	r4, r0
 8007d1e:	4606      	mov	r6, r0
 8007d20:	d802      	bhi.n	8007d28 <_realloc_r+0x34>
 8007d22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d26:	d8f4      	bhi.n	8007d12 <_realloc_r+0x1e>
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	f7ff f95c 	bl	8006fe8 <_malloc_r>
 8007d30:	4680      	mov	r8, r0
 8007d32:	b908      	cbnz	r0, 8007d38 <_realloc_r+0x44>
 8007d34:	4645      	mov	r5, r8
 8007d36:	e7ec      	b.n	8007d12 <_realloc_r+0x1e>
 8007d38:	42b4      	cmp	r4, r6
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	bf28      	it	cs
 8007d40:	4632      	movcs	r2, r6
 8007d42:	f7ff ff85 	bl	8007c50 <memcpy>
 8007d46:	4629      	mov	r1, r5
 8007d48:	4638      	mov	r0, r7
 8007d4a:	f7ff f8d9 	bl	8006f00 <_free_r>
 8007d4e:	e7f1      	b.n	8007d34 <_realloc_r+0x40>

08007d50 <__ascii_wctomb>:
 8007d50:	4603      	mov	r3, r0
 8007d52:	4608      	mov	r0, r1
 8007d54:	b141      	cbz	r1, 8007d68 <__ascii_wctomb+0x18>
 8007d56:	2aff      	cmp	r2, #255	@ 0xff
 8007d58:	d904      	bls.n	8007d64 <__ascii_wctomb+0x14>
 8007d5a:	228a      	movs	r2, #138	@ 0x8a
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d62:	4770      	bx	lr
 8007d64:	700a      	strb	r2, [r1, #0]
 8007d66:	2001      	movs	r0, #1
 8007d68:	4770      	bx	lr
	...

08007d6c <fiprintf>:
 8007d6c:	b40e      	push	{r1, r2, r3}
 8007d6e:	b503      	push	{r0, r1, lr}
 8007d70:	4601      	mov	r1, r0
 8007d72:	ab03      	add	r3, sp, #12
 8007d74:	4805      	ldr	r0, [pc, #20]	@ (8007d8c <fiprintf+0x20>)
 8007d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d7a:	6800      	ldr	r0, [r0, #0]
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	f000 f83f 	bl	8007e00 <_vfiprintf_r>
 8007d82:	b002      	add	sp, #8
 8007d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d88:	b003      	add	sp, #12
 8007d8a:	4770      	bx	lr
 8007d8c:	20000018 	.word	0x20000018

08007d90 <abort>:
 8007d90:	b508      	push	{r3, lr}
 8007d92:	2006      	movs	r0, #6
 8007d94:	f000 fa08 	bl	80081a8 <raise>
 8007d98:	2001      	movs	r0, #1
 8007d9a:	f7f9 fbb9 	bl	8001510 <_exit>

08007d9e <_malloc_usable_size_r>:
 8007d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007da2:	1f18      	subs	r0, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	bfbc      	itt	lt
 8007da8:	580b      	ldrlt	r3, [r1, r0]
 8007daa:	18c0      	addlt	r0, r0, r3
 8007dac:	4770      	bx	lr

08007dae <__sfputc_r>:
 8007dae:	6893      	ldr	r3, [r2, #8]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	b410      	push	{r4}
 8007db6:	6093      	str	r3, [r2, #8]
 8007db8:	da08      	bge.n	8007dcc <__sfputc_r+0x1e>
 8007dba:	6994      	ldr	r4, [r2, #24]
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	db01      	blt.n	8007dc4 <__sfputc_r+0x16>
 8007dc0:	290a      	cmp	r1, #10
 8007dc2:	d103      	bne.n	8007dcc <__sfputc_r+0x1e>
 8007dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc8:	f000 b932 	b.w	8008030 <__swbuf_r>
 8007dcc:	6813      	ldr	r3, [r2, #0]
 8007dce:	1c58      	adds	r0, r3, #1
 8007dd0:	6010      	str	r0, [r2, #0]
 8007dd2:	7019      	strb	r1, [r3, #0]
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <__sfputs_r>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	4606      	mov	r6, r0
 8007de0:	460f      	mov	r7, r1
 8007de2:	4614      	mov	r4, r2
 8007de4:	18d5      	adds	r5, r2, r3
 8007de6:	42ac      	cmp	r4, r5
 8007de8:	d101      	bne.n	8007dee <__sfputs_r+0x12>
 8007dea:	2000      	movs	r0, #0
 8007dec:	e007      	b.n	8007dfe <__sfputs_r+0x22>
 8007dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df2:	463a      	mov	r2, r7
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7ff ffda 	bl	8007dae <__sfputc_r>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d1f3      	bne.n	8007de6 <__sfputs_r+0xa>
 8007dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e00 <_vfiprintf_r>:
 8007e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	460d      	mov	r5, r1
 8007e06:	b09d      	sub	sp, #116	@ 0x74
 8007e08:	4614      	mov	r4, r2
 8007e0a:	4698      	mov	r8, r3
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	b118      	cbz	r0, 8007e18 <_vfiprintf_r+0x18>
 8007e10:	6a03      	ldr	r3, [r0, #32]
 8007e12:	b90b      	cbnz	r3, 8007e18 <_vfiprintf_r+0x18>
 8007e14:	f7fe f8ea 	bl	8005fec <__sinit>
 8007e18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e1a:	07d9      	lsls	r1, r3, #31
 8007e1c:	d405      	bmi.n	8007e2a <_vfiprintf_r+0x2a>
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	059a      	lsls	r2, r3, #22
 8007e22:	d402      	bmi.n	8007e2a <_vfiprintf_r+0x2a>
 8007e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e26:	f7fe fa0e 	bl	8006246 <__retarget_lock_acquire_recursive>
 8007e2a:	89ab      	ldrh	r3, [r5, #12]
 8007e2c:	071b      	lsls	r3, r3, #28
 8007e2e:	d501      	bpl.n	8007e34 <_vfiprintf_r+0x34>
 8007e30:	692b      	ldr	r3, [r5, #16]
 8007e32:	b99b      	cbnz	r3, 8007e5c <_vfiprintf_r+0x5c>
 8007e34:	4629      	mov	r1, r5
 8007e36:	4630      	mov	r0, r6
 8007e38:	f000 f938 	bl	80080ac <__swsetup_r>
 8007e3c:	b170      	cbz	r0, 8007e5c <_vfiprintf_r+0x5c>
 8007e3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e40:	07dc      	lsls	r4, r3, #31
 8007e42:	d504      	bpl.n	8007e4e <_vfiprintf_r+0x4e>
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e48:	b01d      	add	sp, #116	@ 0x74
 8007e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	0598      	lsls	r0, r3, #22
 8007e52:	d4f7      	bmi.n	8007e44 <_vfiprintf_r+0x44>
 8007e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e56:	f7fe f9f7 	bl	8006248 <__retarget_lock_release_recursive>
 8007e5a:	e7f3      	b.n	8007e44 <_vfiprintf_r+0x44>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e60:	2320      	movs	r3, #32
 8007e62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e66:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e6a:	2330      	movs	r3, #48	@ 0x30
 8007e6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800801c <_vfiprintf_r+0x21c>
 8007e70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e74:	f04f 0901 	mov.w	r9, #1
 8007e78:	4623      	mov	r3, r4
 8007e7a:	469a      	mov	sl, r3
 8007e7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e80:	b10a      	cbz	r2, 8007e86 <_vfiprintf_r+0x86>
 8007e82:	2a25      	cmp	r2, #37	@ 0x25
 8007e84:	d1f9      	bne.n	8007e7a <_vfiprintf_r+0x7a>
 8007e86:	ebba 0b04 	subs.w	fp, sl, r4
 8007e8a:	d00b      	beq.n	8007ea4 <_vfiprintf_r+0xa4>
 8007e8c:	465b      	mov	r3, fp
 8007e8e:	4622      	mov	r2, r4
 8007e90:	4629      	mov	r1, r5
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff ffa2 	bl	8007ddc <__sfputs_r>
 8007e98:	3001      	adds	r0, #1
 8007e9a:	f000 80a7 	beq.w	8007fec <_vfiprintf_r+0x1ec>
 8007e9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ea0:	445a      	add	r2, fp
 8007ea2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 809f 	beq.w	8007fec <_vfiprintf_r+0x1ec>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007eb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb8:	f10a 0a01 	add.w	sl, sl, #1
 8007ebc:	9304      	str	r3, [sp, #16]
 8007ebe:	9307      	str	r3, [sp, #28]
 8007ec0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ec4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ec6:	4654      	mov	r4, sl
 8007ec8:	2205      	movs	r2, #5
 8007eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ece:	4853      	ldr	r0, [pc, #332]	@ (800801c <_vfiprintf_r+0x21c>)
 8007ed0:	f7f8 f99e 	bl	8000210 <memchr>
 8007ed4:	9a04      	ldr	r2, [sp, #16]
 8007ed6:	b9d8      	cbnz	r0, 8007f10 <_vfiprintf_r+0x110>
 8007ed8:	06d1      	lsls	r1, r2, #27
 8007eda:	bf44      	itt	mi
 8007edc:	2320      	movmi	r3, #32
 8007ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ee2:	0713      	lsls	r3, r2, #28
 8007ee4:	bf44      	itt	mi
 8007ee6:	232b      	movmi	r3, #43	@ 0x2b
 8007ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eec:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ef2:	d015      	beq.n	8007f20 <_vfiprintf_r+0x120>
 8007ef4:	9a07      	ldr	r2, [sp, #28]
 8007ef6:	4654      	mov	r4, sl
 8007ef8:	2000      	movs	r0, #0
 8007efa:	f04f 0c0a 	mov.w	ip, #10
 8007efe:	4621      	mov	r1, r4
 8007f00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f04:	3b30      	subs	r3, #48	@ 0x30
 8007f06:	2b09      	cmp	r3, #9
 8007f08:	d94b      	bls.n	8007fa2 <_vfiprintf_r+0x1a2>
 8007f0a:	b1b0      	cbz	r0, 8007f3a <_vfiprintf_r+0x13a>
 8007f0c:	9207      	str	r2, [sp, #28]
 8007f0e:	e014      	b.n	8007f3a <_vfiprintf_r+0x13a>
 8007f10:	eba0 0308 	sub.w	r3, r0, r8
 8007f14:	fa09 f303 	lsl.w	r3, r9, r3
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	46a2      	mov	sl, r4
 8007f1e:	e7d2      	b.n	8007ec6 <_vfiprintf_r+0xc6>
 8007f20:	9b03      	ldr	r3, [sp, #12]
 8007f22:	1d19      	adds	r1, r3, #4
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	9103      	str	r1, [sp, #12]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	bfbb      	ittet	lt
 8007f2c:	425b      	neglt	r3, r3
 8007f2e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f32:	9307      	strge	r3, [sp, #28]
 8007f34:	9307      	strlt	r3, [sp, #28]
 8007f36:	bfb8      	it	lt
 8007f38:	9204      	strlt	r2, [sp, #16]
 8007f3a:	7823      	ldrb	r3, [r4, #0]
 8007f3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f3e:	d10a      	bne.n	8007f56 <_vfiprintf_r+0x156>
 8007f40:	7863      	ldrb	r3, [r4, #1]
 8007f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f44:	d132      	bne.n	8007fac <_vfiprintf_r+0x1ac>
 8007f46:	9b03      	ldr	r3, [sp, #12]
 8007f48:	1d1a      	adds	r2, r3, #4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	9203      	str	r2, [sp, #12]
 8007f4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f52:	3402      	adds	r4, #2
 8007f54:	9305      	str	r3, [sp, #20]
 8007f56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800802c <_vfiprintf_r+0x22c>
 8007f5a:	7821      	ldrb	r1, [r4, #0]
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	4650      	mov	r0, sl
 8007f60:	f7f8 f956 	bl	8000210 <memchr>
 8007f64:	b138      	cbz	r0, 8007f76 <_vfiprintf_r+0x176>
 8007f66:	9b04      	ldr	r3, [sp, #16]
 8007f68:	eba0 000a 	sub.w	r0, r0, sl
 8007f6c:	2240      	movs	r2, #64	@ 0x40
 8007f6e:	4082      	lsls	r2, r0
 8007f70:	4313      	orrs	r3, r2
 8007f72:	3401      	adds	r4, #1
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7a:	4829      	ldr	r0, [pc, #164]	@ (8008020 <_vfiprintf_r+0x220>)
 8007f7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f80:	2206      	movs	r2, #6
 8007f82:	f7f8 f945 	bl	8000210 <memchr>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d03f      	beq.n	800800a <_vfiprintf_r+0x20a>
 8007f8a:	4b26      	ldr	r3, [pc, #152]	@ (8008024 <_vfiprintf_r+0x224>)
 8007f8c:	bb1b      	cbnz	r3, 8007fd6 <_vfiprintf_r+0x1d6>
 8007f8e:	9b03      	ldr	r3, [sp, #12]
 8007f90:	3307      	adds	r3, #7
 8007f92:	f023 0307 	bic.w	r3, r3, #7
 8007f96:	3308      	adds	r3, #8
 8007f98:	9303      	str	r3, [sp, #12]
 8007f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f9c:	443b      	add	r3, r7
 8007f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fa0:	e76a      	b.n	8007e78 <_vfiprintf_r+0x78>
 8007fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	2001      	movs	r0, #1
 8007faa:	e7a8      	b.n	8007efe <_vfiprintf_r+0xfe>
 8007fac:	2300      	movs	r3, #0
 8007fae:	3401      	adds	r4, #1
 8007fb0:	9305      	str	r3, [sp, #20]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f04f 0c0a 	mov.w	ip, #10
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fbe:	3a30      	subs	r2, #48	@ 0x30
 8007fc0:	2a09      	cmp	r2, #9
 8007fc2:	d903      	bls.n	8007fcc <_vfiprintf_r+0x1cc>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0c6      	beq.n	8007f56 <_vfiprintf_r+0x156>
 8007fc8:	9105      	str	r1, [sp, #20]
 8007fca:	e7c4      	b.n	8007f56 <_vfiprintf_r+0x156>
 8007fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e7f0      	b.n	8007fb8 <_vfiprintf_r+0x1b8>
 8007fd6:	ab03      	add	r3, sp, #12
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	462a      	mov	r2, r5
 8007fdc:	4b12      	ldr	r3, [pc, #72]	@ (8008028 <_vfiprintf_r+0x228>)
 8007fde:	a904      	add	r1, sp, #16
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f7fd fbc1 	bl	8005768 <_printf_float>
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	1c78      	adds	r0, r7, #1
 8007fea:	d1d6      	bne.n	8007f9a <_vfiprintf_r+0x19a>
 8007fec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fee:	07d9      	lsls	r1, r3, #31
 8007ff0:	d405      	bmi.n	8007ffe <_vfiprintf_r+0x1fe>
 8007ff2:	89ab      	ldrh	r3, [r5, #12]
 8007ff4:	059a      	lsls	r2, r3, #22
 8007ff6:	d402      	bmi.n	8007ffe <_vfiprintf_r+0x1fe>
 8007ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ffa:	f7fe f925 	bl	8006248 <__retarget_lock_release_recursive>
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	065b      	lsls	r3, r3, #25
 8008002:	f53f af1f 	bmi.w	8007e44 <_vfiprintf_r+0x44>
 8008006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008008:	e71e      	b.n	8007e48 <_vfiprintf_r+0x48>
 800800a:	ab03      	add	r3, sp, #12
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	462a      	mov	r2, r5
 8008010:	4b05      	ldr	r3, [pc, #20]	@ (8008028 <_vfiprintf_r+0x228>)
 8008012:	a904      	add	r1, sp, #16
 8008014:	4630      	mov	r0, r6
 8008016:	f7fd fe3f 	bl	8005c98 <_printf_i>
 800801a:	e7e4      	b.n	8007fe6 <_vfiprintf_r+0x1e6>
 800801c:	0800845a 	.word	0x0800845a
 8008020:	08008464 	.word	0x08008464
 8008024:	08005769 	.word	0x08005769
 8008028:	08007ddd 	.word	0x08007ddd
 800802c:	08008460 	.word	0x08008460

08008030 <__swbuf_r>:
 8008030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008032:	460e      	mov	r6, r1
 8008034:	4614      	mov	r4, r2
 8008036:	4605      	mov	r5, r0
 8008038:	b118      	cbz	r0, 8008042 <__swbuf_r+0x12>
 800803a:	6a03      	ldr	r3, [r0, #32]
 800803c:	b90b      	cbnz	r3, 8008042 <__swbuf_r+0x12>
 800803e:	f7fd ffd5 	bl	8005fec <__sinit>
 8008042:	69a3      	ldr	r3, [r4, #24]
 8008044:	60a3      	str	r3, [r4, #8]
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	071a      	lsls	r2, r3, #28
 800804a:	d501      	bpl.n	8008050 <__swbuf_r+0x20>
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	b943      	cbnz	r3, 8008062 <__swbuf_r+0x32>
 8008050:	4621      	mov	r1, r4
 8008052:	4628      	mov	r0, r5
 8008054:	f000 f82a 	bl	80080ac <__swsetup_r>
 8008058:	b118      	cbz	r0, 8008062 <__swbuf_r+0x32>
 800805a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800805e:	4638      	mov	r0, r7
 8008060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	6922      	ldr	r2, [r4, #16]
 8008066:	1a98      	subs	r0, r3, r2
 8008068:	6963      	ldr	r3, [r4, #20]
 800806a:	b2f6      	uxtb	r6, r6
 800806c:	4283      	cmp	r3, r0
 800806e:	4637      	mov	r7, r6
 8008070:	dc05      	bgt.n	800807e <__swbuf_r+0x4e>
 8008072:	4621      	mov	r1, r4
 8008074:	4628      	mov	r0, r5
 8008076:	f7ff fd99 	bl	8007bac <_fflush_r>
 800807a:	2800      	cmp	r0, #0
 800807c:	d1ed      	bne.n	800805a <__swbuf_r+0x2a>
 800807e:	68a3      	ldr	r3, [r4, #8]
 8008080:	3b01      	subs	r3, #1
 8008082:	60a3      	str	r3, [r4, #8]
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	6022      	str	r2, [r4, #0]
 800808a:	701e      	strb	r6, [r3, #0]
 800808c:	6962      	ldr	r2, [r4, #20]
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	429a      	cmp	r2, r3
 8008092:	d004      	beq.n	800809e <__swbuf_r+0x6e>
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	07db      	lsls	r3, r3, #31
 8008098:	d5e1      	bpl.n	800805e <__swbuf_r+0x2e>
 800809a:	2e0a      	cmp	r6, #10
 800809c:	d1df      	bne.n	800805e <__swbuf_r+0x2e>
 800809e:	4621      	mov	r1, r4
 80080a0:	4628      	mov	r0, r5
 80080a2:	f7ff fd83 	bl	8007bac <_fflush_r>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d0d9      	beq.n	800805e <__swbuf_r+0x2e>
 80080aa:	e7d6      	b.n	800805a <__swbuf_r+0x2a>

080080ac <__swsetup_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4b29      	ldr	r3, [pc, #164]	@ (8008154 <__swsetup_r+0xa8>)
 80080b0:	4605      	mov	r5, r0
 80080b2:	6818      	ldr	r0, [r3, #0]
 80080b4:	460c      	mov	r4, r1
 80080b6:	b118      	cbz	r0, 80080c0 <__swsetup_r+0x14>
 80080b8:	6a03      	ldr	r3, [r0, #32]
 80080ba:	b90b      	cbnz	r3, 80080c0 <__swsetup_r+0x14>
 80080bc:	f7fd ff96 	bl	8005fec <__sinit>
 80080c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c4:	0719      	lsls	r1, r3, #28
 80080c6:	d422      	bmi.n	800810e <__swsetup_r+0x62>
 80080c8:	06da      	lsls	r2, r3, #27
 80080ca:	d407      	bmi.n	80080dc <__swsetup_r+0x30>
 80080cc:	2209      	movs	r2, #9
 80080ce:	602a      	str	r2, [r5, #0]
 80080d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080d4:	81a3      	strh	r3, [r4, #12]
 80080d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080da:	e033      	b.n	8008144 <__swsetup_r+0x98>
 80080dc:	0758      	lsls	r0, r3, #29
 80080de:	d512      	bpl.n	8008106 <__swsetup_r+0x5a>
 80080e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080e2:	b141      	cbz	r1, 80080f6 <__swsetup_r+0x4a>
 80080e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080e8:	4299      	cmp	r1, r3
 80080ea:	d002      	beq.n	80080f2 <__swsetup_r+0x46>
 80080ec:	4628      	mov	r0, r5
 80080ee:	f7fe ff07 	bl	8006f00 <_free_r>
 80080f2:	2300      	movs	r3, #0
 80080f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	2300      	movs	r3, #0
 8008100:	6063      	str	r3, [r4, #4]
 8008102:	6923      	ldr	r3, [r4, #16]
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	f043 0308 	orr.w	r3, r3, #8
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	6923      	ldr	r3, [r4, #16]
 8008110:	b94b      	cbnz	r3, 8008126 <__swsetup_r+0x7a>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800811c:	d003      	beq.n	8008126 <__swsetup_r+0x7a>
 800811e:	4621      	mov	r1, r4
 8008120:	4628      	mov	r0, r5
 8008122:	f000 f883 	bl	800822c <__smakebuf_r>
 8008126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812a:	f013 0201 	ands.w	r2, r3, #1
 800812e:	d00a      	beq.n	8008146 <__swsetup_r+0x9a>
 8008130:	2200      	movs	r2, #0
 8008132:	60a2      	str	r2, [r4, #8]
 8008134:	6962      	ldr	r2, [r4, #20]
 8008136:	4252      	negs	r2, r2
 8008138:	61a2      	str	r2, [r4, #24]
 800813a:	6922      	ldr	r2, [r4, #16]
 800813c:	b942      	cbnz	r2, 8008150 <__swsetup_r+0xa4>
 800813e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008142:	d1c5      	bne.n	80080d0 <__swsetup_r+0x24>
 8008144:	bd38      	pop	{r3, r4, r5, pc}
 8008146:	0799      	lsls	r1, r3, #30
 8008148:	bf58      	it	pl
 800814a:	6962      	ldrpl	r2, [r4, #20]
 800814c:	60a2      	str	r2, [r4, #8]
 800814e:	e7f4      	b.n	800813a <__swsetup_r+0x8e>
 8008150:	2000      	movs	r0, #0
 8008152:	e7f7      	b.n	8008144 <__swsetup_r+0x98>
 8008154:	20000018 	.word	0x20000018

08008158 <_raise_r>:
 8008158:	291f      	cmp	r1, #31
 800815a:	b538      	push	{r3, r4, r5, lr}
 800815c:	4605      	mov	r5, r0
 800815e:	460c      	mov	r4, r1
 8008160:	d904      	bls.n	800816c <_raise_r+0x14>
 8008162:	2316      	movs	r3, #22
 8008164:	6003      	str	r3, [r0, #0]
 8008166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800816e:	b112      	cbz	r2, 8008176 <_raise_r+0x1e>
 8008170:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008174:	b94b      	cbnz	r3, 800818a <_raise_r+0x32>
 8008176:	4628      	mov	r0, r5
 8008178:	f000 f830 	bl	80081dc <_getpid_r>
 800817c:	4622      	mov	r2, r4
 800817e:	4601      	mov	r1, r0
 8008180:	4628      	mov	r0, r5
 8008182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008186:	f000 b817 	b.w	80081b8 <_kill_r>
 800818a:	2b01      	cmp	r3, #1
 800818c:	d00a      	beq.n	80081a4 <_raise_r+0x4c>
 800818e:	1c59      	adds	r1, r3, #1
 8008190:	d103      	bne.n	800819a <_raise_r+0x42>
 8008192:	2316      	movs	r3, #22
 8008194:	6003      	str	r3, [r0, #0]
 8008196:	2001      	movs	r0, #1
 8008198:	e7e7      	b.n	800816a <_raise_r+0x12>
 800819a:	2100      	movs	r1, #0
 800819c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80081a0:	4620      	mov	r0, r4
 80081a2:	4798      	blx	r3
 80081a4:	2000      	movs	r0, #0
 80081a6:	e7e0      	b.n	800816a <_raise_r+0x12>

080081a8 <raise>:
 80081a8:	4b02      	ldr	r3, [pc, #8]	@ (80081b4 <raise+0xc>)
 80081aa:	4601      	mov	r1, r0
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	f7ff bfd3 	b.w	8008158 <_raise_r>
 80081b2:	bf00      	nop
 80081b4:	20000018 	.word	0x20000018

080081b8 <_kill_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4d07      	ldr	r5, [pc, #28]	@ (80081d8 <_kill_r+0x20>)
 80081bc:	2300      	movs	r3, #0
 80081be:	4604      	mov	r4, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	4611      	mov	r1, r2
 80081c4:	602b      	str	r3, [r5, #0]
 80081c6:	f7f9 f993 	bl	80014f0 <_kill>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d102      	bne.n	80081d4 <_kill_r+0x1c>
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	b103      	cbz	r3, 80081d4 <_kill_r+0x1c>
 80081d2:	6023      	str	r3, [r4, #0]
 80081d4:	bd38      	pop	{r3, r4, r5, pc}
 80081d6:	bf00      	nop
 80081d8:	20000458 	.word	0x20000458

080081dc <_getpid_r>:
 80081dc:	f7f9 b980 	b.w	80014e0 <_getpid>

080081e0 <__swhatbuf_r>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	460c      	mov	r4, r1
 80081e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e8:	2900      	cmp	r1, #0
 80081ea:	b096      	sub	sp, #88	@ 0x58
 80081ec:	4615      	mov	r5, r2
 80081ee:	461e      	mov	r6, r3
 80081f0:	da0d      	bge.n	800820e <__swhatbuf_r+0x2e>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80081f8:	f04f 0100 	mov.w	r1, #0
 80081fc:	bf14      	ite	ne
 80081fe:	2340      	movne	r3, #64	@ 0x40
 8008200:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008204:	2000      	movs	r0, #0
 8008206:	6031      	str	r1, [r6, #0]
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	b016      	add	sp, #88	@ 0x58
 800820c:	bd70      	pop	{r4, r5, r6, pc}
 800820e:	466a      	mov	r2, sp
 8008210:	f000 f848 	bl	80082a4 <_fstat_r>
 8008214:	2800      	cmp	r0, #0
 8008216:	dbec      	blt.n	80081f2 <__swhatbuf_r+0x12>
 8008218:	9901      	ldr	r1, [sp, #4]
 800821a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800821e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008222:	4259      	negs	r1, r3
 8008224:	4159      	adcs	r1, r3
 8008226:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800822a:	e7eb      	b.n	8008204 <__swhatbuf_r+0x24>

0800822c <__smakebuf_r>:
 800822c:	898b      	ldrh	r3, [r1, #12]
 800822e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008230:	079d      	lsls	r5, r3, #30
 8008232:	4606      	mov	r6, r0
 8008234:	460c      	mov	r4, r1
 8008236:	d507      	bpl.n	8008248 <__smakebuf_r+0x1c>
 8008238:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	2301      	movs	r3, #1
 8008242:	6163      	str	r3, [r4, #20]
 8008244:	b003      	add	sp, #12
 8008246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008248:	ab01      	add	r3, sp, #4
 800824a:	466a      	mov	r2, sp
 800824c:	f7ff ffc8 	bl	80081e0 <__swhatbuf_r>
 8008250:	9f00      	ldr	r7, [sp, #0]
 8008252:	4605      	mov	r5, r0
 8008254:	4639      	mov	r1, r7
 8008256:	4630      	mov	r0, r6
 8008258:	f7fe fec6 	bl	8006fe8 <_malloc_r>
 800825c:	b948      	cbnz	r0, 8008272 <__smakebuf_r+0x46>
 800825e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008262:	059a      	lsls	r2, r3, #22
 8008264:	d4ee      	bmi.n	8008244 <__smakebuf_r+0x18>
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	f043 0302 	orr.w	r3, r3, #2
 800826e:	81a3      	strh	r3, [r4, #12]
 8008270:	e7e2      	b.n	8008238 <__smakebuf_r+0xc>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	6020      	str	r0, [r4, #0]
 8008276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800827a:	81a3      	strh	r3, [r4, #12]
 800827c:	9b01      	ldr	r3, [sp, #4]
 800827e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008282:	b15b      	cbz	r3, 800829c <__smakebuf_r+0x70>
 8008284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008288:	4630      	mov	r0, r6
 800828a:	f000 f81d 	bl	80082c8 <_isatty_r>
 800828e:	b128      	cbz	r0, 800829c <__smakebuf_r+0x70>
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	f023 0303 	bic.w	r3, r3, #3
 8008296:	f043 0301 	orr.w	r3, r3, #1
 800829a:	81a3      	strh	r3, [r4, #12]
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	431d      	orrs	r5, r3
 80082a0:	81a5      	strh	r5, [r4, #12]
 80082a2:	e7cf      	b.n	8008244 <__smakebuf_r+0x18>

080082a4 <_fstat_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4d07      	ldr	r5, [pc, #28]	@ (80082c4 <_fstat_r+0x20>)
 80082a8:	2300      	movs	r3, #0
 80082aa:	4604      	mov	r4, r0
 80082ac:	4608      	mov	r0, r1
 80082ae:	4611      	mov	r1, r2
 80082b0:	602b      	str	r3, [r5, #0]
 80082b2:	f7f9 f97d 	bl	80015b0 <_fstat>
 80082b6:	1c43      	adds	r3, r0, #1
 80082b8:	d102      	bne.n	80082c0 <_fstat_r+0x1c>
 80082ba:	682b      	ldr	r3, [r5, #0]
 80082bc:	b103      	cbz	r3, 80082c0 <_fstat_r+0x1c>
 80082be:	6023      	str	r3, [r4, #0]
 80082c0:	bd38      	pop	{r3, r4, r5, pc}
 80082c2:	bf00      	nop
 80082c4:	20000458 	.word	0x20000458

080082c8 <_isatty_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4d06      	ldr	r5, [pc, #24]	@ (80082e4 <_isatty_r+0x1c>)
 80082cc:	2300      	movs	r3, #0
 80082ce:	4604      	mov	r4, r0
 80082d0:	4608      	mov	r0, r1
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	f7f9 f97c 	bl	80015d0 <_isatty>
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d102      	bne.n	80082e2 <_isatty_r+0x1a>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	b103      	cbz	r3, 80082e2 <_isatty_r+0x1a>
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
 80082e4:	20000458 	.word	0x20000458

080082e8 <_init>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	bf00      	nop
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr

080082f4 <_fini>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	bf00      	nop
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr
